<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JUST WRITE IT.</title>
    <link>https://doyuni.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 25 Jan 2020 08:58:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>백준 11559번 Puyo Puyo</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11559/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11559/</guid>
      <pubDate>Sat, 25 Jan 2020 04:30:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11559-Puyo-Puyo&quot;&gt;&lt;a href=&quot;#11559-Puyo-Puyo&quot; class=&quot;headerlink&quot; title=&quot;#11559. Puyo Puyo&quot;&gt;&lt;/a&gt;#11559. Puyo Puyo&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11559-Puyo-Puyo"><a href="#11559-Puyo-Puyo" class="headerlink" title="#11559. Puyo Puyo"></a>#11559. Puyo Puyo</h1><p><a href="https://www.acmicpc.net/problem/11559" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>뿌요는 바닥이나 다른 뿌요가 있을 때까지 아래로 떨어짐</li><li>뿌요가 놓여지고 같은 색 뿌요가 4개 이상 상하좌우로 연결되어 있으면<br>연결된 같은 색 뿌요들이 모두 사라진다.</li><li>위 과정이 반복되면 1연쇄씩 늘어난다. (터지는 그룹이 동시에 여럿이라도 1연쇄)</li></ul><p>입력</p><pre><code>12*6의 문자.은 빈공간이외 뿌요 색깔 R, G, B, P, Y뿌요들이 전부 아래로 떨어진 뒤의 상태가 주어짐</code></pre><p><strong>Goal: 몇 연쇄가 되는지 출력, 안터지면 0 출력</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>다음과 같은 과정이 일어난다.</p><ol><li>현재 map에서 터뜨릴 수 있는 것들 터뜨리기</li><li>아래로 떨어뜨리기</li><li>위 과정 반복하기(더이상 터뜨릴 수 없는 경우 종료)</li></ol><ul><li>터뜨리기</li></ul><p>BFS를 활용하여 4개 이상 연속인지 확인을 한다.</p><pre><code>void bfs(현재 위치)    탐색용도 queue와 지울(터뜨릴)용도 queue 선언    현재 위치 넣어주고, check    탐색용도 queue를 전부 비울 때까지 탐색    탐색이 끝나면(더이상 갈 때가 없는 것)    지울 용도의 queue 크기가 4이상이면 터뜨리기</code></pre><ul><li><p>bfs 탐색이 끝나면 다음과 같이 4개 연속인 것들 터뜨리기</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMap</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;erase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!erase.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = erase.front().first;</span><br><span class="line"><span class="keyword">int</span> c = erase.front().second;</span><br><span class="line">erase.pop();</span><br><span class="line"><span class="built_in">map</span>[r][c] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 과정이 모든 map의 각 행과 열에서 이루어지면 그때 아래로 떨어뜨린다.<br>(모든 위치에서 BFS탐색이 끝난 경우)</p></li><li><p>아래로 떨어뜨리기</p></li></ul><ol><li>Queue를 이용하여 맨 아래에서 부터 위로 탐색을 시작하여 <strong>.</strong> 인 지점을 순서대로 넣어준다.</li><li>. 이 아니라면 queue에 들어간 순서대로 위치를 교환한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">point</span>.empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">point</span>.front().first;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">point</span>.front().second;</span><br><span class="line"><span class="built_in">point</span>.pop();</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[j][i];</span><br><span class="line"><span class="built_in">map</span>[j][i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3></li></ol><ul><li>틀린 코드<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> answer, len;</span><br><span class="line"><span class="keyword">bool</span> flag, loop = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; <span class="number">12</span> &amp;&amp; c &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">point</span>.empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">point</span>.front().first;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">point</span>.front().second;</span><br><span class="line"><span class="built_in">point</span>.pop();</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[j][i];</span><br><span class="line"><span class="built_in">map</span>[j][i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMap</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; erase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!erase.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = erase.front().first;</span><br><span class="line"><span class="keyword">int</span> c = erase.front().second;</span><br><span class="line">erase.pop();</span><br><span class="line"><span class="built_in">map</span>[r][c] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; erase)</span> </span>&#123;</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line">erase.push(&#123; r, c &#125;);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] ==  <span class="built_in">map</span>[r][c] &amp;&amp; <span class="built_in">map</span>[r][c] != <span class="string">'.'</span>) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>; flag = <span class="literal">true</span>;</span><br><span class="line">erase.push(&#123; x, y &#125;);</span><br><span class="line">len++;</span><br><span class="line">dfs(x, y, erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag &amp;&amp; len &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">loop = <span class="literal">true</span>;</span><br><span class="line">changeMap(erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; erase;</span><br><span class="line"><span class="keyword">while</span> (loop) &#123;</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="string">'.'</span> &amp;&amp; !check[i][j]) &#123;</span><br><span class="line">len = <span class="number">1</span>;</span><br><span class="line">dfs(i, j, erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (loop) &#123;</span><br><span class="line">update();</span><br><span class="line">answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>DFS로 하니까 map에서 연속인 것들을 제대로 지우지 못 한다는 것을 깨닫고<br>(실제 값 확인해보면 erase queue에 연속적으로 못 넣고 return하게 됨)</li></ul><p>BFS를 사용하여 쉽게 풀었다..(진작에 할걸)</p><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> loop = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; <span class="number">12</span> &amp;&amp; c &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">point</span>.empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">point</span>.front().first;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">point</span>.front().second;</span><br><span class="line"><span class="built_in">point</span>.pop();</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[j][i];</span><br><span class="line"><span class="built_in">map</span>[j][i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMap</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;erase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!erase.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = erase.front().first;</span><br><span class="line"><span class="keyword">int</span> c = erase.front().second;</span><br><span class="line">erase.pop();</span><br><span class="line"><span class="built_in">map</span>[r][c] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, erase;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">erase.push(&#123; r, c &#125;);</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> length = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">r = q.front().first;</span><br><span class="line">c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] == <span class="built_in">map</span>[r][c] &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="string">'.'</span>) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">erase.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (erase.<span class="built_in">size</span>() &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">loop = <span class="literal">true</span>;</span><br><span class="line">changeMap(erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (loop) &#123;</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="string">'.'</span> &amp;&amp; !check[i][j]) &#123;</span><br><span class="line">bfs(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (loop) &#123;</span><br><span class="line">update();</span><br><span class="line">answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>디버깅용 코드<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> answer;</span><br><span class="line"><span class="keyword">bool</span> loop = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; <span class="number">12</span> &amp;&amp; c &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">point</span>.empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">point</span>.front().first;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">point</span>.front().second;</span><br><span class="line"><span class="built_in">point</span>.pop();</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[j][i];</span><br><span class="line"><span class="built_in">map</span>[j][i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*printf("start\n");</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 12; ++i) &#123;</span></span><br><span class="line"><span class="comment">for (int j = 0; j &lt; 6; ++j) &#123;</span></span><br><span class="line"><span class="comment">printf("%c", map[i][j]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMap</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;erase)</span> </span>&#123;</span><br><span class="line"><span class="comment">//printf("erase\n");</span></span><br><span class="line"><span class="keyword">while</span> (!erase.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = erase.front().first;</span><br><span class="line"><span class="keyword">int</span> c = erase.front().second;</span><br><span class="line"><span class="comment">//printf("%d %d\n", r, c);</span></span><br><span class="line">erase.pop();</span><br><span class="line"><span class="built_in">map</span>[r][c] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, erase;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">erase.push(&#123; r, c &#125;);</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> length = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">r = q.front().first;</span><br><span class="line">c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] == <span class="built_in">map</span>[r][c] &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="string">'.'</span>) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">erase.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (erase.<span class="built_in">size</span>() &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">loop = <span class="literal">true</span>;</span><br><span class="line">changeMap(erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (loop) &#123;</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="string">'.'</span> &amp;&amp; !check[i][j]) &#123;</span><br><span class="line">bfs(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (loop) &#123;</span><br><span class="line">update();</span><br><span class="line">answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>디버깅용 Test case</li></ul><h1 id="1-output-14"><a href="#1-output-14" class="headerlink" title="1. output : 14"></a>1. output : 14</h1><pre><code>Y.....B.....R.R...G.R...YG....YBR..YRR...YYYRBRBYRBGBBGBRBGRGBRBGRGBRBGR</code></pre><h1 id="2-output-1"><a href="#2-output-1" class="headerlink" title="2. output : 1"></a>2. output : 1</h1><pre><code>................................................R...........RRYYGGRRYYGG</code></pre><h1 id="3-output-2"><a href="#3-output-2" class="headerlink" title="3. output: 2"></a>3. output: 2</h1><pre><code>........R.....R.GG...GG...R...........R.........R.........G.RRY..GRRYYGG</code></pre>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11559/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11047번 동전 0</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11047/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11047/</guid>
      <pubDate>Sat, 25 Jan 2020 04:23:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11047-동전-0&quot;&gt;&lt;a href=&quot;#11047-동전-0&quot; class=&quot;headerlink&quot; title=&quot;#11047. 동전 0&quot;&gt;&lt;/a&gt;#11047. 동전 0&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/p
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11047-동전-0"><a href="#11047-동전-0" class="headerlink" title="#11047. 동전 0"></a>#11047. 동전 0</h1><p><a href="https://www.acmicpc.net/problem/11047" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>동전의 종류 N</li><li>동전을 적절히 사용해 합을 K로 만드려고 한다.</li></ul><p><strong>Goal: K를 만드는데 필요한 동전 개수의 최솟값 구하기</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><p>동전의 가치는 오름차순으로 주어지고<br>이전 가치보다 항상 몇 배 더 크다.</p><p>  4200<br>  1000 <em> 4<br>  100 </em> 2<br>  6개</p><p>  4790<br>  4000 <em> 4  790<br>  500 </em> 1  290<br>  100 <em> 2 90<br>  50 </em> 1 40<br>  10 * 4<br>  12개</p><p>  12<br>  1, 3, 4, 5<br>  5 <em> 2  2<br>  1 </em> 2<br>  4개<br>  하지만<br>  4 * 3<br>  3개</p></li></ul><p>위와 같은 상황이 일어날까?<br>동전의 가치가 이전 가치의 배수이기에 일어날 수 없을 것이다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; costs;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, n, goal, answer = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; goal;</span><br><span class="line">costs.resize(n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; costs[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(goal != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(goal &gt;= costs[i<span class="number">-1</span>]) &#123;</span><br><span class="line">goal -= costs[i<span class="number">-1</span>];</span><br><span class="line">answer++;</span><br><span class="line">&#125; <span class="keyword">else</span> i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; answer &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11047/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 10989번 수 정렬하기 3</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10989/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10989/</guid>
      <pubDate>Sat, 25 Jan 2020 04:21:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;10989-수-정렬하기-3&quot;&gt;&lt;a href=&quot;#10989-수-정렬하기-3&quot; class=&quot;headerlink&quot; title=&quot;#10989. 수 정렬하기 3&quot;&gt;&lt;/a&gt;#10989. 수 정렬하기 3&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://w
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="10989-수-정렬하기-3"><a href="#10989-수-정렬하기-3" class="headerlink" title="#10989. 수 정렬하기 3"></a>#10989. 수 정렬하기 3</h1><p><a href="https://www.acmicpc.net/problem/10989" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>시간 제한 3초</li><li><strong>메모리 제한 8MB</strong></li></ul><p><strong>Goal : 주어진 수를 오름차순으로 정렬하기</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>메모리 제한이 8MB라는 점에 주의한다.</li><li>주어진 수는 최대 천만<br>수의 최댓값은 최대 만</li><li>int 형 배열을 천만개 크기로 만들면<br>10000000 * 4 = 4천만 byte = 38…MB(이미 초과</li><li>하지만 10001 크기의 배열만으로 문제를 풀 수 있다.<br>40004 = 0.038..MB(충분히 통과)</li><li>위의 크기만 가지고 문제를 푸려면 counting sort가 적절하다.</li><li>입력으로 받은 수를 각각 세어준다. → 끝</li><li>??? 진짜 끝이다. 남은건 해당 숫자만큼 차례대로 카운트한 횟수만큼 출력해주면 된다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">// 이거 안써도 된다...</span></span><br><span class="line"><span class="keyword">int</span> cnt[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, input;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">cnt[input]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAX; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt[i]; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10989/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 10814번 나이순 정렬</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10814/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10814/</guid>
      <pubDate>Sat, 25 Jan 2020 04:21:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;10814-나이순-정렬&quot;&gt;&lt;a href=&quot;#10814-나이순-정렬&quot; class=&quot;headerlink&quot; title=&quot;#10814. 나이순 정렬&quot;&gt;&lt;/a&gt;#10814. 나이순 정렬&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmic
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="10814-나이순-정렬"><a href="#10814-나이순-정렬" class="headerlink" title="#10814. 나이순 정렬"></a>#10814. 나이순 정렬</h1><p><a href="https://www.acmicpc.net/problem/10814" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>나이와 이름이 입력으로 주어진다.</li><li>나이순으로 정렬<ul><li>나이가 같다면 가입한 순서로 정렬(입력 순으로)</li></ul></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><key: 나이, value: 이름>으로 key가 중복될 수 있으니 <strong>multimap</strong>을 사용한다.</key:></li><li>map 자체가 key가 오름차순을 유지하도록 data를 넣어준다.<br>같다면 입력순으로 된다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; answer;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age &gt;&gt; name;</span><br><span class="line">answer.insert(make_pair(age, name));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> ans : answer) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.first &lt;&lt; <span class="string">" "</span> &lt;&lt; ans.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10814/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 9019번 DSLR</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/9019/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/9019/</guid>
      <pubDate>Sat, 25 Jan 2020 04:21:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;9019-DSLR&quot;&gt;&lt;a href=&quot;#9019-DSLR&quot; class=&quot;headerlink&quot; title=&quot;#9019. DSLR&quot;&gt;&lt;/a&gt;#9019. DSLR&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="9019-DSLR"><a href="#9019-DSLR" class="headerlink" title="#9019. DSLR"></a>#9019. DSLR</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/9019" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>이 문제는 명령어 ‘L’과 ‘R’을 어떻게 수행하느냐가 제일 중요하다.</li><li>처음에 deque를 사용하여 숫자를 배열로 나누고 합치고 이러다가 시간초과…</li><li>사실 사칙연산만 사용하면 위 명령어를 수행할 수 있다.</li><li>L 명령어</li></ul><p>Next = (Now % 1000 * 10) + (Now / 1000)</p><ul><li>R 명령어</li></ul><p>Next = (Now / 10) + (Now % 10 * 1000)</p><ul><li>주의해야 할 사항</li></ul><p>테스트 케이스를 여러 번 수행하는 문제이므로 초기화가 필요한 변수나 배열은 초기화를 해줘야 한다.</p><p>명령어를 저장하고 있어야 하므로, 해당 숫자를 어떻게 만들었는지 경로를 저장할 배열을, 그 숫자를 만들 때 쓴 명령어가 무엇인지 저장할 배열을 만든다.</p><p><code>from[a] = b</code> a를 만들기 이전 숫자 b</p><p><code>how[a] = &#39;b&#39;</code> a를 만들 때 수행된 명령어 b</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>code<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">4</span>] = &#123; <span class="string">'D'</span>, <span class="string">'S'</span>, <span class="string">'L'</span>, <span class="string">'R'</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> check[MAX];</span><br><span class="line"><span class="keyword">int</span> from[MAX];</span><br><span class="line"><span class="keyword">char</span> how[MAX];</span><br><span class="line"><span class="keyword">int</span> A, B;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintCmd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">PrintCmd(a, from[b]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; how[b];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(A);</span><br><span class="line">check[A] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> a = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (a == B) &#123;</span><br><span class="line">PrintCmd(A, B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d = a * <span class="number">2</span> &gt; MAX - <span class="number">1</span> ? a * <span class="number">2</span> % MAX : a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (!check[d]) &#123;</span><br><span class="line">check[d] = <span class="literal">true</span>;</span><br><span class="line">how[d] = <span class="string">'D'</span>;</span><br><span class="line">from[d] = a;</span><br><span class="line">q.push(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s = a == <span class="number">0</span> ? MAX - <span class="number">1</span> : a - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!check[s]) &#123;</span><br><span class="line">check[s] = <span class="literal">true</span>;</span><br><span class="line">how[s] = <span class="string">'D'</span>;</span><br><span class="line">from[s] = a;</span><br><span class="line">q.push(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cur = a;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; ld, rd;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, div = <span class="number">1000</span>; i &lt; <span class="number">4</span>; ++i, div /= <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> num = cur / div; cur %= div;</span><br><span class="line">ld.push_back(num); rd.push_back(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp = ld.front(); ld.pop_front();</span><br><span class="line">ld.push_back(tmp);</span><br><span class="line">tmp = rd.back(); rd.pop_back();</span><br><span class="line">rd.push_front(tmp);</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, div = <span class="number">1</span>; i &lt; <span class="number">4</span>; ++i, div *= <span class="number">10</span>) &#123;</span><br><span class="line">l += ld.back() * div;</span><br><span class="line">r += rd.back() * div;</span><br><span class="line">ld.pop_back(); rd.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!check[l]) &#123;</span><br><span class="line">check[l] = <span class="literal">true</span>;</span><br><span class="line">how[l] = <span class="string">'L'</span>;</span><br><span class="line">from[l] = a;</span><br><span class="line">q.push(l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!check[r]) &#123;</span><br><span class="line">check[r] = <span class="literal">true</span>;</span><br><span class="line">how[r] = <span class="string">'R'</span>;</span><br><span class="line">from[r] = a;</span><br><span class="line">q.push(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; T; ++t) &#123;</span><br><span class="line">Init();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B;</span><br><span class="line">BFS();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>시간초과</li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">4</span>] = &#123; <span class="string">'D'</span>, <span class="string">'S'</span>, <span class="string">'L'</span>, <span class="string">'R'</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> check[MAX];</span><br><span class="line"><span class="keyword">int</span> from[MAX];</span><br><span class="line"><span class="keyword">char</span> how[MAX];</span><br><span class="line"><span class="keyword">int</span> A, B;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintCmd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">PrintCmd(a, from[b]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; how[b];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(A);</span><br><span class="line">check[A] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> a = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (a == B) &#123;</span><br><span class="line">PrintCmd(A, B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d = a * <span class="number">2</span> % MAX;</span><br><span class="line"><span class="keyword">if</span> (!check[d]) &#123;</span><br><span class="line">check[d] = <span class="literal">true</span>;</span><br><span class="line">how[d] = <span class="string">'D'</span>;</span><br><span class="line">from[d] = a;</span><br><span class="line">q.push(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s = a == <span class="number">0</span> ? MAX - <span class="number">1</span> : a - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!check[s]) &#123;</span><br><span class="line">check[s] = <span class="literal">true</span>;</span><br><span class="line">how[s] = <span class="string">'S'</span>;</span><br><span class="line">from[s] = a;</span><br><span class="line">q.push(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = (a % <span class="number">1000</span> * <span class="number">10</span>) + (a / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (!check[l]) &#123;</span><br><span class="line">check[l] = <span class="literal">true</span>;</span><br><span class="line">how[l] = <span class="string">'L'</span>;</span><br><span class="line">from[l] = a;</span><br><span class="line">q.push(l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r = (a / <span class="number">10</span>) + (a % <span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (!check[r]) &#123;</span><br><span class="line">check[r] = <span class="literal">true</span>;</span><br><span class="line">how[r] = <span class="string">'R'</span>;</span><br><span class="line">from[r] = a;</span><br><span class="line">q.push(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; T; ++t) &#123;</span><br><span class="line">Init();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B;</span><br><span class="line">BFS();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/9019/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 3190번 뱀</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3190/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3190/</guid>
      <pubDate>Sat, 25 Jan 2020 04:21:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3190-뱀&quot;&gt;&lt;a href=&quot;#3190-뱀&quot; class=&quot;headerlink&quot; title=&quot;#3190. 뱀&quot;&gt;&lt;/a&gt;#3190. 뱀&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/3190&quot; tar
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="3190-뱀"><a href="#3190-뱀" class="headerlink" title="#3190. 뱀"></a>#3190. 뱀</h1><p><a href="https://www.acmicpc.net/problem/3190" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 보드판</li><li>양 끝 모서리에 벽이 있음</li><li>뱀의 길이 1, 시작 위치 (1, 1), 방향: →</li><li>매 초마다 이동</li></ul><ol><li>머리를 다음 칸에 위치</li><li>이동한 칸에 사과가 있으면 사과 먹고 꼬리 움직이지 않음(몸길이 늘어남)</li><li>꼬리 움직인다. (몸길이 그대로)</li></ol><p><strong>Goal: 사과의 위치와 뱀의 이동경로가 주어질 때 게임이 몇 초만에 끝나는지 계산</strong></p><p>게임은 벽이나 자기자신의 몸과 부딪히면 끝난다.</p><p>뱀의 이동 경로는 (왼쪽 오른쪽 으로 90도 방향 회전)</p><ul><li>입력</li></ul><p>방향 변환 정보에서 주어진 초는 게임 시작 시간으로부터 X초가 끝난 뒤를 말한다.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>주어진 문제대로 구현하면 된다. (시뮬레이션)</li><li>방향전환 시간은 오름차순으로 주어지기에 queue에 저장</li><li>사과가 있는 곳은 -1로 표시</li><li>뱀이 있는 곳은 1부터~현재 길이까지 표시 (머리가 가장 큰 수)</li></ul><ol><li>머리를 기준으로 현재 방향에 맞게 움직인다.</li><li><p>머리가 움직였을 때 그곳이 벽이거나 자신의 몸인지 확인한다.<br>필자는 다음과 같은 경우에 뱀이 동시에 움직일거라 생각하여 게임이 안끝난다고 생각했다.</p><p> // 4가 머리이고 머리가 위쪽으로 가는 경우일 때<br> 1 2  -&gt;  4 1<br> 4 3      3 2</p></li></ol><p>하지만 동시에 움직이지 않고 머리부터 움직여서 꼬리가 따라온다. 그렇기에 위와 같은 경우는 게임이 종료된다.</p><ol><li><p>방향 전환 시간인지 확인한다.<br>해당 경우에 맞게 방향을 변경한다.</p></li><li><p>사과가 있는지 확인한다.<br>사과가 있으면 길이가 1 늘어나고 이동하지 않는다.</p></li><li><p>이동한다.<br>이동방법: 머리에서부터 시작해서 자신보다 1 적은 수를 찾는다. 찾으면 그 값을 넣는다. 이를 총 길이-1만큼 반복하고(머리를 제외하기 때문) 다음 탐색 부분에 머리를, 원래 꼬리 부분을 0으로 변경해준다.</p><p>1 2 3 4   —&gt;    1 1 2 3   —&gt;   0 1 2 3</p><pre><code>5                4             5 4</code></pre></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, l;</span><br><span class="line"><span class="keyword">int</span> board[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> d_left[<span class="number">4</span>] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span> &#125;; <span class="comment">// 'L'</span></span><br><span class="line"><span class="keyword">int</span> d_right[<span class="number">4</span>] = &#123; <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span> &#125;; <span class="comment">// 'D'</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; &gt; direction;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isWall</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">// 벽이면 true</span></span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; n || y &gt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x &lt;= n &amp;&amp; y &lt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>; <span class="keyword">int</span> y = <span class="number">1</span>; <span class="comment">// 시작위치</span></span><br><span class="line"><span class="keyword">int</span> dir = <span class="number">3</span>; <span class="comment">// 시작방향: 오른쪽</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">1</span>; <span class="comment">// 뱀의 길이</span></span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>; <span class="comment">// 게임 시작 시간</span></span><br><span class="line">board[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> convert = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!direction.empty()) &#123;</span><br><span class="line">convert = direction.front().first;</span><br><span class="line">&#125;</span><br><span class="line">time++;</span><br><span class="line"><span class="comment">// 현재 방향에 맞는 한 칸 이동</span></span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="comment">// 벽인지 자신의 몸인지 확인</span></span><br><span class="line"><span class="keyword">if</span> (isWall(d_x, d_y) || board[d_x][d_y] &gt; <span class="number">0</span>) <span class="keyword">return</span> time;</span><br><span class="line"><span class="comment">// 방향 전환 시간인지 확인</span></span><br><span class="line"><span class="keyword">if</span> (time == convert) &#123;</span><br><span class="line"><span class="keyword">if</span> (direction.front().second == <span class="string">'D'</span>) &#123;</span><br><span class="line">dir = d_right[dir];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dir = d_left[dir];</span><br><span class="line">&#125;</span><br><span class="line">direction.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 사과 있는지 확인</span></span><br><span class="line"><span class="keyword">if</span> (board[d_x][d_y] == <span class="number">-1</span>) &#123;</span><br><span class="line">board[d_x][d_y] = ++len;</span><br><span class="line">x = d_x; y = d_y;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 이동</span></span><br><span class="line"><span class="keyword">int</span> tmp_x = x, tmp_y = y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> d_tmp_x = tmp_x + dx[j];</span><br><span class="line"><span class="keyword">int</span> d_tmp_y = tmp_y + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_tmp_x, d_tmp_y)) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[d_tmp_x][d_tmp_y] == board[tmp_x][tmp_y] - <span class="number">1</span>) &#123;</span><br><span class="line">board[tmp_x][tmp_y] = board[d_tmp_x][d_tmp_y];</span><br><span class="line">tmp_x = d_tmp_x; tmp_y = d_tmp_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">board[d_x][d_y] = len;</span><br><span class="line">board[tmp_x][tmp_y] = <span class="number">0</span>;</span><br><span class="line">x = d_x;</span><br><span class="line">y = d_y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;r, &amp;c);</span><br><span class="line">board[r][c] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x; <span class="keyword">char</span> dir;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;x, &amp;dir);</span><br><span class="line">direction.push(&#123; x, dir &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, game());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3190/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 3055번 탈출</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3055/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3055/</guid>
      <pubDate>Sat, 25 Jan 2020 04:18:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3055-탈출&quot;&gt;&lt;a href=&quot;#3055-탈출&quot; class=&quot;headerlink&quot; title=&quot;#3055. 탈출&quot;&gt;&lt;/a&gt;#3055. 탈출&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;header
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="3055-탈출"><a href="#3055-탈출" class="headerlink" title="#3055. 탈출"></a>#3055. 탈출</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/3055" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>조건 중에 “<strong>물이 찰 예정인 칸에 고슴도치가 움직일 수 없다.</strong>“에 집중하였다.</li><li>물이 이동할 queue와 고슴도치가 이동할 queue를 따로 두어 탐색을 시작한다.</li><li>단, 물이 먼저 이동해야 한다.(위 조건 때문에)</li><li>모든 탐색은 BFS로 이루어지며, 물은 이동할 때마다 map을 갱신한다. 고슴도치는 갱신 안한다.</li><li>고슴도치가 <strong>‘D’</strong>에 도착하지 못 하고 탐색할 지점이 없을 때 -1을 리턴하여 도착할 수 없다는 것을 표시한다.</li><li><strong>‘D’</strong>에 도착하면 그때 시간을 바로 출력하도록 한다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> R, C;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; water;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;R, &amp;C);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'S'</span>) &#123; q.push(&#123; i, j &#125;); visit[i][j] = <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'*'</span>) water.push(&#123; i, j &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; R &amp;&amp; y &lt; C) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 고슴도치가 탐색할 지점이 없을 때까지 진행</span></span><br><span class="line"><span class="keyword">int</span> w_len = water.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w_len; ++i) &#123; <span class="comment">// 물의 이동</span></span><br><span class="line"><span class="keyword">int</span> water_x, water_y;</span><br><span class="line">tie(water_x, water_y) = water.front();</span><br><span class="line">water.pop();  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_w_x = water_x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_w_y = water_y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_w_x, d_w_y)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_w_x][d_w_y] == <span class="string">'.'</span> || <span class="built_in">map</span>[d_w_x][d_w_y] == <span class="string">'S'</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[d_w_x][d_w_y] = <span class="string">'*'</span>;</span><br><span class="line">water.push(&#123; d_w_x, d_w_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123; <span class="comment">// 고슴도치 이동</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">tie(x, y) = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="string">'D'</span>) <span class="keyword">return</span> time; <span class="comment">// 목적지 도착하면 시간 리턴</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; !visit[d_x][d_y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] != <span class="string">'X'</span> &amp;&amp; <span class="built_in">map</span>[d_x][d_y] != <span class="string">'*'</span>) &#123;</span><br><span class="line">visit[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">time++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = BFS();</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"KAKTUS\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3055/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2869번 달팽이는 올라가고 싶다</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2869/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2869/</guid>
      <pubDate>Sat, 25 Jan 2020 04:11:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2869-달팽이는-올라가고-싶다&quot;&gt;&lt;a href=&quot;#2869-달팽이는-올라가고-싶다&quot; class=&quot;headerlink&quot; title=&quot;#2869. 달팽이는 올라가고 싶다&quot;&gt;&lt;/a&gt;#2869. 달팽이는 올라가고 싶다&lt;/h1&gt;&lt;h3 id=&quot;P
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2869-달팽이는-올라가고-싶다"><a href="#2869-달팽이는-올라가고-싶다" class="headerlink" title="#2869. 달팽이는 올라가고 싶다"></a>#2869. 달팽이는 올라가고 싶다</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>높이 V미터인 나무막대</p><ul><li>낮에 A미터 올라감</li><li>밤에 B미터 내려감</li><li>정상에서는 안내려감</li></ul><p>나무 막대 모두 올라가는데 걸리는 일 수</p><p>하루에 +A -B</p><p>B &lt; A ≤ V ≤ 10억</p><p>어차피 값은 10억을 넘을 수 없으니 int 사용해도 무방</p><h3 id="Ex"><a href="#Ex" class="headerlink" title="Ex."></a>Ex.</h3><pre><code> input2 1 5 output4</code></pre><ul><li>설명</li></ul><p>1일:  0+2 = 2</p><p>2일:  2-1+2 =3</p><p>3일:  3-1+2 = 4</p><p>4일:  4-1+2 = 5</p><p>하지만 제한시간이 <strong>0.15초</strong>이기에 이런 단계로 풀면 안된다.<br>하루는 무조건 A가 되고 그 후는 -B+A가 반복이니  다음이 성립한다.</p><script type="math/tex; mode=display">V = A + (A-B)x</script><script type="math/tex; mode=display">x \ge \frac {V-A}{A-B}</script><p>하지만 x는 정수이므로 위와 같은 부등호를 붙여주어야 한다.</p><p>3 1 6</p><p>1일: 3 </p><p>2일: 3-1+3 = 5</p><p>3일: 5-1+3 = 7</p><p>공식: x ≥ 1.xx 따라서 x는 2, 총 일 수는 2+1 = 3일이된다.</p><ul><li>근데 이 공식 적용하면 V가 되었다가 다시 줄어드는 경우가 있어서 답에 영향을 주나? → NO</li><li><code>ceil()</code> 때문에 피연산자는 <code>double</code>형으로, 결과값은 <code>int</code>형으로 두었다.<br>(결과값을 double로 설정하면 출력값이 큰 경우 부동소수점 방식으로 출력되어 틀린 답이 된다.)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a, b, v;</span><br><span class="line">    <span class="keyword">int</span> day = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; v;</span><br><span class="line">    <span class="keyword">double</span> ans = (v-a) / (a-b);</span><br><span class="line">    ans = <span class="built_in">ceil</span>(ans);</span><br><span class="line">    day += ans;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; day &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2869/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2798번 블랙잭</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2798/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2798/</guid>
      <pubDate>Sat, 25 Jan 2020 04:11:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2798-블랙잭&quot;&gt;&lt;a href=&quot;#2798-블랙잭&quot; class=&quot;headerlink&quot; title=&quot;#2798. 블랙잭&quot;&gt;&lt;/a&gt;#2798. 블랙잭&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;N장의 카드&lt;/li&gt;
&lt;li&gt;M : 목표&lt;/li&gt;
&lt;li&gt;N장의 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2798-블랙잭"><a href="#2798-블랙잭" class="headerlink" title="#2798. 블랙잭"></a>#2798. 블랙잭</h1><ul><li>N장의 카드</li><li>M : 목표</li><li>N장의 카드 중 3개 선택</li><li>3개의 숫자 합이 M에 최대한 가깝도록(M을 넘어서면 안됨)</li></ul><p>N은 최대 100이기에 100장 중 3장을 선택하는 경우의 수 100 x 99 x 98 = 970,200‬가 최대이다.<br>그러므로 충분히 모든 경우의 수를 구해 답을 찾아낼 수 있는 문제이다.</p><p>재귀나 for문을 이용하여 풀 수 있을 것이다.</p><p>필자는 재귀를 사용하였다.</p><p>M은 최대 300000이기에 MAX 값으로 두었고 재귀의 내용은 다음과 같다.</p><ul><li>매개변수<ul><li>numbers :  N개의 숫자를 담을 vector</li><li>goal : M</li><li>ans : 숫자 합</li><li>index : numbers의 인덱스</li><li>selected : 남은 카드 선택 횟수</li></ul></li><li>실패 조건<ul><li>숫자 합이 M보다 클 때</li><li>index가 numbers의 크기를 넘었을 때</li></ul></li><li>성공 조건<ul><li>3번을 뽑았을 경우, goal과 ans의 차이가 최소인 값</li></ul></li><li>재귀함수<ul><li>카드를 선택하지 않을 때</li><li>카드를 선택했을 때<br>ans에 선택한 카드가 더해짐<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 300000;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> min_diff = MAX;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doCombination</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers, <span class="keyword">int</span> goal, <span class="keyword">int</span> ans, <span class="keyword">int</span> index, <span class="keyword">int</span> selected)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans &gt; goal) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(selected == <span class="number">0</span>) &#123;</span><br><span class="line">        min_diff = min_diff &gt; goal-ans ? goal-ans : min_diff;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index &gt;= numbers.size()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    doCombination(numbers, goal, ans, index+<span class="number">1</span>, selected); <span class="comment">// not selected</span></span><br><span class="line">    ans += numbers[index];</span><br><span class="line">    doCombination(numbers, goal, ans, index+<span class="number">1</span>, selected<span class="number">-1</span>); <span class="comment">// selected</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n, m, answer = <span class="number">0</span>;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">   numbers.resize(n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">       <span class="built_in">cin</span> &gt;&gt; numbers[i];</span><br><span class="line">   &#125;</span><br><span class="line">   doCombination(numbers, m, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">   answer = m - min_diff;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; answer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2798/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2748번 피보나치 수 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2748/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2748/</guid>
      <pubDate>Sat, 25 Jan 2020 04:11:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2748-피보나치-수-2&quot;&gt;&lt;a href=&quot;#2748-피보나치-수-2&quot; class=&quot;headerlink&quot; title=&quot;#2748. 피보나치 수 2&quot;&gt;&lt;/a&gt;#2748. 피보나치 수 2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2748-피보나치-수-2"><a href="#2748-피보나치-수-2" class="headerlink" title="#2748. 피보나치 수 2"></a>#2748. 피보나치 수 2</h1><p><a href="https://www.acmicpc.net/problem/2748" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><strong>Goal : n번째 피보나치 수를 구하여라</strong></li><li>condition<ul><li>최대 90번째 피보나치 수를 구할 수 있어야 함</li><li>시간 제한 1초</li></ul></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><script type="math/tex; mode=display">F_n = F_{n-1} + F_{n-2}</script><p>수식 그대로 DP를 적용한다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[n]은 n번째 피보나치 수</span></span><br><span class="line">dp[n] = dp[n<span class="number">-1</span>] + dp[n<span class="number">-2</span>];</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">91</span>]; </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fibo(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>주의할 점은 90번째 피보나치 수(10의 18승보다 큼)를 담으려면 long long을 써야 한다는 점이다.(long은 안된다.)</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2748/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2468번 안전 영역</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2468/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2468/</guid>
      <pubDate>Sat, 25 Jan 2020 04:11:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2468-안전-영역&quot;&gt;&lt;a href=&quot;#2468-안전-영역&quot; class=&quot;headerlink&quot; title=&quot;#2468. 안전 영역&quot;&gt;&lt;/a&gt;#2468. 안전 영역&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2468-안전-영역"><a href="#2468-안전-영역" class="headerlink" title="#2468. 안전 영역"></a>#2468. 안전 영역</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/2468" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>높이 1부터 최대 높이까지 작업을 진행한다. → set에 높이 정보를 담고 오름차순으로 정렬하면 더 빠를듯</li><li>각 높이마다 모든 영역을 탐색한다. (말이 모든 영역이지 이미 높이보다 같거나 작은 영역이나 방문한 영역이면 탐색을 하지 않는다.)<br>탐색은 BFS로 안전영역을 표시한다.</li><li>탐색이 끝나면 안전 영역의 수를 1증가한다.</li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, max_height, ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">visited[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= N || ny &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visited[nx][ny] || arr[nx][ny] &lt;= h) <span class="keyword">continue</span>;</span><br><span class="line">visited[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; nx, ny &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line"><span class="keyword">if</span> (max_height &lt; arr[i][j]) max_height = arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">1</span>; h &lt;= max_height; ++h) &#123;</span><br><span class="line"><span class="keyword">int</span> area = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (visited[i][j] || arr[i][j] &lt;= h) <span class="keyword">continue</span>;</span><br><span class="line">BFS(i, j, h);</span><br><span class="line">area++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; area) ans = area;</span><br><span class="line"><span class="built_in">memset</span>(visited, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2468/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2251번 물통</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2251/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2251/</guid>
      <pubDate>Sat, 25 Jan 2020 04:10:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2251-물통&quot;&gt;&lt;a href=&quot;#2251-물통&quot; class=&quot;headerlink&quot; title=&quot;#2251. 물통&quot;&gt;&lt;/a&gt;#2251. 물통&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;header
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2251-물통"><a href="#2251-물통" class="headerlink" title="#2251. 물통"></a>#2251. 물통</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/2251" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>첫 시작은 C 물통만 가득 차 있으니 전체 합은 C의 물통이다.</li><li>물을 옮기는 경우는 총 6경우로 0을 A, 1을 B, 2를 C라고 했을 때 다음과 같은 경우가 존재한다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 -&gt; 1, 0 -&gt; 2</span><br><span class="line">1 -&gt; 0, 1 -&gt; 2</span><br><span class="line">2 -&gt; 0, 2 -&gt; 1</span><br></pre></td></tr></table></figure></li><li>경우의 수가 중복되지 않도록 표시해주는 배열은 2차원으로도 해결 가능하다. (전체 양은 일정하니 A, B만 알아도 C를 알 수 있기 때문이다.)</li></ul><ol><li>처음 A, B, C의 부피를 저장한다.</li><li>시작은 (0, 0)에서 시작하고, ans[C 물의 양]이 true임을 표시해 A가 0일 때 C의 물의양임을 나타낸다.</li><li>BFS 탐색을 시작한다. 각 경우에서 계속해서 나아가는 방식이기에 적합하다. (경우의 수도 많지 않음)</li><li><p>물을 옮기는 건 2가지 경우가 존재한다.</p><p> from x → to y</p><ol><li><strong>x + y ≤ Y</strong><br>x + y의 값이 y를 가진 물통의 부피(Y)이하일 때<br>x를 다 옮길 수 있으므로 <strong>x를 가졌던 물통의 물의 양은 0</strong>이 된다.<br>y를 가진 물통의 물의 양은 <strong>x+y</strong>가 된다.</li><li><strong>x + y &gt; Y</strong><br>x + y의 값이 Y보다 클 때 x를 다 옮길 수 없으므로<br>x를 가졌던 물통의 물의 양은 <strong>x + y - Y</strong>가된다.<br>y를 가졌던 물통의 물의 양은 <strong>Y</strong>가 된다.</li></ol><ol><li>check와 A의 물의 양이 0인지 판단하여 BFS 탐색을 한다.</li></ol></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> bucket[<span class="number">3</span>]; <span class="comment">// 물통 부피</span></span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">201</span>][<span class="number">201</span>]; <span class="comment">// A, B만 알아도 C를 알 수 있음</span></span><br><span class="line"><span class="keyword">bool</span> ans[<span class="number">201</span>]; <span class="comment">// A가 비어있을 때 C의 물의 양</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">int</span> from[<span class="number">6</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span> &#125;; <span class="comment">// 0: A, 1: B, 2: C</span></span><br><span class="line"><span class="keyword">int</span> to[<span class="number">6</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans[i]) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = bucket[<span class="number">2</span>];</span><br><span class="line">q.push(&#123; <span class="number">0</span>, <span class="number">0</span> &#125;);</span><br><span class="line">check[<span class="number">0</span>][<span class="number">0</span>]= <span class="literal">true</span>;</span><br><span class="line">ans[sum] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> cur[<span class="number">3</span>];</span><br><span class="line">cur[<span class="number">0</span>] = q.front().first;</span><br><span class="line">cur[<span class="number">1</span>] = q.front().second;</span><br><span class="line">cur[<span class="number">2</span>] = sum - cur[<span class="number">0</span>] - cur[<span class="number">1</span>];</span><br><span class="line">q.pop(); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> next[<span class="number">3</span>] = &#123; cur[<span class="number">0</span>], cur[<span class="number">1</span>], cur[<span class="number">2</span>] &#125;;</span><br><span class="line"><span class="keyword">if</span> (next[from[i]] + next[to[i]] &lt;= bucket[to[i]]) &#123; </span><br><span class="line">next[to[i]] += next[from[i]];</span><br><span class="line">next[from[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 옮긴 물의 양이 해당 물통 부피보다 클 때</span></span><br><span class="line">next[from[i]] += next[to[i]] - bucket[to[i]];</span><br><span class="line">next[to[i]] = bucket[to[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!check[next[<span class="number">0</span>]][next[<span class="number">1</span>]]) &#123;</span><br><span class="line">check[next[<span class="number">0</span>]][next[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; next[<span class="number">0</span>], next[<span class="number">1</span>] &#125;);</span><br><span class="line"><span class="keyword">if</span> (next[<span class="number">0</span>] == <span class="number">0</span>) ans[next[<span class="number">2</span>]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) <span class="built_in">cin</span> &gt;&gt; bucket[i];</span><br><span class="line">BFS();</span><br><span class="line">Output();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2251/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2231번 분해합</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2231/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2231/</guid>
      <pubDate>Sat, 25 Jan 2020 04:10:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2231-분해합&quot;&gt;&lt;a href=&quot;#2231-분해합&quot; class=&quot;headerlink&quot; title=&quot;#2231. 분해합&quot;&gt;&lt;/a&gt;#2231. 분해합&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2231-분해합"><a href="#2231-분해합" class="headerlink" title="#2231. 분해합"></a>#2231. 분해합</h1><p><a href="https://www.acmicpc.net/problem/2231" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합</li><li>245의 분해합 : 245+2+4+5 = 256<br>245는 256의 생성자</li><li>생성자는 없을 수도 여러 개일 수도 있음<ul><li>없다면 0 출력</li></ul></li></ul><p><strong>Goal: N이 주어졌을 때 N의 가장 작은 생성자 출력</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>1부터 최대 N-1까지 분해합을 구하면서 풀어보면 어떻게 될까?</li><li>1부터 분해합을 구하다가 N이 되었을 때 종료하면 가장 작은 생성자를 출력할 수 있다.</li><li>분해합 구하기<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">212</span>의 분해합 구하기</span><br><span class="line"><span class="number">212</span>  자릿수 <span class="number">3</span></span><br><span class="line"><span class="comment">// #1.</span></span><br><span class="line"><span class="number">212</span> / <span class="number">10</span>^<span class="number">2</span> = <span class="number">2</span> -&gt; <span class="number">212</span>+<span class="number">2</span></span><br><span class="line"><span class="number">212</span> - <span class="number">2</span>*<span class="number">10</span>^<span class="number">2</span> = <span class="number">12</span></span><br><span class="line"><span class="comment">// #2.</span></span><br><span class="line"><span class="number">12</span> / <span class="number">10</span>^<span class="number">1</span> = <span class="number">1</span> -&gt; <span class="number">212</span>+<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="number">12</span> - <span class="number">1</span>*<span class="number">10</span>^<span class="number">1</span> = <span class="number">2</span> -&gt; <span class="number">212</span>+<span class="number">2</span>+<span class="number">1</span>+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">11</span>의 분해합 구하기</span><br><span class="line"><span class="number">11</span> 자릿수 <span class="number">2</span></span><br><span class="line">div = <span class="number">10</span> (<span class="number">10</span>의 제곱 수)</span><br><span class="line">sum = <span class="number">11</span> (분해합)</span><br><span class="line"><span class="comment">// #1.</span></span><br><span class="line">temp = <span class="number">11</span> / <span class="number">10</span> = <span class="number">1</span> (계산 용도)</span><br><span class="line">num = <span class="number">11</span> - <span class="number">10</span> = <span class="number">1</span></span><br><span class="line">sum = <span class="number">11</span> + <span class="number">1</span> = <span class="number">12</span></span><br><span class="line">div = <span class="number">1</span></span><br><span class="line"><span class="comment">// #2.</span></span><br><span class="line">temp = <span class="number">1</span> / <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">num = <span class="number">1</span> - <span class="number">1</span> = <span class="number">0</span></span><br><span class="line">sum = <span class="number">12</span> + <span class="number">1</span> = <span class="number">13</span></span><br><span class="line">div = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">그냥 더 간단한 방법이 생각났다. (<span class="number">2</span> Try 참고)</span><br><span class="line">sum, temp = <span class="number">11</span></span><br><span class="line">sum = <span class="number">11</span> + <span class="number">11</span> % <span class="number">10</span></span><br><span class="line">temp = <span class="number">11</span> / <span class="number">10</span> = <span class="number">1</span></span><br><span class="line">sum = <span class="number">12</span> + <span class="number">1</span> % <span class="number">10</span> = <span class="number">13</span></span><br><span class="line">즉, </span><br><span class="line">sum += temp % <span class="number">10</span></span><br><span class="line">temp /= <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 자릿 수 체크</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;<span class="keyword">while</span>(num/=<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 분해합 게산 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">distributeSum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = getLength(num);</span><br><span class="line"><span class="keyword">int</span> div = <span class="built_in">pow</span>(<span class="number">10</span>, length<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> sum = num; <span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">temp = num / div; </span><br><span class="line">num = num - temp * div; </span><br><span class="line">sum += temp; </span><br><span class="line">div /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(n == distributeSum(i)) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == n) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>108ms</p><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">distributeSum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum, temp;</span><br><span class="line">sum = temp = num;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sum += temp % <span class="number">10</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(temp /= <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(n == distributeSum(i)) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == n) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8ms</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2231/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2206번 벽 부수고 이동하기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2206/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2206/</guid>
      <pubDate>Sat, 25 Jan 2020 04:10:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2206-벽-부수고-이동하기&quot;&gt;&lt;a href=&quot;#2206-벽-부수고-이동하기&quot; class=&quot;headerlink&quot; title=&quot;#2206. 벽 부수고 이동하기&quot;&gt;&lt;/a&gt;#2206. 벽 부수고 이동하기&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2206-벽-부수고-이동하기"><a href="#2206-벽-부수고-이동하기" class="headerlink" title="#2206. 벽 부수고 이동하기"></a>#2206. 벽 부수고 이동하기</h1><p><a href="https://www.acmicpc.net/problem/2206" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x M 크기의 맵</li><li>0은 이동가능 1은 벽을 나타냄</li><li>(0, 0) → (N-1, M-1)까지 이동 (상하좌우)</li><li>벽을 1개까지 부수고 이동 가능</li></ul><p><strong>Goal: (0, 0)에서 (N-1, M-1)까지 이동하는데 걸리는 경로 중 최단 경로 구하기</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>이동하기</li></ul><p>시작지점(0, 0)에서부터 상하좌우로 갈 수 있는 방향을 탐색한다.<br>도착지점까지 모든 곳을 탐색해야 하며, 이때 BFS를 사용한다.<br>현재 지점에서 상하좌우로 가는데 걸리는 비용이 동일하기 때문이다.</p><ul><li>벽을 부수었는지 여부를 경로를 갱신할 때마다 가지고 있어야 한다.</li></ul><p>탐색할 때 이미 값이 있다면 이미 지나온 경로이므로 다른 지점을 탐색해야 한다. 그외는 다음을 확인하고 경로를 갱신한다.</p><ol><li>탐색할 지점이 0이라면 경로 갱신</li><li>탐색할 지점이 1인데 이전까지 벽을 부수지 않았다면 경로 갱신</li></ol><p>위와 같은 작업으로 문제를 해결할 수 있다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> path[MAX][MAX][<span class="number">2</span>]; <span class="comment">// 벽을 안부순 경로, 벽을 부순 경로</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line"><span class="keyword">bool</span> break_wall = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;INFO&gt; q;</span><br><span class="line">q.push(&#123; <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span> &#125;);</span><br><span class="line">path[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r; <span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">bool</span> bw = q.front().break_wall;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (r == n - <span class="number">1</span> &amp;&amp; c == m - <span class="number">1</span>) <span class="keyword">return</span> path[r][c][bw];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) &#123;</span><br><span class="line"><span class="keyword">if</span> (path[x][y][bw]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">path[x][y][bw] = path[r][c][bw] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; x, y, bw &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[x][y] == <span class="number">1</span> &amp;&amp; bw == <span class="number">0</span>) &#123;</span><br><span class="line">path[x][y][<span class="number">1</span>] = path[r][c][bw] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; x, y, <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bfs());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2206/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2146번 다리 만들기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2146/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2146/</guid>
      <pubDate>Sat, 25 Jan 2020 04:10:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;2146-다리-만들기&quot;&gt;&lt;a href=&quot;#2146-다리-만들기&quot; class=&quot;headerlink&quot; title=&quot;2146. 다리 만들기&quot;&gt;&lt;/a&gt;2146. 다리 만들기&lt;/h2&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="2146-다리-만들기"><a href="#2146-다리-만들기" class="headerlink" title="2146. 다리 만들기"></a>2146. 다리 만들기</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/2146" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li><p>각 섬의 id를 매긴다. → DFS 이용</p></li><li><p>가장 짧은 다리의 길이를 구한다. → BFS 이용</p></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> N, ans =<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">visited[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[x][y] = idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; N &amp;&amp; d_y &lt; N) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">0</span> || visited[d_x][d_y]) <span class="keyword">continue</span>;</span><br><span class="line">DFS(d_x, d_y, idx);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(visited, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line"><span class="keyword">int</span> temp = <span class="built_in">map</span>[x][y];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">int</span> len = q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">while</span>(len--) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; N &amp;&amp; d_y &lt; N) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] != <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[d_x][d_y] != temp) <span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">0</span> &amp;&amp; !visited[d_x][d_y]) &#123;</span><br><span class="line">visited[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N; <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 각 섬에 번호 매기기</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (visited[i][j] || <span class="built_in">map</span>[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">DFS(i, j, idx++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 가장 짧은 다리 길이 구하기</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, BFS(i, j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2146/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 1938번 통나무 옮기기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1938/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1938/</guid>
      <pubDate>Sat, 25 Jan 2020 04:09:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1938-통나무-옮기기&quot;&gt;&lt;a href=&quot;#1938-통나무-옮기기&quot; class=&quot;headerlink&quot; title=&quot;#1938. 통나무 옮기기&quot;&gt;&lt;/a&gt;#1938. 통나무 옮기기&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="1938-통나무-옮기기"><a href="#1938-통나무-옮기기" class="headerlink" title="#1938. 통나무 옮기기"></a>#1938. 통나무 옮기기</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/1938" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>통나무 중점 좌표를 토대로 BFS 탐색을 하였다.<br>중심을 기준으로 그대로(회전), 상, 하, 좌, 우로 이동하면 각각 작동횟수 + 1이기에<br>BFS로 탐색하는게 최적이다.<br>중복 탐색을 막기 위해 3차원 방문 배열을 두어 중점 좌표의 각 모양(타입)에 따라 표시를 하였다.</li><li>중점 좌표로 이동하다보니 이동 후 다음을 꼭 확인해야 한다.<ol><li>평지 범위를 벗어나지 않는지<br>세 좌표 모두 범위를 벗어나지 않도록 확인해야한다.</li><li>방문한 지점인지</li><li>움직일 수 있는지<br>상하좌우 → 움직인 세 좌표에 ‘1’이 없는지 확인<br>회전 → 움직인 중점좌표 기준으로 3x3dp ‘1’이 없는지 확인</li></ol></li><li>도착 지점에 도착하면 종료</li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">char</span> land[MAX + <span class="number">1</span>][MAX + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[MAX + <span class="number">1</span>][MAX + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; start_point;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; end_point;</span><br><span class="line"><span class="keyword">int</span> dr[<span class="number">5</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dc[<span class="number">5</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Log</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> type; <span class="comment">// 0 : 가로, 1 : 세로</span></span><br><span class="line"><span class="keyword">int</span> r, c; <span class="comment">// 중점 좌표</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isIn</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; <span class="comment">// 통나무가 평지 범위인지</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c--;</span><br><span class="line"><span class="keyword">else</span> r--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0</span> || c &lt; <span class="number">0</span> || r &gt; N - <span class="number">1</span> || c &gt; N - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c++;</span><br><span class="line"><span class="keyword">else</span> r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEnd</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; <span class="comment">// EEE에 도착했는지</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c--;</span><br><span class="line"><span class="keyword">else</span> r--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end_point.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (end_point[i].first != r || end_point[i].second != c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c++;</span><br><span class="line"><span class="keyword">else</span> r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; <span class="comment">// 이동이 가능한지</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c--;</span><br><span class="line"><span class="keyword">else</span> r--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (land[r][c] == <span class="string">'1'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c++;</span><br><span class="line"><span class="keyword">else</span> r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckRotate</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; <span class="comment">// 회전이 가능한지</span></span><br><span class="line"><span class="keyword">int</span> sr = r - <span class="number">1</span>, sc = c - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = sr; i &lt; sr + <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = sc; j &lt; sc+ <span class="number">3</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] == <span class="string">'1'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;Log&gt; q;   </span><br><span class="line"><span class="keyword">int</span> type, r, c;</span><br><span class="line"><span class="keyword">if</span> (start_point[<span class="number">0</span>].first == start_point[<span class="number">1</span>].first) &#123;</span><br><span class="line">type = <span class="number">0</span>; r = start_point[<span class="number">0</span>].first; c = start_point[<span class="number">1</span>].second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">type = <span class="number">1</span>; c = start_point[<span class="number">0</span>].second; r = start_point[<span class="number">1</span>].first;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; type, r, c &#125;);</span><br><span class="line">visited[r][c][type] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">int</span> s = q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">while</span> (s--) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r, c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> type = q.front().type;</span><br><span class="line"><span class="keyword">if</span> (isEnd(r, c, type)) &#123;</span><br><span class="line">ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">5</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">0</span> || dir == <span class="number">1</span>) type = (type+<span class="number">1</span>) % <span class="number">2</span>; <span class="comment">// 회전 후 타입 원래대로</span></span><br><span class="line"><span class="keyword">int</span> nr = r + dr[dir];</span><br><span class="line"><span class="keyword">int</span> nc = c + dc[dir];</span><br><span class="line"><span class="keyword">if</span> (!isIn(nr, nc, type)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visited[nr][nc][type]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">0</span>) <span class="keyword">if</span> (!CheckRotate(nr, nc, type)) <span class="keyword">continue</span>; <span class="comment">// 3 x 3 확인 후 회전</span></span><br><span class="line"><span class="keyword">if</span> (Check(nr, nc, type)) &#123;</span><br><span class="line">visited[nr][nc][type] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; type, nr, nc &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; land[i][j];</span><br><span class="line"><span class="keyword">if</span> (land[i][j] == <span class="string">'B'</span>) start_point.push_back(&#123; i, j &#125;);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (land[i][j] == <span class="string">'E'</span>) end_point.push_back(&#123; i, j &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BFS();</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">1e9</span>) ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1938/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 1932번 정수 삼각형</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1932/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1932/</guid>
      <pubDate>Sat, 25 Jan 2020 04:09:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1932-정수-삼각형&quot;&gt;&lt;a href=&quot;#1932-정수-삼각형&quot; class=&quot;headerlink&quot; title=&quot;#1932. 정수 삼각형&quot;&gt;&lt;/a&gt;#1932. 정수 삼각형&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="1932-정수-삼각형"><a href="#1932-정수-삼각형" class="headerlink" title="#1932. 정수 삼각형"></a>#1932. 정수 삼각형</h1><p><a href="https://www.acmicpc.net/problem/1932" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>맨 위층부터 시작 → 맨 아래 층<br>선택된 수들을 합하면서 내려옴</li><li>현재 층에서 선택된 수의 대각선(왼 or 오)만 가능</li><li>condition<ul><li>층은 최대 500</li><li>수의 범위 0~9999</li></ul></li><li><strong>Goal : 합이 최대가 되는 수</strong></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>입력을 보면 알겠지만 자기 자신 바로 아래와 오른쪽만 가능<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; input</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br></pre></td></tr></table></figure></li><li>그냥 재귀함수를 쓰면 반복되는 호출이 많이 일어난다.<br>DP를 사용해야 함을 알 수 있다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; #0</span><br><span class="line">7</span><br><span class="line">&#x2F;&#x2F; #1</span><br><span class="line">7+3 &#x2F; 7+8</span><br><span class="line">&#x2F;&#x2F; #2</span><br><span class="line">7+3+8, 7+3+1 &#x2F; 7+8+1, 7+8+0</span><br><span class="line">&#x2F;&#x2F; #3</span><br><span class="line">7+3+8+2, 7+3+8+7 &#x2F; 7+3+1+7, 7+3+1+4 &#x2F; 7+8+1+7, 7+8+1+4 &#x2F; 7+8+0+4, 7+8+0 +4</span><br><span class="line">&#x2F;&#x2F; #4</span><br><span class="line">20+4, 20+5 &#x2F; 25+5, 25+2 &#x2F; 18+5, 18+2 &#x2F; 14+2, 14+6 &#x2F; 23+5, 23+2 &#x2F; ...</span><br></pre></td></tr></table></figure>경우의 수는 1→2→4→8→16으로 늘어난다.</li></ul><p>500일 때 최대 500^2 = 250000(25만)의 경우의 수가 나온다. 물론 재귀함수를 사용하면 이보다 더 많은 함수 호출이 일어나 시간초과가 발생할 것이다.</p><p>6개월 전에 풀었던 것을 다시 풀어보려니…생각이 안난다.</p><p>dp[a][b]</p><h3 id="1-Try-6개월-전-코드"><a href="#1-Try-6개월-전-코드" class="headerlink" title="1 Try (6개월 전 코드)"></a>1 Try (6개월 전 코드)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">d[<span class="number">0</span>][<span class="number">0</span>] = t[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; n; h++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (h == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">d[k][<span class="number">0</span>] = d[k - <span class="number">1</span>][<span class="number">0</span>] + t[k][<span class="number">0</span>]; <span class="comment">//바로 위의 최대경로만 가져올 수 있음.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k == h)</span><br><span class="line">&#123;</span><br><span class="line">d[k][h] = d[k - <span class="number">1</span>][h - <span class="number">1</span>] + t[k][h]; <span class="comment">// 바로 위 왼쪽의 최대경로만 가져올 수 있음.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">d[k][h] = <span class="built_in">max</span>(d[k - <span class="number">1</span>][h - <span class="number">1</span>], d[k - <span class="number">1</span>][h]) + t[k][h];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> max_cost = <span class="number">0</span>; <span class="comment">// 0보다 작을 수 없음.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; n; index++)</span><br><span class="line">&#123;</span><br><span class="line">max_cost = <span class="built_in">max</span>(d[n - <span class="number">1</span>][index], max_cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max_cost &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> max_sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n, input;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;n);</span><br><span class="line">   dp.resize(n);</span><br><span class="line">   <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tri(n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;input);</span><br><span class="line">         tri[i].push_back(input);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   dp[<span class="number">0</span>][<span class="number">0</span>] = tri[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">         dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; max_sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1932/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 1525번 퍼즐</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1525/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1525/</guid>
      <pubDate>Sat, 25 Jan 2020 04:04:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;1525-퍼즐&quot;&gt;&lt;a href=&quot;#1525-퍼즐&quot; class=&quot;headerlink&quot; title=&quot;1525. 퍼즐&quot;&gt;&lt;/a&gt;1525. 퍼즐&lt;/h2&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerli
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="1525-퍼즐"><a href="#1525-퍼즐" class="headerlink" title="1525. 퍼즐"></a>1525. 퍼즐</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/1525" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>상당히 어려운 문제다. (접근법을 알아둘 필요가 있다.)</li><li>접근법</li></ul><ol><li>2차원 배열을 1차원 배열로 생각하기</li><li>퍼즐에 적혀있는 숫자를 하나로 쭉 이어진 수로 생각한다.</li><li>이어진 수 하나가 경우의 수라고 생각한다. (문제 목표는 123456789인 수(경우)를 찾는 것)</li><li>map&lt;해당 경우(수), 이동 횟수&gt;를 사용하여 해당 경우에 도달하기까지 걸리는 이동 횟수를 저장한다.</li><li>9(0)이 있는 위치에서 시작하여 BFS 탐색을 하고 탐색 시에 swap을 해야 한다. (이동을 할 때 인덱스 계산에 주의한다.)</li><li>swap을 위해 string을 사용한다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ex) 현재 193425786 (0대신 9를 해야 각 자릿 수가 모두 채워진다. 0123...으로 하면 0이 사라짐)</span><br><span class="line">193425786 </span><br><span class="line">-&gt; 913425786 (왼쪽 이동)</span><br><span class="line">-&gt; 123495786 (아래쪽 이동)</span><br><span class="line">-&gt; 149425786 (오른쪽 이동)</span><br><span class="line"></span><br><span class="line">3 x 3 </span><br><span class="line">0 1 2</span><br><span class="line">3 4 5</span><br><span class="line">6 7 8</span><br><span class="line">행 &#x3D; 9번 위치(0~8 중) &#x2F; 3</span><br><span class="line">열 &#x3D; 9번 위치 % 3</span><br></pre></td></tr></table></figure></li></ol><ul><li>주의</li></ul><p>아래 코드에서 <code>dist.count(next_num) == 0</code> 대신 <code>dist[next_num] == 0</code> 을 하면 틀리다.<br>dist[해당 수]에는 이동 횟수가 들어있고 dist.count(해당 수)는 해당 경우의 수가 몇 번 나왔는지 알려주기 때문이다. map에서 해당 키, 값을 넣어주지 않았는데 바로 해당 키에 대한 값을 참조하려고(<code>dist[next_num] == 0</code>) 하면 제대로 연산이 수행되지 않을 것이다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">q.push(start);</span><br><span class="line">dist[start] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> now_num = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">string</span> now = to_string(now_num);</span><br><span class="line"><span class="keyword">int</span> zero = now.<span class="built_in">find</span>(<span class="string">'9'</span>); <span class="comment">// 0의 위치</span></span><br><span class="line"><span class="keyword">int</span> x = zero / <span class="number">3</span>; <span class="comment">// 행</span></span><br><span class="line"><span class="keyword">int</span> y = zero % <span class="number">3</span>; <span class="comment">// 열</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; <span class="number">3</span> &amp;&amp; d_y &lt; <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">string</span> next = now;</span><br><span class="line">swap(next[x * <span class="number">3</span> + y], next[d_x * <span class="number">3</span> + d_y]); <span class="comment">// 문자열 인덱스(2차원-&gt;1차원)</span></span><br><span class="line"><span class="keyword">int</span> next_num = stoi(next);</span><br><span class="line"><span class="keyword">if</span> (dist.count(next_num) == <span class="number">0</span>) &#123;</span><br><span class="line">q.push(next_num);</span><br><span class="line">dist[next_num] = dist[now_num] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> num; <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) num = <span class="number">9</span>;</span><br><span class="line">s += to_string(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> start = stoi(s);</span><br><span class="line">BFS(start);</span><br><span class="line"><span class="keyword">if</span> (dist.count(<span class="number">123456789</span>) == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; dist[<span class="number">123456789</span>] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1525/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 1261번 알고스팟</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1261/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1261/</guid>
      <pubDate>Sat, 25 Jan 2020 04:04:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;1261-알고스팟&quot;&gt;&lt;a href=&quot;#1261-알고스팟&quot; class=&quot;headerlink&quot; title=&quot;1261. 알고스팟&quot;&gt;&lt;/a&gt;1261. 알고스팟&lt;/h2&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="1261-알고스팟"><a href="#1261-알고스팟" class="headerlink" title="1261. 알고스팟"></a>1261. 알고스팟</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/1261" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>벽을 최소한으로 부수면서 목적지에 도착해야 한다.</li><li>벽을 부수지 않고 갈 경우 비용은 0</li><li>벽을 부수고 갈 경우 비용은 1</li><li>따라서 deque를 사용하여 BFS 탐색을 한다.</li></ul><ol><li>벽을 부수지 않는 경우 front에 넣는다.</li><li>벽을 부수는 경우 back에 넣는다.</li><li>front 부분을 탐색하고 pop한다.<br>그래야 벽을 최소한으로 부수면서 visit(방문) 표시가 가능하다.</li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span> ,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">deque</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push_front(&#123; <span class="number">0</span>, <span class="number">0</span> &#125;);</span><br><span class="line">visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">tie(x, y) = q.front();</span><br><span class="line">q.pop_front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x == N - <span class="number">1</span> &amp;&amp; d_y == M - <span class="number">1</span>) &#123;</span><br><span class="line">cnt[d_x][d_y] = cnt[x][y];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; M &amp;&amp; d_y &lt; N) &#123;</span><br><span class="line"><span class="keyword">if</span> (visit[d_x][d_y]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">1</span>) &#123;</span><br><span class="line">cnt[d_x][d_y] = cnt[x][y] + <span class="number">1</span>;</span><br><span class="line">q.push_back(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cnt[d_x][d_y] = cnt[x][y];</span><br><span class="line">q.push_front(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">visit[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">BFS();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt[M - <span class="number">1</span>][N - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1261/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jenkins, NAVER Cloud Platform, Docker로 CI/CD 무중단 배포 환경 구축하기 - 2편</title>
      <link>https://doyuni.github.io/2020/01/21/cicd-2/</link>
      <guid>https://doyuni.github.io/2020/01/21/cicd-2/</guid>
      <pubDate>Tue, 21 Jan 2020 13:06:11 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/doyuni/98f5ef10-2d1c-11ea-84cb-8b0917a6a741/Untitled.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;2편에서는 CD에서 무중단 배포까지 구
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://images.velog.io/post-images/doyuni/98f5ef10-2d1c-11ea-84cb-8b0917a6a741/Untitled.png" alt></p><p>2편에서는 CD에서 무중단 배포까지 구축한다.</p><p>(1편에서는 Github Push 후에 Jenkins가 자동으로 빌드되도록 설정하였다.)</p><h2 id="2-Jenkins로-Node-js기반-프로젝트-배포-설정하기"><a href="#2-Jenkins로-Node-js기반-프로젝트-배포-설정하기" class="headerlink" title="2. Jenkins로 Node.js기반 프로젝트 배포 설정하기"></a>2. Jenkins로 Node.js기반 프로젝트 배포 설정하기</h2><p>배포를 위해 scp를 사용하여 Jenkins에 있는 프로젝트 코드를 NAVER Cloud 서버에 복사해야 한다.<br>Node.js 기반의 프로젝트는 Tomcat과 같은 WAS(웹 서버+웹 컨테이너)가 존재하지 않아 ssh로 접속, scp로 파일을 주고 받는 작업으로 비교적 간단히 배포할 수 있다.</p><h3 id="2-1-NAVER-Cloud-서버에도-ssh-키를-생성한다"><a href="#2-1-NAVER-Cloud-서버에도-ssh-키를-생성한다" class="headerlink" title="2-1. NAVER Cloud 서버에도 ssh 키를 생성한다."></a>2-1. NAVER Cloud 서버에도 ssh 키를 생성한다.</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="https://images.velog.io/post-images/doyuni/6cc0b7a0-2d34-11ea-a34d-c14098e77eeb/Untitled-1.png" alt></p><p>키가 생성되면 <code>authorized_keys</code>, <code>id_rsa</code>, <code>id_rsa.pub</code>, <code>known_hosts</code> 가 생성되어 있는 것을 볼 수 있다.  </p><p>scp로 파일을 주고 받는다 하였는데 이때 복사 받을 서버의 접속 비밀번호를 알아야 한다. 그렇게되면 복사할 때마다 매번 비밀번호를 요구하여 자동화 배포는 불가능하게 된다.</p><p>이를 해결하기 위해 위의 4개의 키를 이용한다.<br>Jenkins에서는 NAVER Cloud 서버를 호스트로, NAVER Cloud 서버에서는 Jenkins 서버의 공개 키를  허가받은 키로 등록한다. 이러면 비밀번호를 요구하지 않고 자동화 배포가 가능하다. </p><h3 id="2-2-Jenkins-서버에서-NAVER-Cloud-서버를-known-hosts로-등록한다"><a href="#2-2-Jenkins-서버에서-NAVER-Cloud-서버를-known-hosts로-등록한다" class="headerlink" title="2-2. Jenkins 서버에서 NAVER Cloud 서버를 known_hosts로 등록한다."></a>2-2. Jenkins 서버에서 NAVER Cloud 서버를 known_hosts로 등록한다.</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan -H (NAVER CLOUD 서버)ip &gt;&gt; ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure><p><img src="https://images.velog.io/post-images/doyuni/79b11860-2d34-11ea-a02c-297b5af6b22c/Untitled-2.png" alt></p><h3 id="2-3-Jenkins에서-생성한-키-중에-공개-키-id-rsa-pub-를-NAVER-Cloud-서버에서-생성한-authorized-keys에-입력한다"><a href="#2-3-Jenkins에서-생성한-키-중에-공개-키-id-rsa-pub-를-NAVER-Cloud-서버에서-생성한-authorized-keys에-입력한다" class="headerlink" title="2-3. Jenkins에서 생성한 키 중에 공개 키(id_rsa.pub)를 NAVER Cloud 서버에서 생성한 authorized_keys에 입력한다."></a>2-3. Jenkins에서 생성한 키 중에 공개 키(id_rsa.pub)를 NAVER Cloud 서버에서 생성한 authorized_keys에 입력한다.</h3><ul><li>Jenkins 서버의 공개 키</li></ul><p><img src="https://images.velog.io/post-images/doyuni/c096a970-2d34-11ea-97b9-bbf00f61618c/Untitled-5.png" alt></p><ul><li><p>NAVER Cloud 서버의 authorized_keys</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p><img src="https://images.velog.io/post-images/doyuni/c5b145a0-2d34-11ea-9d93-3372486f5bba/Untitled-6.png" alt></p></li><li><p>scp로 테스트하기<br>접속 비밀번호를 요구하지 않았다면 성공이다.</p></li></ul><p><img src="https://images.velog.io/post-images/doyuni/cabaa3c0-2d34-11ea-a02c-297b5af6b22c/Untitled-7.png" alt></p><ol><li>Jenkins 서버에서 test.txt 파일을 생성한다.</li><li>Jenkins 서버에서 scp를 사용해 test.txt를 NAVER Cloud 서버의 /root/test 폴더에 복사한다.<br>비밀번호를 요구하지 않으면 성공.</li><li>NAVER Cloud 서버에서 복사된 파일을 확인한다.</li></ol><h2 id="3-NAVER-Cloud-서버에-Docker-NGINX-설정하기"><a href="#3-NAVER-Cloud-서버에-Docker-NGINX-설정하기" class="headerlink" title="3. NAVER Cloud 서버에 Docker, NGINX 설정하기"></a>3. NAVER Cloud 서버에 Docker, NGINX 설정하기</h2><p>이제 프로젝트가 배포되는 NAVER Cloud 서버에서 설정해야 할 부분이다.<br>(*Docker 및 NGINX 설치는 생략한다.)</p><h3 id="3-1-Dockerfile-작성"><a href="#3-1-Dockerfile-작성" class="headerlink" title="3-1. Dockerfile 작성."></a>3-1. Dockerfile 작성.</h3><p>ssh로 서버에 접속하고 Dockerfile을 다음과 같이 작성한다.</p><p><img src="https://images.velog.io/post-images/doyuni/cfb29cc0-2d34-11ea-bc31-b150e14926d1/Untitled-8.png" alt><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> 이미지 환경</span><br><span class="line">    </span><br><span class="line"><span class="keyword">MAINTAINER</span> 개발자</span><br><span class="line">    </span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> 호스트와 공유할 폴더</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /app</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./프로젝트 소스코드 폴더/ /app</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure></p><ul><li>FROM: Node 이미지(Node version 명시)</li><li>MAINTAINER: 개발자(팀명)</li><li>VOLUME: host와 컨테이너가 공유할 폴더 경로</li><li>RUN: 해당 명령어 실행( 위에선 app 폴더 생성 )</li><li>WORKDIR: 작업 디렉토리 설정(위에서 만든 app 폴더로 설정)</li><li>COPY: NAVER Cloud 서버에 있는 파일을 컨테이너 폴더에 복사<br>서버에 있는 파일은 Dockerfile이 존재하는 현재 경로 내에 존재하는 것만 가능하다.<br>(즉, 절대 경로는 Dockerfile이 있는 경로 이내가 아니라면 불가능)</li></ul><p>그 다음은 패키지 파일들을 설치하고 서버를 실행한다.</p><p><code>docker image build -t 도커이미지이름 .</code>를 입력하여 이미지를 빌드한다.</p><h3 id="3-2-Docker-compose-작성하기"><a href="#3-2-Docker-compose-작성하기" class="headerlink" title="3-2. Docker-compose 작성하기"></a>3-2. Docker-compose 작성하기</h3><p>docker-compose(컨테이너 관리)를 설치하여 편하게 컨테이너를 설정한다.<br>여기서 blue-green 배포 방식이 사용되는데, 이는 무중단 배포 구축을 위함이다.</p><ul><li>Dockerfile이 있는 곳에 docker-compose.blue.yml을 다음과 같이 작성한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/dcfed920-2d34-11ea-bcda-4526cedc7d87/Untitled-9.png" alt><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">linking-server:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">빌드한</span> <span class="string">도커</span> <span class="string">이미지</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./deploy:/deploy/linking</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"NAVER Cloud 서버 포트:컨테이너 포트"</span></span><br></pre></td></tr></table></figure></p><p>image: 아까 빌드한 이미지 이름을 작성한다.</p><p>volumes: host 폴더와 컨테이너 폴더를 설정하여 공유한다.(심볼릭 링크와 비슷한 개념이라고 한다.)</p><p>ports: host 포트와 컨테이너 포트 순으로 작성하여 포트 포워딩 설정을 한다.</p><ul><li>같은 곳에 docker-compose.green.yml을 다음과 같이 작성한다.<br>host 포트만 다르다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/e1c561e0-2d34-11ea-b2c6-296aa1e0beae/Untitled-10.png" alt></p><h3 id="3-3-deploy-script-작성하기"><a href="#3-3-deploy-script-작성하기" class="headerlink" title="3-3. deploy script 작성하기."></a>3-3. deploy script 작성하기.</h3><ul><li>같은 곳에 deploy.sh를 다음과 같이 작성한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/e67925f0-2d34-11ea-9d93-3372486f5bba/Untitled-11.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">    </span><br><span class="line">DOCKER_APP_NAME=linking-server</span><br><span class="line">    </span><br><span class="line">EXIST_BLUE=$(docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-blue -f docker-compose.blue.yml ps | grep Up)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$EXIST_BLUE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"blue up"</span></span><br><span class="line">    docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-blue -f docker-compose.blue.yml up -d</span><br><span class="line">    </span><br><span class="line">    sleep 10</span><br><span class="line">    </span><br><span class="line">    docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-green -f docker-compose.green.yml down</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"green up"</span></span><br><span class="line">    docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-green -f docker-compose.green.yml up -d</span><br><span class="line">    </span><br><span class="line">    sleep 10</span><br><span class="line">    </span><br><span class="line">    docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-blue -f docker-compose.blue.yml down</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>지금까지 잘 따라 했다면 아래와 비슷한 디렉토리 구조를 볼 수 있을 것이다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/eacb9020-2d34-11ea-a34d-c14098e77eeb/Untitled-12.png" alt></p><ul><li>컨테이너 생성하기</li></ul><p><code>docker-compose -p ${DOCKER_APP_NAME}-blue -f docker-compose.blue.yml up -d</code>를 입력하여 blue 컨테이너를 먼저 생성해준다.</p><p><code>docker ps -a</code>로 컨테이너가 잘 실행되고 있는지 확인할 수 있다.</p><h3 id="3-4-NGINX-설정하기"><a href="#3-4-NGINX-설정하기" class="headerlink" title="3-4. NGINX 설정하기."></a>3-4. NGINX 설정하기.</h3><p>다음은 NGINX로 blue, green의 로드밸런싱을 설정해 주어야 한다.</p><ul><li><code>vi /etc/nginx/sites-available/linking-server</code>를 입력하여 다음과 같이 작성한다.<br>linking-server는 필자가 정한 이름이다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/f086b210-2d34-11ea-b2c6-296aa1e0beae/Untitled-13.png" alt><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Balancing</span></span><br><span class="line"><span class="attribute">upstream</span> linking-server &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:1025</span> weight=<span class="number">5</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">10s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:1026</span> weight=<span class="number">10</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">10s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="attribute">server_name</span> NAVER Cloud 서버 아이피;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://linking-server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>그런 다음 아래 명령어로 이 파일을 /etc/nginx/sites-enabled 디렉터리에 링크해준다.</p><p><code>sudo ln -fs /etc/nginx/sites-available/linking-server /etc/nginx/sites-enabled/</code></p><p>마지막으로 <code>sudo nginx -t</code> 명령어로 문법 이상 유무를 확인하고 이상이 없을 경우, <code>systemctl stop nginx</code> 명령어로 NGINX를 종료한 후에 <code>systemctl start nginx</code> 로 다시 시작한다.</p><h3 id="3-5-NAVER-Cloud-Platform-ACG-설정하기"><a href="#3-5-NAVER-Cloud-Platform-ACG-설정하기" class="headerlink" title="3-5.  NAVER Cloud Platform ACG 설정하기."></a>3-5.  NAVER Cloud Platform ACG 설정하기.</h3><p>여기서 마지막으로 한 가지 해야할 것은 ACG 설정이다.</p><ul><li>ACG 설정하기</li></ul><p>NAVER Cloud Platform 콘솔에서 1024포트를 열어준다. 위에서 blue, green 모두 다른 포트지만 NGINX를 통해 1024 포트로 로드 밸런싱 되기에 사용자는 이를 통해 접근할 수 있다.<br>(보통 백엔드와 프론트엔드를 분리하면서 프로젝트를 진행하고 있다면 프론트엔드는 80포트를 사용하는게 좋다. 80이 기본 포트라 생략 가능하므로)</p><p><img src="https://images.velog.io/post-images/doyuni/f683e610-2d34-11ea-b061-5502f6853cc7/Untitled-14.png" alt></p><p>이것으로 NAVER Cloud 서버에서의 설정은 끝났다.</p><h2 id="4-마지막-작업"><a href="#4-마지막-작업" class="headerlink" title="4. 마지막 작업"></a>4. 마지막 작업</h2><p>이제 마지막 Jenkins에서 빌드할 때 설정을 해주어야 위에서 설정한 무중단 배포가 자동화된다.</p><ul><li>Jenkins 프로젝트 관리에서 “Execute managed script”를 클릭한다.<br>다만, 아직 작성한 스크립트가 없기에 Jenkins 관리 &gt; Managed files &gt; Add a new Config를 통해 스크립트를 작성한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/fb45daf0-2d34-11ea-9eb4-9374768f161b/Untitled-15.png" alt></p><ul><li>다음과 같이 작성한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/058e9b50-2d35-11ea-a39c-db4aee70d113/Untitled-16.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ssh -T root@서버 아이피 &lt;&lt;EOF</span><br><span class="line">    rm -rf /home/docker-image/deploy/*</span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">EOF</span><br><span class="line">    </span><br><span class="line">scp -r /var/lib/jenkins/<span class="built_in">jobs</span>/LinkingCI/workspace/* root@서버 아이피:/home/docker-image/deploy/    </span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ssh -T root@서버 아이피 &lt;&lt;EOF</span><br><span class="line">    <span class="built_in">cd</span> /home/docker-image</span><br><span class="line">    docker image build -t linking-server-docker-image .</span><br><span class="line">    ./deploy.sh</span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>1) Jenkins가 빌드 동안 해당 서버에 접속하여 원래 있던 애플리케이션 코드를 삭제한다.</p><p>2) 빌드된 파일을 해당 서버에 복사한다.</p><p>3) 해당 서버에 다시 접속하여 새로 복사된 파일을 토대로 도커 이미지를 빌드한다.</p><p>4) 배포 스크립트를 실행한다.</p><p>위와 같은 과정이 일어나고 지금까지 설정한 것들이 모두 자동화되어 무중단 배포까지 진행된다. 이를 이제 Jenkins 프로젝트 관리에서 실행하도록 한다.</p><p><img src="https://images.velog.io/post-images/doyuni/0a73a890-2d35-11ea-872e-cd8bbd00f6c5/Untitled-17.png" alt></p><h2 id="5-빌드-상태-표시-Slack-알림"><a href="#5-빌드-상태-표시-Slack-알림" class="headerlink" title="5. 빌드 상태 표시, Slack 알림"></a>5. 빌드 상태 표시, Slack 알림</h2><p>추가로 프로젝트에서 보이는 Embeddable Build Status를 클릭하면 마크다운 형식으로 Github 레포지토리에 빌드 상태바를 보이게 할 수 있다.</p><p><img src="https://images.velog.io/post-images/doyuni/0ef9f400-2d35-11ea-8dcc-172ed0ac5b8f/Untitled-18.png" alt></p><p>마지막으로 팀원들이 빌드 상태(시작, 실패, 성공)을 알고 싶을 때 Slack을 통해 알림을 받도록 할 수도 있다.<br>1편에서 이미 관련 플러그인을 설치하였기에 바로 설정이 가능하다.</p><ul><li>Slack에 채널을 만들었다면 Apps에서 Jenkins를 검색 후 클릭한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/16b2bab0-2d35-11ea-b2c6-296aa1e0beae/Untitled-19.png" alt></p><ul><li>알림을 받을 채널을 설정하면 Jenkins에서 어떻게 설정해야 하는지 친절하게 나온다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/1be01b90-2d35-11ea-b2c6-296aa1e0beae/Untitled-20.png" alt></p><p>설정을 하고 나면 Jenkins 프로젝트에서 빌드 후 조치에 알림 받을 내역을 설정할 수가 있게 된다.</p><p><img src="https://images.velog.io/post-images/doyuni/203bfba0-2d35-11ea-b2c6-296aa1e0beae/Untitled-21.png" alt></p><ul><li>빌드 시작부터 끝까지 알림이 날라온다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/24bec4a0-2d35-11ea-9d93-3372486f5bba/Untitled-22.png" alt></p><p>이것으로 CI/CD 무중단 배포 환경 구축을 마친다.</p><h3 id="끝"><a href="#끝" class="headerlink" title="-끝-"></a>-끝-</h3>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/21/cicd-2/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
