<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JUST WRITE IT.</title>
    <link>https://doyuni.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 25 Jan 2020 13:35:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>백준 17472번 다리 만들기 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17472/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17472/</guid>
      <pubDate>Sat, 25 Jan 2020 08:05:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17472-다리-만들기-2&quot;&gt;&lt;a href=&quot;#17472-다리-만들기-2&quot; class=&quot;headerlink&quot; title=&quot;#17472. 다리 만들기 2&quot;&gt;&lt;/a&gt;#17472. 다리 만들기 2&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17472-다리-만들기-2"><a href="#17472-다리-만들기-2" class="headerlink" title="#17472. 다리 만들기 2"></a>#17472. 다리 만들기 2</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17472" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>각 섬에 고유 번호 붙이기(오름차순)<br>섬끼리 연결을 해야하기 때문에 이를 식별해주어야 한다.<br>BFS or DFS를 이용하여 구할 수 있고 필자는 BFS를 사용하였다.</li><li>각 섬들마다 연결시키는 모든 경우를 구하되, 각 경우마다 연결이 가능한지 거리를 측정하면서 확인한다.<br>→ 연결이 가능하면 해당 다리를 저장한다.(어디에서 어디로 연결되고 그럴 때 최소 비용 저장)</li><li>다리를 선택해서 1개 이상 선택했을 때부터 모든 섬을 연결 시킬 수 있는지 확인한다.<br>→ 모든 섬을 연결할 수 있으면 최소비용 갱신</li></ol><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><ul><li><p>완탐 코드 보기</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, total_island, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">10</span>][<span class="number">10</span>]; <span class="comment">// 섬에 번호 붙일 때 방문 체크 용도</span></span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">7</span>][<span class="number">7</span>]; <span class="comment">// dist[a][b]: a에서 b로 가는 경로 비용, 기본값 1000</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Island_pos[<span class="number">11</span>]; <span class="comment">// Island_pos[i]: i번 섬의 모든 좌표</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;&gt; bridge_list; <span class="comment">// a, b, c : a-&gt;b의 비용이 c인 다리 목록</span></span><br><span class="line"><span class="keyword">bool</span> connect[<span class="number">7</span>][<span class="number">7</span>]; <span class="comment">// a, b와의 연결 상태 확인 용도</span></span><br><span class="line"><span class="keyword">bool</span> connect_island[<span class="number">7</span>]; <span class="comment">// i번 섬의 방문 체크 용도</span></span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">7</span> * <span class="number">7</span>]; <span class="comment">// 간선의 모든 경우를 담기 위함( N(N-1)/2 )</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> id)</span> </span>&#123; <span class="comment">// 섬에 번호 붙이기</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">visited[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[x][y] = id;</span><br><span class="line">Island_pos[id].push_back(&#123; x, y &#125;);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; N &amp;&amp; d_y &lt; M) &#123;</span><br><span class="line"><span class="keyword">if</span> (visited[d_x][d_y] || <span class="built_in">map</span>[d_x][d_y] != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">visited[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[d_x][d_y] = id;</span><br><span class="line">Island_pos[id].push_back(&#123; d_x, d_y &#125;);</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Go</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dir, <span class="keyword">int</span> len, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123; <span class="comment">// 거리 측정하기</span></span><br><span class="line"><span class="keyword">int</span> nx = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= N || ny &gt;= M) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == end) &#123;</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123; <span class="comment">// 거리 2이상인 경우만 연결 가능</span></span><br><span class="line"><span class="keyword">if</span> (dist[start][end] &gt; len) &#123; <span class="comment">// 최소 거리 갱신</span></span><br><span class="line">dist[start][end] = len;</span><br><span class="line">dist[end][start] = len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == <span class="number">0</span>) Go(nx, ny, dir, len + <span class="number">1</span>, start, end);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeBridge</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Start에 해당되는 섬의 모든 좌표를 end에 해당되는 섬까지 도달해본다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Island_pos[start].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = Island_pos[start][i].first;</span><br><span class="line"><span class="keyword">int</span> y = Island_pos[start][i].second;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &gt; <span class="number">-1</span> &amp;&amp; ny &gt; <span class="number">-1</span> &amp;&amp; nx &lt; N &amp;&amp; ny &lt; M) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == <span class="number">0</span>) Go(nx, ny, dir, <span class="number">1</span>, start, end); <span class="comment">// 한 방향으로 가야함, 0인 지점 방문이니 거리 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetDistance</span><span class="params">()</span> </span>&#123; <span class="comment">// 섬들끼리 1:1로 연결시키는 모든 경우</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; total_island; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; total_island; j++)</span><br><span class="line">&#123;</span><br><span class="line">MakeBridge(i, j);</span><br><span class="line"><span class="keyword">if</span> (dist[i][j] == <span class="number">1000</span>) <span class="keyword">continue</span>; <span class="comment">// 연결 불가능한 경우</span></span><br><span class="line">bridge_list.push_back(&#123; &#123;i, j&#125;, dist[i][j] &#125;); <span class="comment">// (i -&gt; j : 비용) 저장</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckConnect</span><span class="params">()</span> </span>&#123; <span class="comment">// 조건에 맞게 모든 섬이 연결되어있는지 확인</span></span><br><span class="line"><span class="built_in">memset</span>(connect, <span class="literal">false</span>, <span class="keyword">sizeof</span>(connect));</span><br><span class="line"><span class="built_in">memset</span>(connect_island, <span class="literal">false</span>, <span class="keyword">sizeof</span>(connect_island));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bridge_list.size(); i++) <span class="comment">// 선택한 다리 연결 표시</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) &#123; <span class="comment">// 연결 표시 (x-&gt;y, y-&gt;x)</span></span><br><span class="line"><span class="keyword">int</span> x = bridge_list[i].first.first;</span><br><span class="line"><span class="keyword">int</span> y = bridge_list[i].first.second;</span><br><span class="line">connect[x][y] = connect[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </span><br><span class="line">q.push(<span class="number">1</span>); <span class="comment">// 1번 섬(섬은 최소 2개)</span></span><br><span class="line">connect_island[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 1번 섬 방문 체크 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Island_cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 모든 섬 방문가능한지 체크하는 부분</span></span><br><span class="line"><span class="keyword">int</span> cur = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (Island_cnt == total_island - <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; total_island; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur == i) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (connect[cur][i] &amp;&amp; connect_island[i] == <span class="literal">false</span>) &#123; <span class="comment">// 현재 섬과 i번 섬이 연결되어있고 i번 섬을 방문하지 않았을 때</span></span><br><span class="line">connect_island[i] = <span class="literal">true</span>;</span><br><span class="line">q.push(i);</span><br><span class="line">Island_cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectBridge</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt, <span class="keyword">int</span> sum)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (CheckConnect() == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; sum) ans = sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; bridge_list.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] == <span class="literal">true</span>) <span class="keyword">continue</span>;</span><br><span class="line">selected[i] = <span class="literal">true</span>;</span><br><span class="line">SelectBridge(i, cnt + <span class="number">1</span>, sum + bridge_list[i].second);</span><br><span class="line">selected[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">dist[i][j] = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="number">0</span> &amp;&amp; !visited[i][j]) BFS(i, j, id++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">total_island = id;</span><br><span class="line">GetDistance();</span><br><span class="line">SelectBridge(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">1e9</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3></li><li><p>위 방식에서 1, 2까지는 동일</p></li><li>크루스칼 알고리즘을 사용한다.</li></ul><h3 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer"></a>Answer</h3><ul><li>코드 보기<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; d;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bridge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> from;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> N, M, total, ans = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> parent[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;d&gt; island[<span class="number">7</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;Bridge&gt; bridge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Go</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; island[from].size(); i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x = island[from][i].first;</span><br><span class="line"><span class="keyword">int</span> y = island[from][i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x; <span class="keyword">int</span> ny = y;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (len &lt;= cur) <span class="keyword">break</span>;</span><br><span class="line">nx += dx[dir];</span><br><span class="line">ny += dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= N || ny &gt;= M) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">cur++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == to) &#123;</span><br><span class="line"><span class="keyword">if</span> (cur &lt; <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (len &gt; cur) len = cur;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetDistance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Bridge b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= total; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= total; ++j) &#123;</span><br><span class="line">b.from = i; b.to = j;</span><br><span class="line">b.len = Go(i, j);</span><br><span class="line"><span class="keyword">if</span> (b.len == <span class="number">10000</span>) <span class="keyword">continue</span>;</span><br><span class="line">bridge.push_back(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;d&gt; q;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">visited[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] = id;</span><br><span class="line">island[id].push_back(&#123; r, c &#125;);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= N || ny &gt;= M) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] != <span class="number">1</span> || visited[nx][ny]) <span class="keyword">continue</span>;</span><br><span class="line">visited[nx][ny] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[nx][ny] = id;</span><br><span class="line">island[id].push_back(&#123; nx, ny &#125;);</span><br><span class="line">q.push(&#123; nx, ny &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span> || visited[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">BFS(i, j, id++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">total = id - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= total; ++i) &#123;</span><br><span class="line">parent[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(Bridge a, Bridge b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.len &lt; b.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindParent</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (parent[idx] == idx) <span class="keyword">return</span> idx;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> FindParent(parent[idx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p1 = FindParent(parent[from]);</span><br><span class="line"><span class="keyword">int</span> p2 = FindParent(parent[to]);</span><br><span class="line"><span class="keyword">if</span> (p1 &lt; p2) &#123;</span><br><span class="line">parent[to] = p1;</span><br><span class="line">parent[p2] = p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">parent[from] = p2;</span><br><span class="line">parent[p1] = p2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= total; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (FindParent(parent[i]) != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sort(bridge.begin(), bridge.end(), cmp);</span><br><span class="line"><span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bridge.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> from = bridge[i].from; <span class="keyword">int</span> to = bridge[i].to;</span><br><span class="line"><span class="keyword">if</span>(FindParent(from) == FindParent(to)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Union(from, to);</span><br><span class="line">cost += bridge[i].len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (CheckConnection()) ans = cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MakeLabel();</span><br><span class="line">GetDistance();</span><br><span class="line">Kruskal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">10000</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17472/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17471번 게리맨더링</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17471/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17471/</guid>
      <pubDate>Sat, 25 Jan 2020 08:05:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17471-게리맨더링&quot;&gt;&lt;a href=&quot;#17471-게리맨더링&quot; class=&quot;headerlink&quot; title=&quot;#17471. 게리맨더링&quot;&gt;&lt;/a&gt;#17471. 게리맨더링&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Proble
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17471-게리맨더링"><a href="#17471-게리맨더링" class="headerlink" title="#17471. 게리맨더링"></a>#17471. 게리맨더링</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17471" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>city[n][j] = n번째 구역과 인접한구역 j는 1로 표시, 아니면 0으로 표시</li></ul><ol><li>한 지역의 구역을 정한다. (중복x, 오름차순으로) - (1,2,3) 과 (2,1,3)은 같은 조합이기에</li><li><p>정한 구역이 이어져 있는지 DFS를 통해 확인한다.</p><ol><li>방문표시</li><li><p>전체 구역 탐색하여 해당 지역에 속하고 인접할 때, 해당 구역 탐색</p><p>DFS 시작 지점은 해당 지역에서 한 구역으로 지정한다. (그래야 모두 인접해있는지 확인 가능)</p><p>2개의 지역 모두 DFS 탐색 후에 check 표시가 모두 되어있지 않으면 <code>return</code>한다. </p><p>규칙에 맞게 구역이 나누어져 있지 않다는 뜻이기 때문이다.</p></li></ol></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> people[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> city[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getDifference</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a_sum = <span class="number">0</span>, b_sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) a_sum += people[i];</span><br><span class="line"><span class="keyword">else</span> b_sum += people[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="built_in">abs</span>(a_sum - b_sum);</span><br><span class="line"><span class="keyword">if</span> (res &lt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">check[n] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (status == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] &amp;&amp; city[n][i]) &#123;</span><br><span class="line">check[i] = <span class="literal">true</span>;</span><br><span class="line">DFS(i, status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!selected[i] &amp;&amp; city[n][i]) &#123;</span><br><span class="line">check[i] = <span class="literal">true</span>;</span><br><span class="line">DFS(i, status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) &#123;</span><br><span class="line">DFS(i, <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!selected[i]) &#123;</span><br><span class="line">DFS(i, <span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[i]) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">getDifference();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectArea</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= N) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">Solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) <span class="keyword">continue</span>;</span><br><span class="line">selected[i] = <span class="literal">true</span>;</span><br><span class="line">SelectArea(i, cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; people[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt; <span class="built_in">cin</span> &gt;&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">city[i][n] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectArea(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">1e9</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17471/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17406번 배열 돌리기 4</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17406/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17406/</guid>
      <pubDate>Sat, 25 Jan 2020 08:05:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17406-배열-돌리기-4&quot;&gt;&lt;a href=&quot;#17406-배열-돌리기-4&quot; class=&quot;headerlink&quot; title=&quot;#17406. 배열 돌리기 4&quot;&gt;&lt;/a&gt;#17406. 배열 돌리기 4&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17406-배열-돌리기-4"><a href="#17406-배열-돌리기-4" class="headerlink" title="#17406. 배열 돌리기 4"></a>#17406. 배열 돌리기 4</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17406" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>회전 연산 순서를 정한다. (0, 1, 2) 와 (1, 0, 2)는 다른 순서이다!</li><li>가장 바깥쪽 부터 시계방향으로 각 원소들을 회전시킨다.<br>가장 바깥쪽 크기는 <strong>2*s+1</strong>이다.</li><li>시작 지점부터 시작해서 +1씩, 크기는 -2씩 변경하며 회전시킨다.</li><li>중앙 지점으 만나면 더이상 회전시킬 수 없으므로 종료한다.</li><li>회전은 아래와 같은 방법으로 진행한다.</li><li><strong><a href="https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17144/">“미세먼지 안녕!”</a></strong> 문제에서 설명한 배열 회전 방법과 동일하다.<br>여기선 시계방향이므로 2번째 그림이 이에 해당한다.</li></ul><p><img src="https://user-images.githubusercontent.com/46062199/73121950-14990780-3fc2-11ea-9391-c99ce7698c5c.png" alt></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> copy_arr[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> order[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">6</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Inst</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, s;</span><br><span class="line">&#125;ins[<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CopyArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line">copy_arr[i][j] = arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line">sum += copy_arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt; sum) res = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CopyArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> len = ins[order[i]].s * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">// 가장 바깥쪽 크기</span></span><br><span class="line"><span class="keyword">int</span> mid_r = ins[order[i]].r; <span class="comment">// 중심 좌표</span></span><br><span class="line"><span class="keyword">int</span> mid_c = ins[order[i]].c;</span><br><span class="line"><span class="keyword">int</span> start_r = ins[order[i]].r - ins[order[i]].s; <span class="comment">// 시작 좌표</span></span><br><span class="line"><span class="keyword">int</span> start_c = ins[order[i]].c - ins[order[i]].s;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mid_r == start_r &amp;&amp; mid_c == start_c) <span class="keyword">break</span>; <span class="comment">// 중심점이면 종료</span></span><br><span class="line"><span class="keyword">int</span> temp = copy_arr[start_r][start_c]; <span class="comment">// 시작지점 값만 빼놓기</span></span><br><span class="line"><span class="keyword">int</span> end_r = start_r + len - <span class="number">1</span>; <span class="comment">// 끝 행</span></span><br><span class="line"><span class="keyword">int</span> end_c = start_c + len - <span class="number">1</span>; <span class="comment">// 끝 열</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = start_r; r &lt; start_r + len - <span class="number">1</span>; ++r) &#123; <span class="comment">// (1)</span></span><br><span class="line">copy_arr[r][start_c] = copy_arr[r + <span class="number">1</span>][start_c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = start_c; c &lt; start_c + len - <span class="number">1</span>; ++c) &#123; <span class="comment">// (2)</span></span><br><span class="line">copy_arr[end_r][c] = copy_arr[end_r][c + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = end_r; r &gt; start_r; --r) &#123; <span class="comment">// (3)</span></span><br><span class="line">copy_arr[r][end_c] = copy_arr[r - <span class="number">1</span>][end_c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = end_c; c &gt; start_c + <span class="number">1</span>; --c) &#123; <span class="comment">// (4)</span></span><br><span class="line">copy_arr[start_r][c] = copy_arr[start_r][c - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">copy_arr[start_r][start_c + <span class="number">1</span>] = temp; <span class="comment">// 빼놓은 값 넣기</span></span><br><span class="line">start_r++; start_c++; len -= <span class="number">2</span>; <span class="comment">// 시작지점 및 길이 갱신</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = getSum();</span><br><span class="line"><span class="keyword">if</span> (ans &gt; res) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectOrder</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == K) &#123;</span><br><span class="line">Rotate();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) <span class="keyword">continue</span>;</span><br><span class="line">order[cnt] = i;</span><br><span class="line">selected[i] = <span class="literal">true</span>;</span><br><span class="line">SelectOrder(cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c, s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; s;</span><br><span class="line">ins[i] = &#123; r<span class="number">-1</span>, c<span class="number">-1</span>, s &#125;;</span><br><span class="line">&#125;</span><br><span class="line">SelectOrder(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17406/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17298번 오큰수</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17298/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17298/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:55 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17298-오큰수&quot;&gt;&lt;a href=&quot;#17298-오큰수&quot; class=&quot;headerlink&quot; title=&quot;#17298. 오큰수&quot;&gt;&lt;/a&gt;#17298. 오큰수&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17298-오큰수"><a href="#17298-오큰수" class="headerlink" title="#17298. 오큰수"></a>#17298. 오큰수</h1><p><a href="https://www.acmicpc.net/problem/17298" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>길이가 N인 수열</li></ul><p><strong>Goal: 각 원소에 대해 자신보다 오른쪽에 있으면서 크고 가장 왼쪽에 위치한 수를 구하여라<br>없다면 -1 출력</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><code>Stack</code>을 사용한다.</li><li>단계는 문제에 예시로 있는 입력 값으로 설명을 하겠다.</li></ul><p><img src="https://user-images.githubusercontent.com/46062199/73121964-5d50c080-3fc2-11ea-91f9-8600e7cb92e5.png" alt="Untitled"></p><p>오른쪽 순서로 단계가 진행된다.</p><ol><li>원소의 최댓값은 최대 1000000(백만)이기에 +1값을 MAX로 주었다.</li><li>수열의 맨 오른쪽부터 진행한다.</li></ol><ul><li>사이클<ol><li>비교 대상인 입력값과 스텍에 있는 값을 비교하여 스텍에 있는 값이 클 때까지 작업(비교)을 수행한다.</li><li>만약 MAX가 스텍의 top이라면 이미 자신보다 큰 수가 없다는 뜻이기에 -1를 출력값에 넣어준다.</li><li>그게 아니라면 스텍의 top은 항상 현재 입력값보다 크면서 가장 오른쪽에 있는 수이다. 그렇기에 top을 출력값에 넣어준다.</li></ol></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; a, ans, num;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, input;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">num.push(input);</span><br><span class="line">&#125;</span><br><span class="line">a.push(MAX);</span><br><span class="line"><span class="keyword">while</span>(!num.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span>(a.top() &lt;= num.top()) a.pop(); <span class="comment">// 같을 때도 pop을 해주어야 다음 큰 값을 비교가능</span></span><br><span class="line"><span class="keyword">if</span>(a.top() == MAX) ans.push(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span> ans.push(a.top());</span><br><span class="line">a.push(num.top()); num.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!ans.empty()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, ans.top());</span><br><span class="line">ans.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17298/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17281번 ⚾(야구공)</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17281/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17281/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17281-⚾&quot;&gt;&lt;a href=&quot;#17281-⚾&quot; class=&quot;headerlink&quot; title=&quot;#17281. ⚾&quot;&gt;&lt;/a&gt;#17281. ⚾&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;header
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17281-⚾"><a href="#17281-⚾" class="headerlink" title="#17281. ⚾"></a>#17281. ⚾</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17281" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>시뮬레이션 문제이다. 문제의 설명에 맞게 잘 구현하면 큰 어려움은 없는 문제</p><ol><li>타자의 순번을 정한다. (1번 선수는 4번 타자로 고정) → (1, 2, 3)과 (2, 1, 3)은 다른 순서임</li><li>1이닝부터 N이닝까지 경기를 진행한다.</li><li>각 이닝별 진행 흐름<ol><li>이전 순번 바로 다음부터 순번이 진행된다. (첫 이닝은 1번부터(인덱스상 0))</li><li>아웃이 3번이 될 때까지 진행한다.</li><li>1루, 2루, 3루에 선수가 있는지 표시하는 <code>is_there</code> 변수를 사용하여 진행한다.</li></ol></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, ans;</span><br><span class="line"><span class="keyword">int</span> info[<span class="number">50</span>][<span class="number">9</span>]; <span class="comment">// 각 이닝별 타자 정보</span></span><br><span class="line"><span class="keyword">int</span> order[<span class="number">9</span>]; <span class="comment">// 타자 순번</span></span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>, score = <span class="number">0</span>; <span class="comment">// 순번 인덱스, 현재 점수</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> inning = <span class="number">0</span>; inning &lt; N; ++inning) &#123;</span><br><span class="line"><span class="keyword">bool</span> is_there[<span class="number">3</span>] = &#123; <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span> &#125;; <span class="comment">// 1, 2, 3루</span></span><br><span class="line"><span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (info[inning][order[idx]] == <span class="number">0</span>) &#123; <span class="comment">// 아웃</span></span><br><span class="line">out++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (info[inning][order[idx]] == <span class="number">1</span>) &#123; <span class="comment">// 1루타</span></span><br><span class="line"><span class="keyword">if</span> (is_there[<span class="number">2</span>]) &#123; <span class="comment">// 3루타 -&gt; 홈</span></span><br><span class="line">score++; is_there[<span class="number">2</span>] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="number">-1</span>; --i) &#123; <span class="comment">// 각각 1 전진</span></span><br><span class="line"><span class="keyword">if</span> (is_there[i]) &#123;</span><br><span class="line">is_there[i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">is_there[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">is_there[<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 1루 전진</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (info[inning][order[idx]] == <span class="number">2</span>) &#123; <span class="comment">// 2루타</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; ++i) &#123; <span class="comment">// 2루, 3루 -&gt; 홈</span></span><br><span class="line"><span class="keyword">if</span> (is_there[i]) &#123;</span><br><span class="line">score++; is_there[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_there[<span class="number">0</span>]) &#123; <span class="comment">// 1루 -&gt; 3루</span></span><br><span class="line">is_there[<span class="number">2</span>] = <span class="literal">true</span>; is_there[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">is_there[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 2루 전진</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (info[inning][order[idx]] == <span class="number">3</span>) &#123; <span class="comment">// 3루타</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123; <span class="comment">// 1, 2, 3루 -&gt; 홈</span></span><br><span class="line"><span class="keyword">if</span> (is_there[i]) &#123;</span><br><span class="line">score++; is_there[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">is_there[<span class="number">2</span>] = <span class="literal">true</span>; <span class="comment">// 3루 전진</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 홈런</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (is_there[i]) &#123;</span><br><span class="line">score++; is_there[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">score++;</span><br><span class="line">&#125;</span><br><span class="line">idx = (idx + <span class="number">1</span>) % <span class="number">9</span>; <span class="comment">// 다음 순번</span></span><br><span class="line"><span class="keyword">if</span> (out == <span class="number">3</span>) <span class="keyword">break</span>; <span class="comment">// 3진 아웃</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; score) ans = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectOrder</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">9</span>) &#123;</span><br><span class="line">Game();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) cnt++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) <span class="keyword">continue</span>; </span><br><span class="line">selected[i] = <span class="literal">true</span>;</span><br><span class="line">order[cnt] = i;</span><br><span class="line">SelectOrder(cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; info[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">selected[<span class="number">0</span>] = <span class="literal">true</span>; order[<span class="number">3</span>] = <span class="number">0</span>; <span class="comment">// 1번 선수 4번째 고정</span></span><br><span class="line">SelectOrder(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17281/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17144번 미세먼지 안녕!</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17144/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17144/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17144-미세먼지-안녕&quot;&gt;&lt;a href=&quot;#17144-미세먼지-안녕&quot; class=&quot;headerlink&quot; title=&quot;#17144. 미세먼지 안녕!&quot;&gt;&lt;/a&gt;#17144. 미세먼지 안녕!&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17144-미세먼지-안녕"><a href="#17144-미세먼지-안녕" class="headerlink" title="#17144. 미세먼지 안녕!"></a>#17144. 미세먼지 안녕!</h1><p><a href="https://www.acmicpc.net/problem/17144" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>공기청정기 항상 왼쪽 열 (두 행 차지)</li><li>그외 미세먼지나 빈 칸이 존재</li><li>1초 동안 일어나는 일</li></ul><ol><li>미세먼지 확산<br>4방향(상하좌우)<br>공기청정기나 경계를 벗어나는 칸은 확산이 일어나지 않음<br>미세먼지 양/5 만큼 확산된다. (각 방향에 대해 한 칸)<br>확산된 후 남은 미세먼지 양은<br>현재 미세먼지 양 - 현재 미세먼지 양/5 * 확산된 방향 개수</li><li>공기청정기 작동 (바람)<br>위쪽 → 반시계방향 순환<br>아래쪽 → 시계방향 순환<br>미세먼지가 바람의 방향대로 한 칸씩 이동<br>미세먼지가 공기청정기로 들어가면 모두 정화</li></ol><p><strong>Goal: T초가 지난 후 남아있는 미세먼지의 양</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>1초가 지날 때마다 다음과 같은 작업이 수행된다.</p><ol><li>미세먼지 확산</li><li>바람으로 인한 이동</li></ol><ul><li>미세먼지 확산</li></ul><p>5 이상인 값만 확산이 일어난다.<br>확산이 일어나기 전에 queue에 이 값과 이 값이 있는 위치를 저장해놓는다.<br>(값을 저장해야 올바른 값을 구할 수 있음)<br>queue에서 하나씩 꺼내어 4가지 방향을 확인한다.<br>(공기청정기 있는 곳과 경계를 넘는 곳은 불가능)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r;</span><br><span class="line"><span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> mid = q.front().value;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y] += mid / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] -= mid / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>확산이 가능하다면 연산을 수행한다.</p><ul><li>바람으로 인한 이동</li></ul><p>아래 순서대로 map을 바꿔준다. </p><p><img src="https://user-images.githubusercontent.com/46062199/73121950-14990780-3fc2-11ea-9391-c99ce7698c5c.png" alt></p><p>공기청정기로 들어간다는 것은 굳이 값을 바꿔줄 필요 없이 전의 값이 이를 덮어주기만 하면 된다. (1번째) → <strong>아래 2번 화살표가 잘못되었습니다….(반대입니다)</strong><br>공기청정기에서 나아가는 바람으로(4번째) 값을 0으로 채워주어야 한다.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, clean_row = clean[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 위쪽</span></span><br><span class="line"><span class="keyword">for</span> (i = clean_row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= clean_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 아래쪽</span></span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">clean_row = clean[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row + <span class="number">2</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[total_row - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[total_row - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = total_row - <span class="number">2</span>; i &gt;= clean_row; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> total_row, total_col, time;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clean[<span class="number">2</span>]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;info&gt; q;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; total_row &amp;&amp; c &lt; total_col) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r;</span><br><span class="line"><span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> mid = q.front().value;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y] += mid / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] -= mid / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, clean_row = clean[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= clean_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">clean_row = clean[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row + <span class="number">2</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[total_row - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[total_row - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = total_row - <span class="number">2</span>; i &gt;= clean_row; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer, idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;total_row, &amp;total_col, &amp;time);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][<span class="number">0</span>] == <span class="number">-1</span>) clean[idx++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (time--) &#123;</span><br><span class="line">answer = <span class="number">0</span>;</span><br><span class="line">spread();</span><br><span class="line">wind();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>) answer += <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 케이스는 다 맞다는데 틀렸단다…ㅎ</p><p>그 이유는 MAX를 50이기 때문이다. (응? 뭔 🙄🤔…다음부터 넉넉히 잡자..)<br>MAX 51로 고쳐주니까 바로 정답 처리 되었다.</p><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> total_row, total_col, time;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clean[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;info&gt; q;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; total_row &amp;&amp; c &lt; total_col) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r;</span><br><span class="line"><span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> mid = q.front().value;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y] += mid / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] -= mid / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, clean_row = clean[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= clean_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">clean_row = clean[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row + <span class="number">2</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[total_row - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[total_row - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = total_row - <span class="number">2</span>; i &gt;= clean_row; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer, idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;total_row, &amp;total_col, &amp;time);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][<span class="number">0</span>] == <span class="number">-1</span>) clean[idx++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (time--) &#123;</span><br><span class="line">answer = <span class="number">0</span>;</span><br><span class="line">spread();</span><br><span class="line">wind();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>) answer += <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>코드<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> total_row, total_col, time;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clean[<span class="number">2</span>]; <span class="comment">// 공기청정기 위치(무조건 0열)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;info&gt; q;</span><br><span class="line"><span class="comment">// 상하좌우</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; total_row &amp;&amp; c &lt; total_col) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1. 미세먼지 확산</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r;</span><br><span class="line"><span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> mid = q.front().value;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y] += mid / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] -= mid / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 바람으로 미세먼지 이동</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 위쪽 ( 반시계 작업은 거꾸로 수행, 그래야 편함)</span></span><br><span class="line"><span class="keyword">int</span> i, j, clean_row = clean[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123; <span class="comment">// 공기청정기에 들어가면 사라지니까 바로 이전건 그냥 덮어쓰면 됨</span></span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= clean_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 아래쪽 ( 시계 )</span></span><br><span class="line">clean_row = clean[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row + <span class="number">2</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[total_row - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[total_row - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = total_row - <span class="number">2</span>; i &gt;= clean_row; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer, idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;total_row, &amp;total_col, &amp;time);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][<span class="number">0</span>] == <span class="number">-1</span>) clean[idx++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (time--) &#123;</span><br><span class="line">answer = <span class="number">0</span>;</span><br><span class="line">spread();</span><br><span class="line">wind();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"change\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>) answer += <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>바람에 의한 이동 확인용 test case</p><p>  7 8 1<br>  2 4 0 0 0 0 0 9<br>  3 0 0 0 3 0 0 8<br>  -1 3 5 0 0 0 22 0<br>  -1 8 0 0 0 0 0 3<br>  3 0 0 0 0 10 43 5<br>  4 0 5 0 15 0 0 0<br>  2 1 40 0 0 0 20 3<br>  // output<br>  Change<br>  4 0 0 0 0 0 9 8<br>  2 0 0 0 3 0 0 0<br>  -1 0 3 5 0 0 0 22<br>  -1 0 8 0 0 0 0 0<br>  4 0 0 0 0 10 43 3<br>  2 0 5 0 15 0 0 5<br>  1 40 0 0 0 20 3 0</p><p>  6 6 1<br>   5  0 3  4 1 2<br>   0  0 7  0 0 3<br>  -1 10 0 46 0 2<br>  -1  0 0  0 0 4<br>   3  0 0  0 0 3<br>   1  3 1  2 4 2<br>  change!!<br>   3 1   4  4 1 2<br>   1 3   3 10 0 3<br>  -1 4  12 10 9 2<br>  -1 2   0  9 0 4<br>   3 0   0  0 0 3<br>   1 3   1  2 4 2</p></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17144/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17143번 낚시왕</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17143/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17143/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17143-낚시왕&quot;&gt;&lt;a href=&quot;#17143-낚시왕&quot; class=&quot;headerlink&quot; title=&quot;#17143. 낚시왕&quot;&gt;&lt;/a&gt;#17143. 낚시왕&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17143-낚시왕"><a href="#17143-낚시왕" class="headerlink" title="#17143. 낚시왕"></a>#17143. 낚시왕</h1><p><a href="https://www.acmicpc.net/problem/17143" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>R x C 크기의 격자판</li><li>낚시왕 위치 (0, 0)</li><li>1초 동안 일어나는 일<ol><li>낚시왕 오른쪽으로 한 칸 이동<br>(낚시왕이 먼저 이동하기에 상어가 이동하기 전 잡히게 된다.)</li><li>낚시왕이 열에 있는 상어 중 가장 가까운 상어를 잡는다.</li><li>상어 이동<br>상어 : 속도와 크기를 가짐<br>경계를 넘게되면 방향을 반대로 바꿈<br><strong>이동을 마친 후에</strong> 상어가 한 칸에 여러 마리 있으면, 가장 큰 상어가 나머지 상어들을 모두 먹음(사라짐)</li></ol></li></ul><p><strong>Goal: 낚시왕이 잡은 상어 크기의 합</strong></p><ul><li><p>입력</p><p>  R : ~100<br>  C : ~100<br>  M(상어 수) : ~10000<br>  r, c : 위치 ~R, ~C<br>  s : 속력 ~1000<br>  d : 이동방향 1~4 상하우좌<br>  z : 크기 ~10000</p></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>필자는 인덱스를 0부터 계산하였기에…이를 모두 신경쓰느라 🐕고생<br>그냥 1부터 신경쓰는게 편할 수도 있다. (입력 받을 때도 신경써주어야함…)</li><li>상어 정보 (MAX는 100)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> row, col, speed, direction, size;</span><br><span class="line"><span class="keyword">bool</span> death = <span class="literal">false</span>;</span><br><span class="line">&#125;sharks[MAX*MAX];</span><br></pre></td></tr></table></figure>상어의 현재 위치, 방향, 크기, 사라졌는지 유무가 저장된다.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(열의 수: 처음부터~열의 끝까지 이동) </span><br><span class="line">catchShark() <span class="comment">//  1. 상어를 잡는다</span></span><br><span class="line">moveShark() <span class="comment">//   2. 상어가 이동한다.</span></span><br><span class="line">updateMap() <span class="comment">//   3. 이동을 마친 상어들 map에 반영(먹히면 사라지도록)</span></span><br></pre></td></tr></table></figure></li><li><code>catchShark()</code><br>해당 열을 탐색하다가 상어를 발견하면 답에 크기를 더해주고 리턴</li><li><code>moveShark()</code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">주기 : <span class="number">2</span> * (전체 행이나 열의 크기<span class="number">-1</span>)</span><br><span class="line"><span class="comment">// ex 방향 -&gt; 전체 열의 크기: 4, 상어는 (1, 2)에 있다고 가정할 때</span></span><br><span class="line">위치:     <span class="number">2</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">방향:    -&gt; &lt;- &lt;- &lt;- -&gt; -&gt; -&gt; &lt;- &lt;- &lt;- -&gt; -&gt; -&gt; &lt;-</span><br><span class="line">이동거리: <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> </span><br><span class="line"></span><br><span class="line">주기가 <span class="number">2</span> * <span class="number">3</span> = <span class="number">6</span>으로 이동거리가 <span class="number">6</span>마다 같은 위치를 반복하고 있음</span><br><span class="line">방향은 <span class="number">0</span>이나 전체 열의 크기<span class="number">-1</span>에 위치할 때 바뀜</span><br><span class="line">위치는 방향에 맞게 이동해주면 됨</span><br><span class="line"></span><br><span class="line">방향</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>  <span class="comment">// 상하 우좌</span></span><br><span class="line"><span class="number">1</span> &lt;-&gt; <span class="number">2</span> (<span class="number">1</span>일 때 <span class="number">2</span>, <span class="number">2</span>일 때 <span class="number">1</span>)</span><br><span class="line"><span class="number">3</span> &lt;-&gt; <span class="number">4</span> (<span class="number">3</span>일 때 <span class="number">4</span>, <span class="number">4</span>일 때 <span class="number">3</span>)</span><br><span class="line">현재 방향을 <span class="number">2</span>로 나눴을 때 </span><br><span class="line">나머지가 <span class="number">0</span>이면 현재 방향에서 <span class="number">1</span>을 빼주고</span><br><span class="line">아니면 <span class="number">1</span>을 더해주면 바뀐 방향을 구할 수 있다.</span><br></pre></td></tr></table></figure></li><li><code>updateMap()</code></li></ul><ol><li>map을 초기화 해준다. (이동한 상어의 위치를 새로 반영하기 위해)</li><li>해당 위치에 상어가 있을 때와 없을 때를 구분해서 처리를 해준다.</li></ol><p>초기에 입력값을 반영하기 위해, 입력을 모두 받고 한 번 호출해준다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r, c, m, idx, answer;</span><br><span class="line"><span class="comment">// 상하우좌</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="comment">// 상어 정보</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> row, col, speed, direction, size;</span><br><span class="line"><span class="keyword">bool</span> death = <span class="literal">false</span>;</span><br><span class="line">&#125;sharks[MAX*MAX];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX][<span class="number">2</span>]; <span class="comment">// 상어가 존재한다면 해당 상어 크기와 해당 상어가 몇 번째 상어인지</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">catchShark</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col][<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">sharks[<span class="built_in">map</span>[i][col][<span class="number">1</span>]].death = <span class="literal">true</span>;</span><br><span class="line">answer += sharks[<span class="built_in">map</span>[i][col][<span class="number">1</span>]].size;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeDirection</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[idx].direction % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">sharks[idx].direction--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sharks[idx].direction++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveShark</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> period = <span class="number">2</span> * end;</span><br><span class="line"><span class="keyword">int</span> move = sharks[idx].speed % period;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; move; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[idx].direction &lt;= <span class="number">2</span>) &#123; <span class="comment">// 상하</span></span><br><span class="line"><span class="keyword">if</span> ((sharks[idx].row == end &amp;&amp; sharks[idx].direction == <span class="number">2</span>) ||</span><br><span class="line">(sharks[idx].row == <span class="number">0</span> &amp;&amp; sharks[idx].direction == <span class="number">1</span>)) &#123;</span><br><span class="line">changeDirection(idx);</span><br><span class="line">&#125;</span><br><span class="line">sharks[idx].row += dx[sharks[idx].direction - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 우좌</span></span><br><span class="line"><span class="keyword">if</span> ((sharks[idx].col == end &amp;&amp; sharks[idx].direction == <span class="number">3</span>) ||</span><br><span class="line">(sharks[idx].col == <span class="number">0</span> &amp;&amp; sharks[idx].direction == <span class="number">4</span>)) &#123;</span><br><span class="line">changeDirection(idx);</span><br><span class="line">&#125;</span><br><span class="line">sharks[idx].col += dy[sharks[idx].direction<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123; <span class="comment">// map 초기화</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[i][j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[i].death) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> r = sharks[i].row;</span><br><span class="line"><span class="keyword">int</span> c = sharks[i].col;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[r][c][<span class="number">0</span>] != <span class="number">0</span>) &#123; <span class="comment">// 해당 위치에 상어가 있다면</span></span><br><span class="line"><span class="keyword">if</span> (sharks[i].size &gt; <span class="built_in">map</span>[r][c][<span class="number">0</span>]) &#123;</span><br><span class="line">sharks[<span class="built_in">map</span>[r][c][<span class="number">1</span>]].death = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">0</span>] = sharks[i].size;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sharks[i].death = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 해당 위치에 상어가 없을 때</span></span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">0</span>] = sharks[i].size;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;r, &amp;c, &amp;m);</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;row);</span><br><span class="line">sharks[idx].row = row - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;col);</span><br><span class="line">sharks[idx].col = col - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx].speed);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx].direction);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx++].size);</span><br><span class="line">&#125;</span><br><span class="line">updateMap(); <span class="comment">// 초기 map update</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; ++i) &#123;</span><br><span class="line">catchShark(i); <span class="comment">// 상어 잡기</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123; <span class="comment">// 상어 이동</span></span><br><span class="line"><span class="keyword">if</span> (sharks[j].death) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (sharks[j].direction &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">moveShark(j, r<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">moveShark(j, c<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">updateMap(); <span class="comment">// 이동한 상어 위치 반영</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>자꾸 for문에서 <code>i</code>나 <code>j</code>가 아닌 r, c로 고정값을 두어서…이런 실수는 진짜진짜 조심하자.</li></ul><h3 id="For-Debug"><a href="#For-Debug" class="headerlink" title="For Debug"></a>For Debug</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r, c, m, idx, answer;</span><br><span class="line"><span class="comment">// 상하우좌</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="comment">// 상어 정보</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> row, col, speed, direction, size;</span><br><span class="line"><span class="keyword">bool</span> death = <span class="literal">false</span>;</span><br><span class="line">&#125;sharks[MAX*MAX];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX][<span class="number">2</span>]; <span class="comment">// 상어가 존재한다면 해당 상어 크기와 해당 상어가 몇 번째 상어인지</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">catchShark</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*printf("%d번째\n", col); // map 확인</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; r; ++i) &#123;</span></span><br><span class="line"><span class="comment">for (int j = 0; j &lt; c; ++j) &#123;</span></span><br><span class="line"><span class="comment">printf("%d ", map[i][j][0]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col][<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">sharks[<span class="built_in">map</span>[i][col][<span class="number">1</span>]].death = <span class="literal">true</span>;</span><br><span class="line">answer += sharks[<span class="built_in">map</span>[i][col][<span class="number">1</span>]].size;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeDirection</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[idx].direction % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">sharks[idx].direction--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sharks[idx].direction++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveShark</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> period = <span class="number">2</span> * end;</span><br><span class="line"><span class="keyword">int</span> move = sharks[idx].speed % period;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; move; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[idx].direction &lt;= <span class="number">2</span>) &#123; <span class="comment">// 상하</span></span><br><span class="line"><span class="keyword">if</span> ((sharks[idx].row == end &amp;&amp; sharks[idx].direction == <span class="number">2</span>) ||</span><br><span class="line">(sharks[idx].row == <span class="number">0</span> &amp;&amp; sharks[idx].direction == <span class="number">1</span>)) &#123;</span><br><span class="line">changeDirection(idx);</span><br><span class="line">&#125;</span><br><span class="line">sharks[idx].row += dx[sharks[idx].direction - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 우좌</span></span><br><span class="line"><span class="keyword">if</span> ((sharks[idx].col == end &amp;&amp; sharks[idx].direction == <span class="number">3</span>) ||</span><br><span class="line">(sharks[idx].col == <span class="number">0</span> &amp;&amp; sharks[idx].direction == <span class="number">4</span>)) &#123;</span><br><span class="line">changeDirection(idx);</span><br><span class="line">&#125;</span><br><span class="line">sharks[idx].col += dy[sharks[idx].direction<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[i][j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[i].death) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> r = sharks[i].row;</span><br><span class="line"><span class="keyword">int</span> c = sharks[i].col;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[r][c][<span class="number">0</span>] != <span class="number">0</span>) &#123; <span class="comment">// 해당 위치에 상어가 있다면</span></span><br><span class="line"><span class="keyword">if</span> (sharks[i].size &gt; <span class="built_in">map</span>[r][c][<span class="number">0</span>]) &#123;</span><br><span class="line">sharks[<span class="built_in">map</span>[r][c][<span class="number">1</span>]].death = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">0</span>] = sharks[i].size;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sharks[i].death = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 해당 위치에 상어가 없을 때</span></span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">0</span>] = sharks[i].size;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;r, &amp;c, &amp;m);</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;row);</span><br><span class="line">sharks[idx].row = row - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;col);</span><br><span class="line">sharks[idx].col = col - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx].speed);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx].direction);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx++].size);</span><br><span class="line">&#125;</span><br><span class="line">updateMap();</span><br><span class="line"><span class="comment">/*for (int i = 0; i &lt; m; ++i) &#123; // 입력 확인</span></span><br><span class="line"><span class="comment">printf("%d %d %d %d %d\n", sharks[i].row, sharks[i].col, sharks[i].speed, sharks[i].direction, sharks[i].size);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; ++i) &#123;</span><br><span class="line">catchShark(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[j].death) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (sharks[j].direction &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">moveShark(j, r<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">moveShark(j, c<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">updateMap();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17143/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17142번 연구소 3</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17142/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17142/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17142-연구소-3&quot;&gt;&lt;a href=&quot;#17142-연구소-3&quot; class=&quot;headerlink&quot; title=&quot;#17142. 연구소 3&quot;&gt;&lt;/a&gt;#17142. 연구소 3&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Proble
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17142-연구소-3"><a href="#17142-연구소-3" class="headerlink" title="#17142. 연구소 3"></a>#17142. 연구소 3</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17142" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>퍼트릴 M개의 바이러스를 선택한다. (DFS)<br>중복을 허용하지 않는 조합이다.</li><li>선택한 바이러스를 퍼트리다. (BFS)<br>4 방향으로 탐색을 하되, 빈 칸 또는 바이러스가 있는 곳이어야 한다.</li><li>dist라는 배열에 시간을 저장한다.<br>단, 모서리에 있는 바이러스에서 탐색이 끝난 경우 시간을 1 빼주어야 한다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> selected[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; virus;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">50</span>][<span class="number">50</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">50</span>][<span class="number">50</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : selected) &#123;</span><br><span class="line"><span class="keyword">if</span> (e != <span class="number">-1</span>) &#123;</span><br><span class="line">q.push(&#123; virus[e].first, virus[e].second &#125;);</span><br><span class="line">visit[virus[e].first][virus[e].second] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &lt; <span class="number">0</span> || d_y &lt; <span class="number">0</span> || d_x &gt;= N || d_y &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">1</span> || visit[d_x][d_y]) <span class="keyword">continue</span>;</span><br><span class="line">visit[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">dist[d_x][d_y] = dist[x][y] + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (dist[i][j] != <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span> || i == N - <span class="number">1</span> || j == N - <span class="number">1</span>)</span><br><span class="line">dist[i][j]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!visit[i][j] &amp;&amp; <span class="built_in">map</span>[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (dist[i][j] &gt; time) time = dist[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; time) ans = time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectVirus</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == M) &#123;</span><br><span class="line">Spread();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; virus.size(); ++i) &#123;</span><br><span class="line">selected[i] = i;</span><br><span class="line">SelectVirus(i+<span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">bool</span> no_zero = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>) virus.push_back(&#123; i, j &#125;);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>) no_zero = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (no_zero) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">memset</span>(selected, <span class="number">-1</span>, <span class="keyword">sizeof</span>(selected));</span><br><span class="line">SelectVirus(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans != <span class="number">1e9</span>) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17142/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17140번 이차원 배열과 연산</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17140/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17140/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17140-이차원-배열과-연산&quot;&gt;&lt;a href=&quot;#17140-이차원-배열과-연산&quot; class=&quot;headerlink&quot; title=&quot;#17140. 이차원 배열과 연산&quot;&gt;&lt;/a&gt;#17140. 이차원 배열과 연산&lt;/h1&gt;&lt;h3 id=&quot;Probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17140-이차원-배열과-연산"><a href="#17140-이차원-배열과-연산" class="headerlink" title="#17140. 이차원 배열과 연산"></a>#17140. 이차원 배열과 연산</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17140" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>시뮬레이션 문제이다. (항상 자료구조를 뭘 사용할지 잘 판단하자.)</li><li>여기서는 <strong>map</strong>과 <strong>priority queue</strong>를 사용하였다.</li><li>map의 쓰임</li></ul><p>&lt;수, 등장 횟수&gt;를 저장하기 위해 쓰인다. 처음에 1차원 배열로 cnt[수]=등장 횟수로 하려 했지만, 이렇게 되면 매번 100번 for문을 연산해야 한다고 느껴 map을 이용해 바로 접근이 가능하도록 하였다.</p><ul><li>priority queue의 쓰임</li></ul><p>R연산 또는 C연산 중에 생성되는 정렬된 값들을 저장하기 위해 쓰인다. 연산자를 오버로딩하여 삽입 시 정렬 순위를 정해주었다.<br>원래 우선순위 큐는 기본적으로 내림차순으로 정렬되어 있다. (pair라면 첫 번째 기준, 첫 번째 원소가 같다면 두 번째 원소 내림차순 정렬)</p><p>그렇기에 따로 정해주었는데 그럴 필요 없이 <strong>-를 붙여 저장하면 오름차순으로 정렬된다는 것을 깨닫고…(유레카!!)</strong></p><p>*아래 코드는 그러진 않았다.</p><ul><li>해당 수를 카운트할 때 중요한 것은 카운트가 끝나면 <strong>해당 배열의 값을 0으로 바꾼다</strong>는 것이다. 그래야 행이나 열의 크기가 줄어들 때 영향을 받지 않고 연산을 정상적으로 수행할 수 있다.</li><li>그 외는 문제 그대로 구현하면 된다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r, c, k, total_r, total_c;</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">100</span>][<span class="number">100</span>]; <span class="comment">// 1 ~ 100</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> num, count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Info &amp;v1, <span class="keyword">const</span> Info &amp;v2) &#123;</span><br><span class="line"><span class="keyword">if</span> (v1.count == v2.count) <span class="keyword">return</span> v1.num &gt; v2.num;</span><br><span class="line"><span class="keyword">return</span> v1.count &gt; v2.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; k;</span><br><span class="line">total_r = total_c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_r; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_c; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt;= <span class="number">100</span>; ++t) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[r - <span class="number">1</span>][c - <span class="number">1</span>] == k) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Info&gt; pq;</span><br><span class="line"><span class="keyword">if</span> (total_r &gt;= total_c) &#123; <span class="comment">// R 연산</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_r; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_c; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt.count(A[i][j]) == <span class="number">0</span>) cnt[A[i][j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cnt[A[i][j]]++;</span><br><span class="line">A[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : cnt) &#123;</span><br><span class="line">pq.push(&#123; e.first, e.second &#125;);</span><br><span class="line">&#125;</span><br><span class="line">cnt.clear();</span><br><span class="line"><span class="keyword">int</span> len = pq.size() * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += <span class="number">2</span>) &#123;</span><br><span class="line">A[i][j] = pq.top().num; A[i][j + <span class="number">1</span>] = pq.top().count;</span><br><span class="line">pq.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (total_c &lt; len) total_c = len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// C 연산</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_c; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_r; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[j][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt.count(A[j][i]) == <span class="number">0</span>) cnt[A[j][i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cnt[A[j][i]]++;</span><br><span class="line">A[j][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : cnt) &#123;</span><br><span class="line">pq.push(&#123; e.first, e.second &#125;);</span><br><span class="line">&#125;</span><br><span class="line">cnt.clear();</span><br><span class="line"><span class="keyword">int</span> len = pq.size() * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += <span class="number">2</span>) &#123;</span><br><span class="line">A[j][i] = pq.top().num; A[j + <span class="number">1</span>][i] = pq.top().count;</span><br><span class="line">pq.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (total_r &lt; len) total_r = len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">Task();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17140/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17136번 색종이 붙이기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17136/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17136/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17136-색종이-붙이기&quot;&gt;&lt;a href=&quot;#17136-색종이-붙이기&quot; class=&quot;headerlink&quot; title=&quot;#17136. 색종이 붙이기&quot;&gt;&lt;/a&gt;#17136. 색종이 붙이기&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17136-색종이-붙이기"><a href="#17136-색종이-붙이기" class="headerlink" title="#17136. 색종이 붙이기"></a>#17136. 색종이 붙이기</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17136" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>DFS + BackTracking을 사용하여 푼다.<br>(처음에 BFS+Greedy를 이용해 풀었다가 틀렸다…반례가 존재)</li><li>10 x 10 크기의 모든 배열에서 모든 지점을 탐색한다.<ul><li>탐색 횟수가 100이라면 모든 지점을 탐색한 경우라 값을 갱신하고 종료한다.</li><li>행과 열은 0 → 100개의 원소들에 맞게 계산</li><li>이미 <code>ans</code> 가 지금까지 구한 개수(<code>cnt</code>) 보다 크면 종료 (BackTracking)</li><li>해당 지점이 1이면 색종이 크기가 큰 5부터 검사 시작<ul><li>해당 크기가 가능하면 붙이고 다음 경우 탐색<br>탐색이 끝난 경우 원래대로 돌려놓아야 모든 경우 탐색이 가능하다.</li></ul></li><li>해당 지점이 0이면 다음 번째 원소 탐색</li></ul></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> type[<span class="number">5</span>] = &#123;<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span> &#125;; <span class="comment">// 1 2 3 4 5 종류</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; x + size; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt; y + size; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[i][j] = status;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x + size &gt; <span class="number">10</span> || y + size &gt; <span class="number">10</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 범위 밖</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; x + size; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt; y + size; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">100</span>) &#123; <span class="comment">// 모든 경우를 탐색한 경우 (총 100개)</span></span><br><span class="line"><span class="keyword">if</span> (ans &gt; cnt) ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = n / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = n % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (ans &lt;= cnt) <span class="keyword">return</span>; <span class="comment">// BackTracking</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &gt; <span class="number">0</span>; --i) &#123; <span class="comment">// 크기 5부터 시작</span></span><br><span class="line"><span class="keyword">if</span> (type[i<span class="number">-1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Check(x, y, i)) &#123;</span><br><span class="line">type[i - <span class="number">1</span>]--;</span><br><span class="line">Update(x, y, i, <span class="number">0</span>); <span class="comment">// 색종이 붙이기</span></span><br><span class="line">DFS(n+<span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">Update(x, y, i, <span class="number">1</span>); <span class="comment">// 색종이 다시 때기</span></span><br><span class="line">type[i - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> DFS(n + <span class="number">1</span>, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">DFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">100</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17136/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17135번 캐슬 디펜스</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17135/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17135/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:21 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17135-캐슬-디펜스&quot;&gt;&lt;a href=&quot;#17135-캐슬-디펜스&quot; class=&quot;headerlink&quot; title=&quot;#17135. 캐슬 디펜스&quot;&gt;&lt;/a&gt;#17135. 캐슬 디펜스&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17135-캐슬-디펜스"><a href="#17135-캐슬-디펜스" class="headerlink" title="#17135. 캐슬 디펜스"></a>#17135. 캐슬 디펜스</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17135" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>궁수 3명의 위치를 지정한다. (중복x, 오름차순 순열조합)</li><li>적이 사라질 때까지(<strong>=궁수가 0번째 행으로 이동할 때까지</strong>) 게임을 진행한다.<ol><li>궁수는 가장 가까운 위치의 적을 공격해야 하며, 여럿이면 왼쪽의 적부터 공격한다. 또한 동시에 공격이 가능하다(=위의 조건을 만족하는 같은 적을 공격한다.)</li><li>공격이 끝나면 배열을 바꾸지 않고 궁수의 위치를 이동시킨다. (위로)<br><code>step</code> 변수를 두어 범위를 좁혀간다.</li></ol></li></ol><p>가까운 적을 먼저 찾아 공격하기 위해 BFS 탐색을 사용한다.</p><ul><li>각 궁수별로 <code>queue</code> 를 만들어 자신의 위치를 저장하고 탐색 시작 (최대 D까지)</li><li>궁수가 적을 공격할 경우 다음 궁수에게 차례를 넘긴다. (즉, 공격하면 자신의 턴 끝=탐색 끝)</li><li><code>check array</code>를 사용해 공격한 적일 경우 해당 <code>step + 1</code>의 값을 준다. (step이 0부터 시작, check는 0으로 초기화 되어있기에)</li><li><code>step</code>을 이용해 <code>check</code>에 값을 준 이유는 다음 <code>step</code>에서 궁수의 위치가 이동될 때 이전 턴에서 공격 당해 제외된 적인지 아닌지를 판단하기 위함이다. (step의 값이 변하니까 중복되지 않게 탐색 가능)</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>궁수는 가장 가까운 위치의 적을 공격, 가까운 적이 여럿이면 왼쪽 우선 그리고 동시에 공격 가능하다는 조건을 충족하지 못 했다. → BFS를 이용하기로 결정<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, D, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> archer[<span class="number">3</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDistance</span><span class="params">(<span class="keyword">int</span> a_x, <span class="keyword">int</span> a_y, <span class="keyword">int</span> b_x, <span class="keyword">int</span> b_y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(a_x - b_x) + <span class="built_in">abs</span>(a_y - b_y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line"><span class="keyword">int</span> attack_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - step - <span class="number">1</span>; i &gt;= (N -step) - D &amp;&amp; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = attack_cnt; k &lt; <span class="number">3</span>; ++k) &#123; <span class="comment">// 3명의 궁수</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (D &gt;= getDistance(i, j, N - step, archer[k])</span><br><span class="line">&amp;&amp; <span class="built_in">map</span>[i][j] == <span class="number">1</span> &amp;&amp; !check[i][j]) &#123; <span class="comment">// 공격 개시</span></span><br><span class="line">res++;</span><br><span class="line">check[i][j] = <span class="literal">true</span>;</span><br><span class="line">attack_cnt++;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">// 한 번만 공격 가능</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">step++;</span><br><span class="line"><span class="keyword">if</span> (N - step - <span class="number">1</span> &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; res) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectPosition</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) &#123;</span><br><span class="line">Game();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (archer[cnt] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">archer[cnt] = i;</span><br><span class="line">SelectPosition(i + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">archer[cnt] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; D;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectPosition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, D, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> archer[<span class="number">3</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">3</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>, res = <span class="number">0</span>; <span class="comment">// step은 1턴이 끝날 때 이동을 위함</span></span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123; <span class="comment">// 궁수 각 3명에 대하여</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">q.push(&#123; N - step, archer[i] &#125;); <span class="comment">// 궁수 현재 위치부터 시작</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D; ++j) &#123; <span class="comment">// 최대 D까지만큼만 탐색</span></span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">bool</span> end_flag = <span class="literal">false</span>; <span class="comment">// 적을 공격했을 때 종료 flag</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">3</span>; ++dir) &#123; <span class="comment">// 왼 위 오 순서로 탐색 시작</span></span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; N - step &amp;&amp; d_y &lt; M) &#123; <span class="comment">// N - step은 궁수 위치</span></span><br><span class="line"><span class="keyword">if</span> (d_x &lt; N - step - D) <span class="keyword">continue</span>; <span class="comment">// [N - step - D, N-step) 탐색 범위</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">1</span> &amp;&amp; check[d_x][d_y] == <span class="number">0</span>) &#123; <span class="comment">// 처음 적을 공격한 경우</span></span><br><span class="line">res++;</span><br><span class="line">check[d_x][d_y] = step + <span class="number">1</span>; <span class="comment">// step을 옮겼을 때 중복 방지를 위함</span></span><br><span class="line">end_flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">1</span> &amp;&amp; check[d_x][d_y] == step + <span class="number">1</span>) &#123; <span class="comment">// 동시에 적을 공격한 경우</span></span><br><span class="line">end_flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 적을 발견하지 못 한 경우</span></span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (end_flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (end_flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">step++;</span><br><span class="line"><span class="keyword">if</span> (N - step - <span class="number">1</span> &lt; <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; res) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectPosition</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) &#123;</span><br><span class="line">Game();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (archer[cnt] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">archer[cnt] = i;</span><br><span class="line">SelectPosition(i + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">archer[cnt] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; D;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectPosition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17135/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17070번 파이프 옮기기 1</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17070/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17070/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17070-파이프-옮기기-1&quot;&gt;&lt;a href=&quot;#17070-파이프-옮기기-1&quot; class=&quot;headerlink&quot; title=&quot;#17070. 파이프 옮기기 1&quot;&gt;&lt;/a&gt;#17070. 파이프 옮기기 1&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17070-파이프-옮기기-1"><a href="#17070-파이프-옮기기-1" class="headerlink" title="#17070. 파이프 옮기기 1"></a>#17070. 파이프 옮기기 1</h1><p><a href="https://www.acmicpc.net/problem/17070" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>파이프는 2개의 연속된 칸을 차지</li><li>회전이 가능 (3가지: 수평선, 수직선, 대각선(4칸 차지))</li></ul><p><strong>Goal: (0, 0) 과 (0, 1)에 위치한 하나의 파이프를 (N, N)으로 옮기는 방법의 개수<br>불가능한 경우 0</strong> </p><ul><li>파이프 옮기기</li></ul><p>오른쪽, 아래, 오른쪽 아래 대각선 방향으로 옮길 수 있음<br>옮길 때 45도 회전 가능<br>벽에 닿으면 안됨</p><ul><li>가로(수평) → 오른쪽 or 오른쪽 아래 대각선</li><li>세로(수직) → 아래 or 오른쪽 아래 대각선</li><li>오른쪽 아래 대각선 → 3가지 모두 가능</li></ul><p><strong>입력</strong></p><pre><code>N: 3~16빈칸 0 벽은 1// 예제0 0 1 0 0 0 0 0 0 0 0 00 0 0 0-&gt; 0맨 처음 파이프는 (0,0), (0,1) 즉 가로이기에 가능한 방향인오른쪽, 오른쪽 아래 대각선으로 옮길 수 없다.</code></pre><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>현재 type 정보와 위치를 알고 있어야 한다.</li><li>현재 type에 따라 옮길 수 있는 방향이 다르다.</li><li>현재 type에 따라 옮길 수 있는지 check를 해주어야 한다.</li><li><code>check</code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">가로: 오른쪽 <span class="number">1</span>칸 검사</span><br><span class="line">세로: 아래 <span class="number">1</span>칸 검사</span><br><span class="line">대각선: 오른쪽 <span class="number">1</span>칸, 아래 <span class="number">1</span>칸, 오른쪽 아래 <span class="number">1</span>칸 검사</span><br><span class="line"><span class="comment">// # 1.</span></span><br><span class="line">가로 -&gt; 가로 (자기 자신)</span><br><span class="line">     -&gt; 대각선 </span><br><span class="line"><span class="comment">// # 2.</span></span><br><span class="line">세로 -&gt; 세로 (자기 자신)</span><br><span class="line">     -&gt; 대각선 </span><br><span class="line"><span class="comment">// # 3.</span></span><br><span class="line">대각선 -&gt; 세로</span><br><span class="line">       -&gt; 가로</span><br><span class="line">       -&gt; 대각선</span><br></pre></td></tr></table></figure></li></ul><ol><li>모두 자기 자신의 타입 그대로 옮길 수 있다.</li><li>대각선을 가기 위해서는 가로, 세로로 갈 수 있는 조건 역시 만족해야 한다.</li></ol><p>위를 이용하여 탐색 코드를 구현한다.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> 탐색(현재 위치, 현재 타입)</span><br><span class="line">도착했을 때 answer++후 리턴</span><br><span class="line"><span class="keyword">for</span>(<span class="number">3</span>번)</span><br><span class="line">check할 위치(오른쪽, 아래, 오른쪽 아래)</span><br><span class="line">경계확인</span><br><span class="line">(벽이 아니고 자신과 같은 type)이거나(벽이 아니고 대각선)</span><br><span class="line">탐색(옮길 위치, 가능한 타입) </span><br><span class="line">모든 곳을 검사했을 때만 대각선 탐색</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 16</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, answer;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="comment">// 오른쪽 1칸 검사, 아래 1칸 검사, 오른쪽 아래 1칸 검사</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;; </span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// type 0 : 가로, 1 : 세로, 2 : 대각선</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (r == n - <span class="number">1</span> &amp;&amp; c == n - <span class="number">1</span>) &#123;</span><br><span class="line">answer++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 현재 타입이 가로일 때 어차피 대각선 때문에 3칸 다 검사해야 한다.</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">x = r + dx[i];</span><br><span class="line">y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y)) &#123;</span><br><span class="line"><span class="comment">// 같은 type일 경우 or 대각선일 경우, i==2이면 대각선 경우가 한 번 더 구해지는 꼴이다.</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">map</span>[x][y] == <span class="number">0</span> &amp;&amp; type == i || <span class="built_in">map</span>[x][y] == <span class="number">0</span> &amp;&amp; type == <span class="number">2</span>) &amp;&amp; i != <span class="number">2</span>) &#123; </span><br><span class="line">dfs(x, y, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[x][y] != <span class="number">0</span>) flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">dfs(x, y, <span class="number">2</span>); <span class="comment">// 오른쪽 아래 대각선</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17070/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16637번 괄호 추가하기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16637/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16637/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16637-괄호-추가하기&quot;&gt;&lt;a href=&quot;#16637-괄호-추가하기&quot; class=&quot;headerlink&quot; title=&quot;#16637. 괄호 추가하기&quot;&gt;&lt;/a&gt;#16637. 괄호 추가하기&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16637-괄호-추가하기"><a href="#16637-괄호-추가하기" class="headerlink" title="#16637. 괄호 추가하기"></a>#16637. 괄호 추가하기</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/16637" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>어느 연산자에 괄호를 넣을지 정해야 한다.<br>괄호는 연산자 연속으로 넣을 수 없다. (1+(3)-2) → 말도 안되는 식<br>그렇기에 이전 괄호의 위치를 알고 있어야 한다.<br>괄호는 첫 번째에 넣을 필요는 없으며(op[i]≠1)<br>이전 괄호의 위치와 2 차이가 나면 안된다.</li><li>괄호를 모두 지정했으면 각 경우에 맞게 식을 계산한다.</li></ol><ul><li>괄호가 등장하면 한 번에 계산하고 반환한다.</li><li><code>Stack</code>을 사용하여 연산자만 넣는다.</li><li><code>Stack</code>이 비어있지 않으면 꺼내어 연산자에 맞게 계산한다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li><p>*(곱셈)은 괄호가 필요 없을 것이라 생각하여 괄호를 넣어주지 않았다.<br>하지만 연산은 왼쪽에서부터 순서대로 진행되기에 곱셈도 괄호가 필요하다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> expr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> N, ans, total_bracket;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TaskBracket</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = expr[start] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> b = expr[start+<span class="number">2</span>] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">char</span> opr = expr[start + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (opr == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = expr[<span class="number">0</span>]-<span class="string">'0'</span>, tmp = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != N<span class="number">-1</span> &amp;&amp; selected[i+<span class="number">1</span>]) &#123;</span><br><span class="line">tmp = TaskBracket(i);</span><br><span class="line">i+=<span class="number">2</span>; </span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!st.empty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (st.top() == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res += tmp; </span><br><span class="line"><span class="keyword">else</span> res += <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (st.top() == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res -= tmp;</span><br><span class="line"><span class="keyword">else</span> res -= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res *= tmp; </span><br><span class="line"><span class="keyword">else</span> res *= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">st.pop();</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">st.push(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectBracket</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt, <span class="keyword">int</span> prior)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt;= total_bracket) &#123;</span><br><span class="line">Calculate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; total_bracket; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[op[i]] || op[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (op[i] - prior == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">selected[op[i]] = <span class="literal">true</span>;</span><br><span class="line">SelectBracket(i+<span class="number">1</span>, cnt+<span class="number">1</span>, op[i]);</span><br><span class="line">selected[op[i]] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; expr[i];</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span>) &#123;</span><br><span class="line">op[total_bracket++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectBracket(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3></li><li><p>ans(정답)의 초기값을 0으로 설정해서 틀렸다. 정답은 (-2^31, 2^31)의 범위에 속한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> expr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> N, total_bracket, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TaskBracket</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = expr[start] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> b = expr[start+<span class="number">2</span>] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">char</span> opr = expr[start + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (opr == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opr == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = expr[<span class="number">0</span>]-<span class="string">'0'</span>, tmp = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != N<span class="number">-1</span> &amp;&amp; selected[i+<span class="number">1</span>]) &#123;</span><br><span class="line">tmp = TaskBracket(i);</span><br><span class="line">i+=<span class="number">2</span>; </span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!st.empty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (st.top() == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res += tmp; </span><br><span class="line"><span class="keyword">else</span> res += <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (st.top() == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res -= tmp;</span><br><span class="line"><span class="keyword">else</span> res -= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res *= tmp; </span><br><span class="line"><span class="keyword">else</span> res *= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">st.pop();</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">st.push(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectBracket</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt, <span class="keyword">int</span> prior)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt;= total_bracket) &#123;</span><br><span class="line">Calculate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; total_bracket; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[op[i]] || op[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (op[i] - prior == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">selected[op[i]] = <span class="literal">true</span>;</span><br><span class="line">SelectBracket(i+<span class="number">1</span>, cnt+<span class="number">1</span>, op[i]);</span><br><span class="line">selected[op[i]] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; expr[i];</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">op[total_bracket++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectBracket(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Try"><a href="#3-Try" class="headerlink" title="3 Try"></a>3 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> expr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> N, total_bracket, ans = numeric_limits&lt;<span class="keyword">int</span>&gt;::min();</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TaskBracket</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = expr[start] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> b = expr[start+<span class="number">2</span>] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">char</span> opr = expr[start + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (opr == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opr == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = expr[<span class="number">0</span>]-<span class="string">'0'</span>, tmp = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != N<span class="number">-1</span> &amp;&amp; selected[i+<span class="number">1</span>]) &#123; <span class="comment">// 괄호인 경우</span></span><br><span class="line">tmp = TaskBracket(i); <span class="comment">// 한 번에 계산</span></span><br><span class="line">i+=<span class="number">2</span>; </span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!st.empty()) &#123; <span class="comment">// 스택에 연산자가 있을 경우</span></span><br><span class="line"><span class="keyword">if</span> (st.top() == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res += tmp; </span><br><span class="line"><span class="keyword">else</span> res += <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (st.top() == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res -= tmp;</span><br><span class="line"><span class="keyword">else</span> res -= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res *= tmp; </span><br><span class="line"><span class="keyword">else</span> res *= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">st.pop();</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">st.push(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectBracket</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt, <span class="keyword">int</span> prior)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt;= total_bracket) &#123;</span><br><span class="line">Calculate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; total_bracket; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[op[i]] || op[i] == <span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">// 첫 번째 연산자에 괄호는 필요 없다.</span></span><br><span class="line"><span class="keyword">if</span> (op[i] - prior == <span class="number">2</span>) <span class="keyword">continue</span>; <span class="comment">// 연속적인 괄호는 불가능</span></span><br><span class="line">selected[op[i]] = <span class="literal">true</span>;</span><br><span class="line">SelectBracket(i+<span class="number">1</span>, cnt+<span class="number">1</span>, op[i]);</span><br><span class="line">selected[op[i]] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; expr[i];</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">op[total_bracket++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectBracket(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16637/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16236번 아기 상어</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16236/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16236/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16236-아기-상어&quot;&gt;&lt;a href=&quot;#16236-아기-상어&quot; class=&quot;headerlink&quot; title=&quot;#16236. 아기 상어&quot;&gt;&lt;/a&gt;#16236. 아기 상어&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16236-아기-상어"><a href="#16236-아기-상어" class="headerlink" title="#16236. 아기 상어"></a>#16236. 아기 상어</h1><p><a href="https://www.acmicpc.net/problem/16236" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 공간</li><li>물고기 M, 아기 상어 1마리 (1칸에 최대 1마리)</li><li>아기 상어 처음 크기 : 2, 물고기도 크기 존재</li><li>아기 상어 움직임 (1초마다 상하좌우)<br>자신보다 큰 물고기 있는 칸은 못 감 나머진 이동 가능<br>자신보다 작은 물고기만 먹을 수 있고, 크기가 같다면 지나가는건 가능</li><li>자신의 크기만큼 물고기를 먹어야 크기가 1 증가한다.</li><li>상어가 이동할 곳 결정 방법<ul><li>더 이상 먹을 물고기가 없으면 종료</li><li>먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹는다. (여기부터 이동)</li><li>1마리보다 많다면, 거리가 가장 가까운 물고기부터 먹는다.<ul><li>가장 가까운 물고기가 여럿이면 가장 위</li><li>그런 물고기가 또 여럿이면 가장 왼쪽에 있는 물고기를 먹는다.</li></ul></li></ul></li></ul><p><strong>Goal: 종료되는 시간은?</strong></p><ul><li><p>입력</p><p>  0: 빈 칸<br>  1~6: 물고기 크기<br>  9: 아기 상어</p></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><p>입력값 다루기</p><p>  struct shark {</p><pre><code>  int r, c, size, cnt= 0;</code></pre><p>  }baby;</p></li></ul><p>아기 상어의 위치, 크기, 먹은 수를 저장할 수 있도록 구조체를 만든다.</p><ul><li>다음 작업이 반복된다.</li></ul><ol><li>먹이를 찾기</li><li>찾았다면 그 중 규칙에 따라 먹이 선택하기</li></ol><ul><li><strong>먹이 찾기</strong></li></ul><ol><li>탐색할 queue와 먹을 수 있는 물고기를 저장할 queue가 필요하다.</li><li>탐색 지점의 표시를 위해 check 배열이 필요하다.</li><li>아기 상어가 이동한 후 다음 먹이까지 찾아가는데 걸리는 시간을 따로 저장해야 한다. (<code>part_time</code>)</li><li>탐색할 지점은 경계를 넘지 않고 아기 상어 크기보다 작거나 같고 탐색표시가 안된 지점이다.<ul><li>탐색이 가능할 때</li></ul><ol><li>탐색 표시를 하고 탐색 queue에 넣어준다.</li><li>아기 상어 크기보다 작은 물고기라면 먹이 queue에 넣어준다.</li></ol></li><li>1초간 갈 수 있는 탐색이 끝나면 먹이 queue가 비어있는지를 판단한다.<ol><li>먹이 queue에 먹이가 들어있으면 걸린 시간(<code>part_time</code>)을 더해준다.</li><li>먹이를 선택한다.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrey</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, prey;</span><br><span class="line">q.push(&#123; row, col &#125;);</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">check[row][col] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> part_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 순회할 때마다 1초 증가</span></span><br><span class="line">part_time++;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; baby.size &gt;= <span class="built_in">map</span>[x][y] &amp;&amp; !check[x][y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (baby.size &gt; <span class="built_in">map</span>[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">prey.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!prey.empty()) &#123;</span><br><span class="line">selectPrey(prey);</span><br><span class="line">time += part_time;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>만약 탐색을 모두 했는데도 먹이가 없다면 <code>isEnd</code>는 <strong>true</strong>가 되므로 작업이 종료된다.</li></ol></li></ol><ul><li><strong>규칙에 따라 먹이 선택하기</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPrey</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;prey)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> prior_x = n, prior_y = n;</span><br><span class="line"><span class="keyword">while</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = prey.front().first;</span><br><span class="line"><span class="keyword">int</span> y = prey.front().second;</span><br><span class="line">prey.pop();</span><br><span class="line"><span class="keyword">if</span> (x &lt; prior_x) &#123;</span><br><span class="line">prior_x = x;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == prior_x) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt; prior_y) &#123;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[baby.r][baby.c] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[prior_x][prior_y] = <span class="number">9</span>;</span><br><span class="line">baby.r = prior_x;</span><br><span class="line">baby.c = prior_y;</span><br><span class="line">baby.cnt++;</span><br><span class="line"><span class="keyword">if</span> (baby.cnt == baby.size) &#123;</span><br><span class="line">baby.size++;</span><br><span class="line">baby.cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>이 먹이 queue에 들어있는 (여럿이라면)물고기들은 모두 같은 거리이기에 문제의 규칙인 가장 위쪽 우선, 가장 왼쪽 우선을 따라 물고기를 선택한다.</li></ul><p>먹을 물고기가 선택되면 아기 상어의 위치를 변경해준다. 크기 또한 먹은 수에 맞게 변경해준다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>시간초과 코드<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, time;</span><br><span class="line"><span class="keyword">bool</span> isEnd;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shark</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, size, cnt= <span class="number">0</span>;</span><br><span class="line">&#125;baby;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPrey</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;prey, <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> prior_x = n, prior_y = n;</span><br><span class="line"><span class="keyword">while</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = prey.front().first;</span><br><span class="line"><span class="keyword">int</span> y = prey.front().second;</span><br><span class="line">prey.pop();</span><br><span class="line"><span class="keyword">if</span> (x &lt; prior_x) &#123;</span><br><span class="line">prior_x = x;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == prior_x) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt; prior_y) &#123;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[baby.r][baby.c] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[prior_x][prior_y] = <span class="number">9</span>;</span><br><span class="line">baby.r = prior_x;</span><br><span class="line">baby.c = prior_y;</span><br><span class="line">baby.cnt++;</span><br><span class="line"><span class="keyword">if</span> (baby.cnt == baby.size) &#123;</span><br><span class="line">baby.size++;</span><br><span class="line">baby.cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; prior_x, prior_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrey</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, prey;</span><br><span class="line">q.push(&#123; row, col &#125;);</span><br><span class="line">check[row][col] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> part_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 순회할 때마다 1초 증가</span></span><br><span class="line">part_time++;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; baby.size &gt;= <span class="built_in">map</span>[x][y] &amp;&amp; !check[x][y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (baby.size &gt; <span class="built_in">map</span>[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">prey.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">selectPrey(prey, q);</span><br><span class="line">time = part_time;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123; <span class="comment">// 아기 상어 정보</span></span><br><span class="line">baby.r = i;</span><br><span class="line">baby.c = j;</span><br><span class="line">baby.size = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEnd) &#123;</span><br><span class="line">findPrey(baby.r, baby.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>while (!q.empty()) q.pop();</code> 라인 때문에 시간초과가 걸린 것 같아 굳이 이럴 필요 없이 먹을 수 있는 물고기가 있다면 <code>selectPrey()</code> 를 호출하여 물고기를 선택하고 시간을 갱신해준 후 return하도록 하였다. 이러면 다시 <code>findPrey()</code> 를 호출하기에 업데이트 된 아기 상어 위치가 queue에 들어가고 작업을 수행한다. <code>q</code>를 비울 필요가 없어짐.</li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, time;</span><br><span class="line"><span class="keyword">bool</span> isEnd;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="comment">// 상좌우하</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shark</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, size, cnt= <span class="number">0</span>;</span><br><span class="line">&#125;baby;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPrey</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;prey)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> prior_x = n, prior_y = n;</span><br><span class="line"><span class="keyword">while</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = prey.front().first;</span><br><span class="line"><span class="keyword">int</span> y = prey.front().second;</span><br><span class="line">prey.pop();</span><br><span class="line"><span class="keyword">if</span> (x &lt; prior_x) &#123;</span><br><span class="line">prior_x = x;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == prior_x) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt; prior_y) &#123;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[baby.r][baby.c] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[prior_x][prior_y] = <span class="number">9</span>;</span><br><span class="line">baby.r = prior_x;</span><br><span class="line">baby.c = prior_y;</span><br><span class="line">baby.cnt++;</span><br><span class="line"><span class="keyword">if</span> (baby.cnt == baby.size) &#123;</span><br><span class="line">baby.size++;</span><br><span class="line">baby.cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrey</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, prey;</span><br><span class="line">q.push(&#123; row, col &#125;);</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">check[row][col] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> part_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 순회할 때마다 1초 증가</span></span><br><span class="line">part_time++;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; baby.size &gt;= <span class="built_in">map</span>[x][y] &amp;&amp; !check[x][y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (baby.size &gt; <span class="built_in">map</span>[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">prey.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!prey.empty()) &#123;</span><br><span class="line">selectPrey(prey);</span><br><span class="line">time += part_time;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123; <span class="comment">// 아기 상어 정보</span></span><br><span class="line">baby.r = i;</span><br><span class="line">baby.c = j;</span><br><span class="line">baby.size = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEnd) &#123;</span><br><span class="line">findPrey(baby.r, baby.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>코드<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, time;</span><br><span class="line"><span class="keyword">bool</span> isEnd;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="comment">// 상좌우하</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shark</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, size, cnt= <span class="number">0</span>;</span><br><span class="line">&#125;baby;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPrey</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;prey, <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> prior_x = n, prior_y = n;</span><br><span class="line"><span class="keyword">while</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = prey.front().first;</span><br><span class="line"><span class="keyword">int</span> y = prey.front().second;</span><br><span class="line">prey.pop();</span><br><span class="line"><span class="keyword">if</span> (x &lt; prior_x) &#123;</span><br><span class="line">prior_x = x;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == prior_x) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt; prior_y) &#123;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[baby.r][baby.c] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[prior_x][prior_y] = <span class="number">9</span>;</span><br><span class="line">baby.r = prior_x;</span><br><span class="line">baby.c = prior_y;</span><br><span class="line">baby.cnt++;</span><br><span class="line"><span class="keyword">if</span> (baby.cnt == baby.size) &#123;</span><br><span class="line">baby.size++;</span><br><span class="line">baby.cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; prior_x, prior_y &#125;);</span><br><span class="line"><span class="comment">/*printf("change %d\n");</span></span><br><span class="line"><span class="comment">for (int k = 0; k &lt; n; ++k) &#123;</span></span><br><span class="line"><span class="comment">for (int l = 0; l &lt; n; ++l) &#123;</span></span><br><span class="line"><span class="comment">printf("%d ", map[k][l]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrey</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, prey;</span><br><span class="line">q.push(&#123; row, col &#125;);</span><br><span class="line">check[row][col] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> part_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 순회할 때마다 1초 증가</span></span><br><span class="line">part_time++;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; baby.size &gt;= <span class="built_in">map</span>[x][y] &amp;&amp; !check[x][y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (baby.size &gt; <span class="built_in">map</span>[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">prey.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">selectPrey(prey, q);</span><br><span class="line">time = part_time;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123; <span class="comment">// 아기 상어 정보</span></span><br><span class="line">baby.r = i;</span><br><span class="line">baby.c = j;</span><br><span class="line">baby.size = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEnd) &#123;</span><br><span class="line">findPrey(baby.r, baby.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16236/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16235번 나무 재테크</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16235-나무-재테크&quot;&gt;&lt;a href=&quot;#16235-나무-재테크&quot; class=&quot;headerlink&quot; title=&quot;#16235. 나무 재테크&quot;&gt;&lt;/a&gt;#16235. 나무 재테크&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16235-나무-재테크"><a href="#16235-나무-재테크" class="headerlink" title="#16235. 나무 재테크"></a>#16235. 나무 재테크</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/16235" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>시뮬레이션 문제이다.</li><li>봄, 여름, 가을, 겨울에 맞게 작업을 수행하면 된다.</li><li>단 한 칸에 여러 개의 나무가 존재할 수 있다는 점에 주목하자.</li></ul><p>처음에 3차원 벡터로 해당 칸에 나무 정보를 저장하였지만 계절마다 작업을 수행할 때 상당히 비효율적이라 시간초과가 떴다.</p><p><strong>→ 문제의 조건을 잘 보면 답이 보인다. (항상 느끼는 거지만 어떤 자료구조를 선택할지가 중요)</strong></p><ol><li>나이가 어린 나무부터 양분을 먹는다. (해당 칸에 있는 나무 정보를 순회할 때 어린 나무부터 접근해야 한다.)</li><li>나무 정보를 처음에 입력받을 때 한 칸에 하나씩만 받는다.</li><li>나무가 추가될 때 나이가 1인 나무가 추가된다.</li><li>나이가 클수록 먼저 죽음(나이만큼 양분을 먹기 때문이다.)</li></ol><p>위 조건을 도합하면 <code>deque</code> 가 가장 적합하다. <code>deque&lt;int&gt; tree[10][10]</code><br>나이가 어린 나무가 앞에 즉, 오름차순으로 정렬되어 있어야 하는데, 처음에 각 칸에 하나씩 입력 받고 추가될 때 <strong>앞부분에 나무를 추가</strong>해주면 되기 때문이다. 죽는건 앞에서부터 탐색을 하다가 죽는 나무가 생기면 그 뒤부터 이미 죽은 나무가 되기에 죽을 나무 개수만 카운트하고 <strong>뒤에서부터 개수만큼 pop하면</strong> 되기 때문이다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, ans, diff;</span><br><span class="line"><span class="keyword">int</span> land[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">v.resize(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">v[i].resize(N);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">land[i][j] = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c, age;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; age;</span><br><span class="line">v[r<span class="number">-1</span>][c<span class="number">-1</span>].push_back(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 봄, 여름</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j].size() &gt; <span class="number">1</span>) sort(v[i][j].begin(), v[i][j].end());</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i][j].size(); ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] - v[i][j][k] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += v[i][j][k] / <span class="number">2</span>;</span><br><span class="line">v[i][j][k] = <span class="number">0</span>; <span class="comment">// 죽은 표시</span></span><br><span class="line">diff++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">land[i][j] -= v[i][j][k];</span><br><span class="line">v[i][j][k]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 가을, 겨울</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i][j].size(); ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">8</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> r = i + dx[dir];</span><br><span class="line"><span class="keyword">int</span> c = j + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (r &lt;= <span class="number">-1</span> || c &lt;= <span class="number">-1</span> || r &gt;= N || c &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line">v[r][c].push_back(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line"><span class="keyword">while</span> (K--) &#123;</span><br><span class="line">Task();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">ans += v[i][j].size();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans -= diff;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>시간초과</li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, ans;</span><br><span class="line"><span class="keyword">int</span> land[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">ans = M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">land[i][j] = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c, age;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; age;</span><br><span class="line">tree[r - <span class="number">1</span>][c - <span class="number">1</span>].push_back(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 봄, 여름</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i][j].empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, dead_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = tree[i][j].begin(); iter != tree[i][j].end(); ++iter) &#123;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] - *iter &lt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += (*iter) / <span class="number">2</span>;</span><br><span class="line">dead_num++;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">land[i][j] -= (*iter);</span><br><span class="line">(*iter)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; dead_num; ++k) tree[i][j].pop_back();</span><br><span class="line">land[i][j] += sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 가을, 겨울</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = tree[i][j].begin(); iter != tree[i][j].end(); ++iter) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*iter) % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">8</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> r = i + dx[dir];</span><br><span class="line"><span class="keyword">int</span> c = j + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (r &lt;= <span class="number">-1</span> || c &lt;= <span class="number">-1</span> || r &gt;= N || c &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line">tree[r][c].push_front(<span class="number">1</span>);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line"><span class="keyword">while</span> (K--) &#123;</span><br><span class="line">Task();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16234번 인구 이동</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16234-인구-이동&quot;&gt;&lt;a href=&quot;#16234-인구-이동&quot; class=&quot;headerlink&quot; title=&quot;#16234. 인구 이동&quot;&gt;&lt;/a&gt;#16234. 인구 이동&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Proble
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16234-인구-이동"><a href="#16234-인구-이동" class="headerlink" title="#16234. 인구 이동"></a>#16234. 인구 이동</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/16234" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><strong>BFS</strong></li></ul><p>N x N 크기의 배열을 전부 탐색하면서 check표시가 되어있지 않은 부분은 인구 이동이 가능한지 확인 작업이 수행된다.</p><p>작업 동안 누적 합과 연합에 포함된 나라 수를 계산해야 한다.</p><ol><li>queue가 비어있을 때까지 다음을 수행한다.</li><li>현재 위치에서 4방향 탐색 → 범위체크, 탐색할 위치가 미탐색인지 확인</li><li>탐색 가능하면 누적 합, 나라 수 계산, 종료되지 않게 flag 갱신, queue에 넣어준다.</li><li>만약 나라 수가 1보다 크면 누적합과 사람 수를 따로 저장한다.</li></ol><p>위 작업이 끝나면 이제 따로 저장한 누적합과 사람 수를 이용해 N x N 크기의 배열을 바꿔준다. (실질적 인구 이동)</p><p>만약 flag가 false 즉, 인구이동이 없다면 종료한다.</p><ul><li><strong>DFS</strong></li></ul><p>BFS보다 훨씬 빠르고 깔끔하며 명료하다. 처음에 BFS로 할 생각을 했던 것은 N x N 크기의 배열 값을 미리 바꾸면 인구 이동에 영향을 미치게 된다는 생각에 코드를 작성했었는데 생각해보니 한 번 탐색이 끝나면(BFS든 DFS든) check 표시 되어 있기에 영향을 주지 않고 한 번 탐색할 때 위치만 미리 벡터에 저장해주면 된다.</p><h3 id="BFS-1-Try"><a href="#BFS-1-Try" class="headerlink" title="BFS 1 Try"></a>BFS 1 Try</h3><ul><li>code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, L, R, idx, ans;</span><br><span class="line"><span class="keyword">bool</span> no_end;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">51</span>][<span class="number">51</span>]; <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="keyword">int</span> val[<span class="number">1251</span>][<span class="number">2</span>]; <span class="comment">// 값, 사람 수</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; N &amp;&amp; y &lt; N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movePeople</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">idx++; </span><br><span class="line"><span class="keyword">int</span> sum = <span class="built_in">map</span>[r][c], cnt = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">check[r][c] = idx;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">tie(x, y) = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; check[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &gt;= L &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &lt;= R) &#123;</span><br><span class="line">check[d_x][d_y] = idx;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">no_end = <span class="literal">true</span>;</span><br><span class="line">cnt++; sum += <span class="built_in">map</span>[d_x][d_y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">val[idx][<span class="number">0</span>] = sum;</span><br><span class="line">val[idx][<span class="number">1</span>] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">check[r][c] = <span class="number">0</span>;</span><br><span class="line">idx--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changePeople</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> no_move = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">map</span>[i][j] = val[check[i][j]][<span class="number">0</span>] / val[check[i][j]][<span class="number">1</span>];</span><br><span class="line">check[i][j] = <span class="number">0</span>; no_move = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!no_move) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;N, &amp;L, &amp;R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line">no_end = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j] &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">movePeople(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">changePeople();</span><br><span class="line">&#125; <span class="keyword">while</span> (no_end);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DFS-1-Try"><a href="#DFS-1-Try" class="headerlink" title="DFS 1 Try"></a>DFS 1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, L, R, sum, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">51</span>][<span class="number">51</span>]; </span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v; <span class="comment">// 위치 정보</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; N &amp;&amp; y &lt; N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">sum += <span class="built_in">map</span>[x][y];</span><br><span class="line">v.push_back(&#123; x, y &#125;);</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; !check[d_x][d_y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &gt;= L &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &lt;= R) &#123;</span><br><span class="line">dfs(d_x, d_y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> change = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">v.clear();</span><br><span class="line">dfs(i, j);</span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : v) &#123;</span><br><span class="line"><span class="built_in">map</span>[e.first][e.second] = sum / v.size();</span><br><span class="line">&#125;</span><br><span class="line">change = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> change;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;N, &amp;L, &amp;R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (task()) &#123; ans++; &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15686번 치킨 배달</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15686-치킨-배달&quot;&gt;&lt;a href=&quot;#15686-치킨-배달&quot; class=&quot;headerlink&quot; title=&quot;#15686. 치킨 배달&quot;&gt;&lt;/a&gt;#15686. 치킨 배달&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15686-치킨-배달"><a href="#15686-치킨-배달" class="headerlink" title="#15686. 치킨 배달"></a>#15686. 치킨 배달</h1><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 도시</li><li>0: 빈 칸, 1: 집, 2: 치킨 집</li><li>도시의 치킨 거리는 모든 집의 치킨 거리의 합</li><li>치킨 거리 ( 집: (r1, c1) 치킨집: (r2, c2) )<br>집과 가장 가까운 치킨집 사이의 거리를 말한다.</li></ul><script type="math/tex; mode=display">|r_1-r_2| +|c_1-c_2|</script><p><strong>Goal: 치킨집 중에서 최대 M개를 골랐을 때 도시의 치킨 거리 최솟값</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>치킨 집을 M개 고르는 모든 조합 구하기</li></ul><p>해당 집을 고르면 배열에 넣고 아니면 넣지 않음<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (select_idx == m) &#123;</span><br><span class="line">BFS 이용하여 치킨 거리 구하기</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>); <span class="comment">// 선택하지 않기</span></span><br><span class="line">select[select_idx++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>); <span class="comment">// 선택하기</span></span><br><span class="line">select_idx--; <span class="comment">// 다른 경우의 수를 위해 인덱스 빼주기 (중요)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>중요</strong>라고 되어있는 부분을 작성하지 않으면 모든 경우의 수를 구할 수 없다. 경우의 수가 꼬여버림. </p><p>4개 중에 2개를 고른다고 하면<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">comb(<span class="number">0</span>)</span><br><span class="line">comb(<span class="number">1</span>)</span><br><span class="line">comb(<span class="number">2</span>)</span><br><span class="line">comb(<span class="number">3</span>)</span><br><span class="line">...</span><br><span class="line">이런식으로 호출이 이루어지기에 (<span class="number">3</span>, <span class="number">2</span>) 경우가 먼저 완성된다.</span><br><span class="line">완성되고 BFS이용하여 치킨 거리 구하고 <span class="keyword">return</span>되면 select_idx를 빼준다.</span><br><span class="line">그럼 <span class="number">2</span>자리에 다른 경우가 넣어질 수 있다. (<span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><ul><li>각 조합에 대한 최소한의 치킨 거리 구하기</li></ul><p>BFS를 이용하여 한 칸씩 갈 때 1초 증가</p><p>그러다 1을 만나면 해당 초를 더 해준다.<br>BFS를 이용하면 동시에 1을 만나기에 time만 더해주어서는 안된다.<br>동시에 발견한 집의 수만큼 time을 더해주어야 한다.</p><p>모든 1을 만났으면 종료<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; select_idx; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); </span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>이 중 가장 최소인 치킨 거리 구하기</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3></li><li><p>컴파일 에러 (index라는 변수명은 기피하자…) <strong>select_idx</strong>로 변경</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, total_chicken, total_house, index, answer;</span><br><span class="line"><span class="keyword">int</span> city[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> select[<span class="number">13</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line">&#125;chicken[<span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); <span class="comment">// 선택한 치킨집 queue에 저장</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; <span class="comment">// M개를 선택하는 모든 경우의 수 구하기</span></span><br><span class="line"><span class="keyword">if</span> (index == m) &#123;</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select[index++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;city[i][j]);</span><br><span class="line"><span class="keyword">if</span> (city[i][j] == <span class="number">2</span>) &#123; <span class="comment">// 치킨집 정보 저장</span></span><br><span class="line">chicken[total_chicken].r = i;</span><br><span class="line">chicken[total_chicken++].c = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (city[i][j] == <span class="number">1</span>) total_house++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">answer = <span class="number">1e9</span>;</span><br><span class="line">combination(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, total_chicken, total_house, select_idx, answer;</span><br><span class="line"><span class="keyword">int</span> city[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> select[<span class="number">13</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line">&#125;chicken[<span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; select_idx; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); <span class="comment">// 선택한 치킨집 queue에 저장</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; <span class="comment">// M개를 선택하는 모든 경우의 수 구하기</span></span><br><span class="line"><span class="keyword">if</span> (select_idx == m) &#123;</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select[select_idx++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select_idx--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;city[i][j]);</span><br><span class="line"><span class="keyword">if</span> (city[i][j] == <span class="number">2</span>) &#123; <span class="comment">// 치킨집 정보 저장</span></span><br><span class="line">chicken[total_chicken].r = i;</span><br><span class="line">chicken[total_chicken++].c = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (city[i][j] == <span class="number">1</span>) total_house++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">answer = <span class="number">1e9</span>;</span><br><span class="line">combination(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15685번 드래곤 커브</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15685-드래곤-커브&quot;&gt;&lt;a href=&quot;#15685-드래곤-커브&quot; class=&quot;headerlink&quot; title=&quot;#15685. 드래곤 커브&quot;&gt;&lt;/a&gt;#15685. 드래곤 커브&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmic
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15685-드래곤-커브"><a href="#15685-드래곤-커브" class="headerlink" title="#15685. 드래곤 커브"></a>#15685. 드래곤 커브</h1><p><a href="https://www.acmicpc.net/problem/15685" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>좌표 평면</li><li>3가지 속성</li></ul><ol><li>시작 점</li><li>시작 방향<br>0:  x 좌표 증가 → 방향<br>1:  y 좌표 감소  ↑ 방향<br>2:  x 좌표 감소 ← 방향<br>3:  y 좌표 증가  ↓ 방향</li><li>세대</li></ol><ul><li>0세대: 길이가 1인 선분</li><li>1세대: 0세대 드래곤 커브 <strong>끝 점을 기준으로</strong> 시계 방향 90도 회전시켜 0세대 끝 점에 붙인 것</li><li>2세대: 1세대를 이용하여 1세대를 만든 것처럼 만든다.</li><li>N세대: N-1세대 커브를 끝 점 기준으로 90도 시계 방향 회전시킨 것을 붙인 것</li><li><p>입력</p><p>  드래곤 커브 개수 N (~20)<br>  x, y (드래곤 커브 시작 점) ~100<br>  d (시작 방향)<br>  g (세대) ~10</p></li></ul><p>드래곤 커브는 서로 겹칠 수 있다.</p><p><strong>Goal: 만들어진 드래곤 커브에서 정사각형 4개의 꼭짓점이 모두 드래곤 커브의 일부인 것의 개수를 구하기 (모양이 정사각형이 아니어도 4개의 꼭짓점만 만족하면 된다.)</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>끝점을 기준으로 시계방향 90도를 했을 때 각 방향의 이동은 다음과 같다.</li></ul><ol><li>0 → 1</li><li>1 → 2</li><li>2 → 3</li><li>3 → 0</li></ol><p>아래 그림 참고.</p><p><img src="https://user-images.githubusercontent.com/46062199/73121639-950a3900-3fbf-11ea-871d-edcf306df4a5.png" alt></p><ul><li>드래곤 커브를 그려주는 건 check 배열로 수행한다.<br>(겹쳐도 되니까 초기화할 필요 없다.)</li><li>방향만 배열에 저장해주면 된다.</li><li><p>끝점에서 이동을 수행하니 위치 좌표는 끝점만 알면된다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input : 3 3 0 1</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>) : 처음 시작 위치</span><br><span class="line">(<span class="number">4</span>, <span class="number">3</span>) : <span class="number">0</span>세대 <span class="comment">// 위치 좌표: (4, 3) 방향 0</span></span><br><span class="line">(<span class="number">4</span>, <span class="number">2</span>) : <span class="number">1</span>세대 <span class="comment">// 위치 좌표: (4, 2) 방향 0, 1</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>) : <span class="number">2</span>세대 <span class="comment">// 위치 좌표: (3, 2) -&gt; (3,1) 방향 0, 1, 2, 1</span></span><br></pre></td></tr></table></figure><p>2세대 설명: 1세대에서 방향이 [0, 1]로 저장되어 있다. 끝점부터 시작하기에 방향 1이 시계방향으로 90도 회전하면 방향 2가 된다. [0, 1, 2]<br>이후 0이 시계방향으로 90도 회전하면 방향 1이된다. [0, 1, 2, 1]</p></li><li><p>드래곤 커브 위의 규칙대로 그리기</p></li></ul><p>0세대 까지 그려놓고 (0세대가 아니라면) 1세대부터 그린다.</p><p>direction 배열에 위의 [0, 1, 2, 1]과 같은 값이 들어간다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> clockwise[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line"><span class="keyword">while</span>(g--) &#123;</span><br><span class="line"><span class="keyword">int</span> len = idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">d = clockwise[direction[i]];</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; MAX &amp;&amp; y &lt; MAX) &#123;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>4개의 꼭짓점 확인</li></ul><p>배열은 최대 100 x 100의 크기를 가지기에 0~99까지 check 값이 존재할 수 있다. (사실상 98까지만 확인하면 된다.)</p><pre><code>1 1   (0, 0)을 기준으로 오른쪽, 아래, 오른쪽 아래 대각선만 확인하면 된다.1 1</code></pre><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clockwise[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> direction[MAX*MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line"><span class="keyword">while</span>(g--) &#123;</span><br><span class="line"><span class="keyword">int</span> len = idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">d = clockwise[direction[i]];</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; MAX &amp;&amp; y &lt; MAX) &#123;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, x, y, d, g, answer = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x, &amp;y, &amp;d, &amp;g);</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line">draw(x, y, d, g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">99</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i + <span class="number">1</span>][j] &amp;&amp; check[i][j + <span class="number">1</span>] &amp;&amp; check[i + <span class="number">1</span>][j + <span class="number">1</span>]) answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15684번 사다리 조작</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15684-사다리-조작&quot;&gt;&lt;a href=&quot;#15684-사다리-조작&quot; class=&quot;headerlink&quot; title=&quot;#15684. 사다리 조작&quot;&gt;&lt;/a&gt;#15684. 사다리 조작&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15684-사다리-조작"><a href="#15684-사다리-조작" class="headerlink" title="#15684. 사다리 조작"></a>#15684. 사다리 조작</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="http://acmicpc.net/problem/15684" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>처음에 감이 안잡혀서 어떻게 풀지 막막했었다.</li><li>입력값을 보고 사다리 정보를 어떤 식으로 저장할건지가 첫 스타트이자 포인트다.<br>이렇게 data가 보여야 조합도 어떤식으로 구성할지 생각나기 때문이다.</li><li>작업은 2개로 나뉜다.<ol><li>조합 구하기</li><li>사다리 타기</li></ol></li><li>조합 구하기</li></ul><p>조합을 구하기 전에 입력값이 어떻게 들어오나 확인해보자.</p><p>a b가 입력되면 a행에 b열 사다리와 b+1열 사다리가 연결된다.<br>이를 array[a][b] = 1(사다리 있음)으로 표시하면 b+1로 갈 수 있다는 뜻이다.<br>반대로 b+1지점에서 array[a][b]값이 1인걸 확인하면 b로 갈 수 있다는 뜻이다.</p><p>이를 활용하여 조합을 구해보자.</p><p>모든 행의 1열부터 N-1열까지 탐색해야 한다.<br>단, 현재 위치뿐만 아니라 자신의 왼쪽, 오른쪽도 확인해야 한다. (연속으로 설치하지 못하기 때문)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>행 <span class="number">1</span>열 선택 시 다음 가능한 경우 (N에 표시하는 것은 의미 X - 입력값 생각)</span><br><span class="line"> <span class="number">1</span>행 - <span class="number">1</span>(x), <span class="number">2</span>(x), <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"> <span class="number">2</span>행 - <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"> ...</span><br><span class="line"> H행 - <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123; </span><br><span class="line"><span class="keyword">if</span> (visit[i][j]) <span class="keyword">continue</span>; <span class="comment">// 현재 확인</span></span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; visit[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 왼쪽 확인</span></span><br><span class="line"><span class="keyword">if</span> (visit[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 오른쪽 확인</span></span><br><span class="line">visit[i][j] = <span class="literal">true</span>; <span class="comment">// 선택 표시</span></span><br><span class="line">selectAll(i, cnt + <span class="number">1</span>); <span class="comment">// 다음 선택</span></span><br><span class="line">visit[i][j] = <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, H, ans;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">31</span>][<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ans = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; H;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;  <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">visit[a][b] = <span class="literal">true</span>; <span class="comment">// a행 b - b+1 사다리</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> current_num = j;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (visit[i][current_num]) &#123; <span class="comment">// 오른쪽 사다리로 이동</span></span><br><span class="line">current_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num &gt; <span class="number">1</span> &amp;&amp; visit[i][current_num <span class="number">-1</span>]) &#123; <span class="comment">// 왼쪽 사다리로 이동</span></span><br><span class="line">current_num--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current_num != j) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectAll</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Check()) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; cnt) ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123; <span class="comment">// 5번 사다리는 확인할 필요 없다. (입력값 생각)</span></span><br><span class="line"><span class="keyword">if</span> (visit[i][j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; visit[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visit[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">visit[i][j] = <span class="literal">true</span>;</span><br><span class="line">selectAll(i, cnt + <span class="number">1</span>);</span><br><span class="line">visit[i][j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">selectAll(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">4</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15683번 감시</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15683-감시&quot;&gt;&lt;a href=&quot;#15683-감시&quot; class=&quot;headerlink&quot; title=&quot;#15683. 감시&quot;&gt;&lt;/a&gt;#15683. 감시&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;he
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15683-감시"><a href="#15683-감시" class="headerlink" title="#15683. 감시"></a>#15683. 감시</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/15683" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>설치된 CCTV 위치정보, 번호 얻기</li><li>설치된 CCTV 방향 정하기 (상하좌우: 0123)<br>1번 cctv: 0, 1, 2, 3<br>2번 cctv: (0, 1), (2, 3)<br>3번 cctv: (0, 3), (1, 3), (0, 2), (1, 2)<br>4번 cctv: (2, 0, 3), (0, 3, 1), (2, 1, 3), (0, 2, 1)<br>5번 cctv: (0, 1, 2, 3)<br>묶음을 왼쪽에서부터 0, 1, 2, 3이라고 정하고 (여기서 5번은 0만 갖게된다.)<br><code>selected</code> 배열에 넣어준다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectDirection</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">task(); <span class="comment">// 방향대로 감시 시작</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> type = cctv[idx].type;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">2</span>) &#123; <span class="comment">// 2번 cctv는 최대 1 값만 가능</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">5</span>) &#123; <span class="comment">// 5번 cctv는 최대 0만 가능</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">selected[idx] = i;</span><br><span class="line">selectDirection(idx + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[idx] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>선택된 방향대로 감시 시작</li></ol></li></ol><ul><li>범위를 벗어나거나 벽을 만나면 감시를 중단한다. 그전까지는 정해진 방향대로 계속 check 표시를 한다.</li><li>check는 check되어 있지 않고 맵의 값이 0인 경우에만 진행한다.<br>탐색된 곳의 개수를 구하기 위해서이다.</li><li><p>전체 칸의 개수 - 탐색된 곳의 개수 - 벽의 개수 - cctv 개수 = 사각지대 개수</p><ol><li>사각지대가 최소가 되도록 갱신한다.</li></ol></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, wall_cnt, ans;</span><br><span class="line"><span class="keyword">int</span> room[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> selected[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> type_two[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> type_three[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> type_four[<span class="number">4</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, type;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;INFO&gt; cctv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) selected[i] = <span class="number">-1</span>;</span><br><span class="line">ans = <span class="number">1e9</span>; wall_cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">9</span>][<span class="number">9</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="keyword">int</span> type, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cctv.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> dir = selected[i];</span><br><span class="line"><span class="keyword">int</span> x = cctv[i].x, y = cctv[i].y;</span><br><span class="line"><span class="keyword">int</span> d_x, d_y;</span><br><span class="line"><span class="keyword">if</span> (cctv[i].type == <span class="number">1</span>) &#123;</span><br><span class="line">d_x = x + dx[dir];</span><br><span class="line">d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[dir];</span><br><span class="line">d_y += dy[dir];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_two[dir][j]];</span><br><span class="line">d_y = y + dy[type_two[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_two[dir][j]];</span><br><span class="line">d_y += dy[type_two[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_three[dir][j]];</span><br><span class="line">d_y = y + dy[type_three[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_three[dir][j]];</span><br><span class="line">d_y += dy[type_three[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_four[dir][j]];</span><br><span class="line">d_y = y + dy[type_four[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_four[dir][j]];</span><br><span class="line">d_y += dy[type_four[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[j];</span><br><span class="line">d_y = y + dy[j];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[j];</span><br><span class="line">d_y += dy[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res = (n * m) - res - wall_cnt - cctv.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (res &lt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectDirection</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">task();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> type = cctv[idx].type;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">selected[idx] = i;</span><br><span class="line">selectDirection(idx + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[idx] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; room[i][j];</span><br><span class="line"><span class="keyword">if</span> (room[i][j] &gt;= <span class="number">1</span> &amp;&amp; room[i][j] &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">cctv.push_back(&#123; i, j, room[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (room[i][j] == <span class="number">6</span>) wall_cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">selectDirection(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
