<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JUST WRITE IT.</title>
    <link>https://doyuni.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 25 Jan 2020 13:35:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>백준 17472번 다리 만들기 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17472/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17472/</guid>
      <pubDate>Sat, 25 Jan 2020 08:05:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17472-다리-만들기-2&quot;&gt;&lt;a href=&quot;#17472-다리-만들기-2&quot; class=&quot;headerlink&quot; title=&quot;#17472. 다리 만들기 2&quot;&gt;&lt;/a&gt;#17472. 다리 만들기 2&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17472-다리-만들기-2"><a href="#17472-다리-만들기-2" class="headerlink" title="#17472. 다리 만들기 2"></a>#17472. 다리 만들기 2</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17472" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>각 섬에 고유 번호 붙이기(오름차순)<br>섬끼리 연결을 해야하기 때문에 이를 식별해주어야 한다.<br>BFS or DFS를 이용하여 구할 수 있고 필자는 BFS를 사용하였다.</li><li>각 섬들마다 연결시키는 모든 경우를 구하되, 각 경우마다 연결이 가능한지 거리를 측정하면서 확인한다.<br>→ 연결이 가능하면 해당 다리를 저장한다.(어디에서 어디로 연결되고 그럴 때 최소 비용 저장)</li><li>다리를 선택해서 1개 이상 선택했을 때부터 모든 섬을 연결 시킬 수 있는지 확인한다.<br>→ 모든 섬을 연결할 수 있으면 최소비용 갱신</li></ol><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><ul><li><p>완탐 코드 보기</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, total_island, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">10</span>][<span class="number">10</span>]; <span class="comment">// 섬에 번호 붙일 때 방문 체크 용도</span></span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">7</span>][<span class="number">7</span>]; <span class="comment">// dist[a][b]: a에서 b로 가는 경로 비용, 기본값 1000</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Island_pos[<span class="number">11</span>]; <span class="comment">// Island_pos[i]: i번 섬의 모든 좌표</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;&gt; bridge_list; <span class="comment">// a, b, c : a-&gt;b의 비용이 c인 다리 목록</span></span><br><span class="line"><span class="keyword">bool</span> connect[<span class="number">7</span>][<span class="number">7</span>]; <span class="comment">// a, b와의 연결 상태 확인 용도</span></span><br><span class="line"><span class="keyword">bool</span> connect_island[<span class="number">7</span>]; <span class="comment">// i번 섬의 방문 체크 용도</span></span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">7</span> * <span class="number">7</span>]; <span class="comment">// 간선의 모든 경우를 담기 위함( N(N-1)/2 )</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> id)</span> </span>&#123; <span class="comment">// 섬에 번호 붙이기</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">visited[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[x][y] = id;</span><br><span class="line">Island_pos[id].push_back(&#123; x, y &#125;);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; N &amp;&amp; d_y &lt; M) &#123;</span><br><span class="line"><span class="keyword">if</span> (visited[d_x][d_y] || <span class="built_in">map</span>[d_x][d_y] != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">visited[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[d_x][d_y] = id;</span><br><span class="line">Island_pos[id].push_back(&#123; d_x, d_y &#125;);</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Go</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dir, <span class="keyword">int</span> len, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123; <span class="comment">// 거리 측정하기</span></span><br><span class="line"><span class="keyword">int</span> nx = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= N || ny &gt;= M) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == end) &#123;</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123; <span class="comment">// 거리 2이상인 경우만 연결 가능</span></span><br><span class="line"><span class="keyword">if</span> (dist[start][end] &gt; len) &#123; <span class="comment">// 최소 거리 갱신</span></span><br><span class="line">dist[start][end] = len;</span><br><span class="line">dist[end][start] = len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == <span class="number">0</span>) Go(nx, ny, dir, len + <span class="number">1</span>, start, end);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeBridge</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Start에 해당되는 섬의 모든 좌표를 end에 해당되는 섬까지 도달해본다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Island_pos[start].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = Island_pos[start][i].first;</span><br><span class="line"><span class="keyword">int</span> y = Island_pos[start][i].second;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &gt; <span class="number">-1</span> &amp;&amp; ny &gt; <span class="number">-1</span> &amp;&amp; nx &lt; N &amp;&amp; ny &lt; M) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == <span class="number">0</span>) Go(nx, ny, dir, <span class="number">1</span>, start, end); <span class="comment">// 한 방향으로 가야함, 0인 지점 방문이니 거리 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetDistance</span><span class="params">()</span> </span>&#123; <span class="comment">// 섬들끼리 1:1로 연결시키는 모든 경우</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; total_island; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; total_island; j++)</span><br><span class="line">&#123;</span><br><span class="line">MakeBridge(i, j);</span><br><span class="line"><span class="keyword">if</span> (dist[i][j] == <span class="number">1000</span>) <span class="keyword">continue</span>; <span class="comment">// 연결 불가능한 경우</span></span><br><span class="line">bridge_list.push_back(&#123; &#123;i, j&#125;, dist[i][j] &#125;); <span class="comment">// (i -&gt; j : 비용) 저장</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckConnect</span><span class="params">()</span> </span>&#123; <span class="comment">// 조건에 맞게 모든 섬이 연결되어있는지 확인</span></span><br><span class="line"><span class="built_in">memset</span>(connect, <span class="literal">false</span>, <span class="keyword">sizeof</span>(connect));</span><br><span class="line"><span class="built_in">memset</span>(connect_island, <span class="literal">false</span>, <span class="keyword">sizeof</span>(connect_island));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bridge_list.size(); i++) <span class="comment">// 선택한 다리 연결 표시</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) &#123; <span class="comment">// 연결 표시 (x-&gt;y, y-&gt;x)</span></span><br><span class="line"><span class="keyword">int</span> x = bridge_list[i].first.first;</span><br><span class="line"><span class="keyword">int</span> y = bridge_list[i].first.second;</span><br><span class="line">connect[x][y] = connect[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </span><br><span class="line">q.push(<span class="number">1</span>); <span class="comment">// 1번 섬(섬은 최소 2개)</span></span><br><span class="line">connect_island[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 1번 섬 방문 체크 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Island_cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 모든 섬 방문가능한지 체크하는 부분</span></span><br><span class="line"><span class="keyword">int</span> cur = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (Island_cnt == total_island - <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; total_island; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur == i) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (connect[cur][i] &amp;&amp; connect_island[i] == <span class="literal">false</span>) &#123; <span class="comment">// 현재 섬과 i번 섬이 연결되어있고 i번 섬을 방문하지 않았을 때</span></span><br><span class="line">connect_island[i] = <span class="literal">true</span>;</span><br><span class="line">q.push(i);</span><br><span class="line">Island_cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectBridge</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt, <span class="keyword">int</span> sum)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (CheckConnect() == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; sum) ans = sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; bridge_list.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] == <span class="literal">true</span>) <span class="keyword">continue</span>;</span><br><span class="line">selected[i] = <span class="literal">true</span>;</span><br><span class="line">SelectBridge(i, cnt + <span class="number">1</span>, sum + bridge_list[i].second);</span><br><span class="line">selected[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">dist[i][j] = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="number">0</span> &amp;&amp; !visited[i][j]) BFS(i, j, id++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">total_island = id;</span><br><span class="line">GetDistance();</span><br><span class="line">SelectBridge(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">1e9</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3></li><li><p>위 방식에서 1, 2까지는 동일</p></li><li>크루스칼 알고리즘을 사용한다.</li></ul><h3 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer"></a>Answer</h3><ul><li>코드 보기<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; d;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bridge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> from;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> N, M, total, ans = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> parent[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;d&gt; island[<span class="number">7</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;Bridge&gt; bridge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Go</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; island[from].size(); i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x = island[from][i].first;</span><br><span class="line"><span class="keyword">int</span> y = island[from][i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x; <span class="keyword">int</span> ny = y;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (len &lt;= cur) <span class="keyword">break</span>;</span><br><span class="line">nx += dx[dir];</span><br><span class="line">ny += dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= N || ny &gt;= M) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">cur++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] == to) &#123;</span><br><span class="line"><span class="keyword">if</span> (cur &lt; <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (len &gt; cur) len = cur;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetDistance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Bridge b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= total; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= total; ++j) &#123;</span><br><span class="line">b.from = i; b.to = j;</span><br><span class="line">b.len = Go(i, j);</span><br><span class="line"><span class="keyword">if</span> (b.len == <span class="number">10000</span>) <span class="keyword">continue</span>;</span><br><span class="line">bridge.push_back(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;d&gt; q;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">visited[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] = id;</span><br><span class="line">island[id].push_back(&#123; r, c &#125;);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= N || ny &gt;= M) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[nx][ny] != <span class="number">1</span> || visited[nx][ny]) <span class="keyword">continue</span>;</span><br><span class="line">visited[nx][ny] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[nx][ny] = id;</span><br><span class="line">island[id].push_back(&#123; nx, ny &#125;);</span><br><span class="line">q.push(&#123; nx, ny &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span> || visited[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">BFS(i, j, id++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">total = id - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= total; ++i) &#123;</span><br><span class="line">parent[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(Bridge a, Bridge b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.len &lt; b.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindParent</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (parent[idx] == idx) <span class="keyword">return</span> idx;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> FindParent(parent[idx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p1 = FindParent(parent[from]);</span><br><span class="line"><span class="keyword">int</span> p2 = FindParent(parent[to]);</span><br><span class="line"><span class="keyword">if</span> (p1 &lt; p2) &#123;</span><br><span class="line">parent[to] = p1;</span><br><span class="line">parent[p2] = p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">parent[from] = p2;</span><br><span class="line">parent[p1] = p2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= total; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (FindParent(parent[i]) != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sort(bridge.begin(), bridge.end(), cmp);</span><br><span class="line"><span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bridge.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> from = bridge[i].from; <span class="keyword">int</span> to = bridge[i].to;</span><br><span class="line"><span class="keyword">if</span>(FindParent(from) == FindParent(to)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Union(from, to);</span><br><span class="line">cost += bridge[i].len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (CheckConnection()) ans = cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MakeLabel();</span><br><span class="line">GetDistance();</span><br><span class="line">Kruskal();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">10000</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17472/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17471번 게리맨더링</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17471/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17471/</guid>
      <pubDate>Sat, 25 Jan 2020 08:05:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17471-게리맨더링&quot;&gt;&lt;a href=&quot;#17471-게리맨더링&quot; class=&quot;headerlink&quot; title=&quot;#17471. 게리맨더링&quot;&gt;&lt;/a&gt;#17471. 게리맨더링&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Proble
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17471-게리맨더링"><a href="#17471-게리맨더링" class="headerlink" title="#17471. 게리맨더링"></a>#17471. 게리맨더링</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17471" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>city[n][j] = n번째 구역과 인접한구역 j는 1로 표시, 아니면 0으로 표시</li></ul><ol><li>한 지역의 구역을 정한다. (중복x, 오름차순으로) - (1,2,3) 과 (2,1,3)은 같은 조합이기에</li><li><p>정한 구역이 이어져 있는지 DFS를 통해 확인한다.</p><ol><li>방문표시</li><li><p>전체 구역 탐색하여 해당 지역에 속하고 인접할 때, 해당 구역 탐색</p><p>DFS 시작 지점은 해당 지역에서 한 구역으로 지정한다. (그래야 모두 인접해있는지 확인 가능)</p><p>2개의 지역 모두 DFS 탐색 후에 check 표시가 모두 되어있지 않으면 <code>return</code>한다. </p><p>규칙에 맞게 구역이 나누어져 있지 않다는 뜻이기 때문이다.</p></li></ol></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> people[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> city[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getDifference</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a_sum = <span class="number">0</span>, b_sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) a_sum += people[i];</span><br><span class="line"><span class="keyword">else</span> b_sum += people[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="built_in">abs</span>(a_sum - b_sum);</span><br><span class="line"><span class="keyword">if</span> (res &lt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">check[n] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (status == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] &amp;&amp; city[n][i]) &#123;</span><br><span class="line">check[i] = <span class="literal">true</span>;</span><br><span class="line">DFS(i, status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!selected[i] &amp;&amp; city[n][i]) &#123;</span><br><span class="line">check[i] = <span class="literal">true</span>;</span><br><span class="line">DFS(i, status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) &#123;</span><br><span class="line">DFS(i, <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!selected[i]) &#123;</span><br><span class="line">DFS(i, <span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[i]) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">getDifference();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectArea</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= N) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">Solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) <span class="keyword">continue</span>;</span><br><span class="line">selected[i] = <span class="literal">true</span>;</span><br><span class="line">SelectArea(i, cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; people[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt; <span class="built_in">cin</span> &gt;&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">city[i][n] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectArea(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">1e9</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17471/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17406번 배열 돌리기 4</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17406/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17406/</guid>
      <pubDate>Sat, 25 Jan 2020 08:05:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17406-배열-돌리기-4&quot;&gt;&lt;a href=&quot;#17406-배열-돌리기-4&quot; class=&quot;headerlink&quot; title=&quot;#17406. 배열 돌리기 4&quot;&gt;&lt;/a&gt;#17406. 배열 돌리기 4&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a h
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17406-배열-돌리기-4"><a href="#17406-배열-돌리기-4" class="headerlink" title="#17406. 배열 돌리기 4"></a>#17406. 배열 돌리기 4</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17406" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>회전 연산 순서를 정한다. (0, 1, 2) 와 (1, 0, 2)는 다른 순서이다!</li><li>가장 바깥쪽 부터 시계방향으로 각 원소들을 회전시킨다.<br>가장 바깥쪽 크기는 <strong>2*s+1</strong>이다.</li><li>시작 지점부터 시작해서 +1씩, 크기는 -2씩 변경하며 회전시킨다.</li><li>중앙 지점으 만나면 더이상 회전시킬 수 없으므로 종료한다.</li><li>회전은 아래와 같은 방법으로 진행한다.</li><li><strong><a href="https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17144/">“미세먼지 안녕!”</a></strong> 문제에서 설명한 배열 회전 방법과 동일하다.<br>여기선 시계방향이므로 2번째 그림이 이에 해당한다.</li></ul><p><img src="https://user-images.githubusercontent.com/46062199/73121950-14990780-3fc2-11ea-9391-c99ce7698c5c.png" alt></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> copy_arr[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> order[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">6</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Inst</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, s;</span><br><span class="line">&#125;ins[<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CopyArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line">copy_arr[i][j] = arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line">sum += copy_arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt; sum) res = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rotate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CopyArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> len = ins[order[i]].s * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">// 가장 바깥쪽 크기</span></span><br><span class="line"><span class="keyword">int</span> mid_r = ins[order[i]].r; <span class="comment">// 중심 좌표</span></span><br><span class="line"><span class="keyword">int</span> mid_c = ins[order[i]].c;</span><br><span class="line"><span class="keyword">int</span> start_r = ins[order[i]].r - ins[order[i]].s; <span class="comment">// 시작 좌표</span></span><br><span class="line"><span class="keyword">int</span> start_c = ins[order[i]].c - ins[order[i]].s;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mid_r == start_r &amp;&amp; mid_c == start_c) <span class="keyword">break</span>; <span class="comment">// 중심점이면 종료</span></span><br><span class="line"><span class="keyword">int</span> temp = copy_arr[start_r][start_c]; <span class="comment">// 시작지점 값만 빼놓기</span></span><br><span class="line"><span class="keyword">int</span> end_r = start_r + len - <span class="number">1</span>; <span class="comment">// 끝 행</span></span><br><span class="line"><span class="keyword">int</span> end_c = start_c + len - <span class="number">1</span>; <span class="comment">// 끝 열</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = start_r; r &lt; start_r + len - <span class="number">1</span>; ++r) &#123; <span class="comment">// (1)</span></span><br><span class="line">copy_arr[r][start_c] = copy_arr[r + <span class="number">1</span>][start_c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = start_c; c &lt; start_c + len - <span class="number">1</span>; ++c) &#123; <span class="comment">// (2)</span></span><br><span class="line">copy_arr[end_r][c] = copy_arr[end_r][c + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = end_r; r &gt; start_r; --r) &#123; <span class="comment">// (3)</span></span><br><span class="line">copy_arr[r][end_c] = copy_arr[r - <span class="number">1</span>][end_c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = end_c; c &gt; start_c + <span class="number">1</span>; --c) &#123; <span class="comment">// (4)</span></span><br><span class="line">copy_arr[start_r][c] = copy_arr[start_r][c - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">copy_arr[start_r][start_c + <span class="number">1</span>] = temp; <span class="comment">// 빼놓은 값 넣기</span></span><br><span class="line">start_r++; start_c++; len -= <span class="number">2</span>; <span class="comment">// 시작지점 및 길이 갱신</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = getSum();</span><br><span class="line"><span class="keyword">if</span> (ans &gt; res) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectOrder</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == K) &#123;</span><br><span class="line">Rotate();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) <span class="keyword">continue</span>;</span><br><span class="line">order[cnt] = i;</span><br><span class="line">selected[i] = <span class="literal">true</span>;</span><br><span class="line">SelectOrder(cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c, s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; s;</span><br><span class="line">ins[i] = &#123; r<span class="number">-1</span>, c<span class="number">-1</span>, s &#125;;</span><br><span class="line">&#125;</span><br><span class="line">SelectOrder(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17406/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17298번 오큰수</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17298/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17298/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:55 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17298-오큰수&quot;&gt;&lt;a href=&quot;#17298-오큰수&quot; class=&quot;headerlink&quot; title=&quot;#17298. 오큰수&quot;&gt;&lt;/a&gt;#17298. 오큰수&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17298-오큰수"><a href="#17298-오큰수" class="headerlink" title="#17298. 오큰수"></a>#17298. 오큰수</h1><p><a href="https://www.acmicpc.net/problem/17298" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>길이가 N인 수열</li></ul><p><strong>Goal: 각 원소에 대해 자신보다 오른쪽에 있으면서 크고 가장 왼쪽에 위치한 수를 구하여라<br>없다면 -1 출력</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><code>Stack</code>을 사용한다.</li><li>단계는 문제에 예시로 있는 입력 값으로 설명을 하겠다.</li></ul><p><img src="https://user-images.githubusercontent.com/46062199/73121964-5d50c080-3fc2-11ea-91f9-8600e7cb92e5.png" alt="Untitled"></p><p>오른쪽 순서로 단계가 진행된다.</p><ol><li>원소의 최댓값은 최대 1000000(백만)이기에 +1값을 MAX로 주었다.</li><li>수열의 맨 오른쪽부터 진행한다.</li></ol><ul><li>사이클<ol><li>비교 대상인 입력값과 스텍에 있는 값을 비교하여 스텍에 있는 값이 클 때까지 작업(비교)을 수행한다.</li><li>만약 MAX가 스텍의 top이라면 이미 자신보다 큰 수가 없다는 뜻이기에 -1를 출력값에 넣어준다.</li><li>그게 아니라면 스텍의 top은 항상 현재 입력값보다 크면서 가장 오른쪽에 있는 수이다. 그렇기에 top을 출력값에 넣어준다.</li></ol></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; a, ans, num;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, input;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">num.push(input);</span><br><span class="line">&#125;</span><br><span class="line">a.push(MAX);</span><br><span class="line"><span class="keyword">while</span>(!num.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span>(a.top() &lt;= num.top()) a.pop(); <span class="comment">// 같을 때도 pop을 해주어야 다음 큰 값을 비교가능</span></span><br><span class="line"><span class="keyword">if</span>(a.top() == MAX) ans.push(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span> ans.push(a.top());</span><br><span class="line">a.push(num.top()); num.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!ans.empty()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, ans.top());</span><br><span class="line">ans.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17298/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17281번 ⚾(야구공)</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17281/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17281/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17281-⚾&quot;&gt;&lt;a href=&quot;#17281-⚾&quot; class=&quot;headerlink&quot; title=&quot;#17281. ⚾&quot;&gt;&lt;/a&gt;#17281. ⚾&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;header
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17281-⚾"><a href="#17281-⚾" class="headerlink" title="#17281. ⚾"></a>#17281. ⚾</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17281" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>시뮬레이션 문제이다. 문제의 설명에 맞게 잘 구현하면 큰 어려움은 없는 문제</p><ol><li>타자의 순번을 정한다. (1번 선수는 4번 타자로 고정) → (1, 2, 3)과 (2, 1, 3)은 다른 순서임</li><li>1이닝부터 N이닝까지 경기를 진행한다.</li><li>각 이닝별 진행 흐름<ol><li>이전 순번 바로 다음부터 순번이 진행된다. (첫 이닝은 1번부터(인덱스상 0))</li><li>아웃이 3번이 될 때까지 진행한다.</li><li>1루, 2루, 3루에 선수가 있는지 표시하는 <code>is_there</code> 변수를 사용하여 진행한다.</li></ol></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, ans;</span><br><span class="line"><span class="keyword">int</span> info[<span class="number">50</span>][<span class="number">9</span>]; <span class="comment">// 각 이닝별 타자 정보</span></span><br><span class="line"><span class="keyword">int</span> order[<span class="number">9</span>]; <span class="comment">// 타자 순번</span></span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>, score = <span class="number">0</span>; <span class="comment">// 순번 인덱스, 현재 점수</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> inning = <span class="number">0</span>; inning &lt; N; ++inning) &#123;</span><br><span class="line"><span class="keyword">bool</span> is_there[<span class="number">3</span>] = &#123; <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span> &#125;; <span class="comment">// 1, 2, 3루</span></span><br><span class="line"><span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (info[inning][order[idx]] == <span class="number">0</span>) &#123; <span class="comment">// 아웃</span></span><br><span class="line">out++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (info[inning][order[idx]] == <span class="number">1</span>) &#123; <span class="comment">// 1루타</span></span><br><span class="line"><span class="keyword">if</span> (is_there[<span class="number">2</span>]) &#123; <span class="comment">// 3루타 -&gt; 홈</span></span><br><span class="line">score++; is_there[<span class="number">2</span>] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="number">-1</span>; --i) &#123; <span class="comment">// 각각 1 전진</span></span><br><span class="line"><span class="keyword">if</span> (is_there[i]) &#123;</span><br><span class="line">is_there[i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">is_there[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">is_there[<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 1루 전진</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (info[inning][order[idx]] == <span class="number">2</span>) &#123; <span class="comment">// 2루타</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; ++i) &#123; <span class="comment">// 2루, 3루 -&gt; 홈</span></span><br><span class="line"><span class="keyword">if</span> (is_there[i]) &#123;</span><br><span class="line">score++; is_there[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_there[<span class="number">0</span>]) &#123; <span class="comment">// 1루 -&gt; 3루</span></span><br><span class="line">is_there[<span class="number">2</span>] = <span class="literal">true</span>; is_there[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">is_there[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 2루 전진</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (info[inning][order[idx]] == <span class="number">3</span>) &#123; <span class="comment">// 3루타</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123; <span class="comment">// 1, 2, 3루 -&gt; 홈</span></span><br><span class="line"><span class="keyword">if</span> (is_there[i]) &#123;</span><br><span class="line">score++; is_there[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">is_there[<span class="number">2</span>] = <span class="literal">true</span>; <span class="comment">// 3루 전진</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 홈런</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (is_there[i]) &#123;</span><br><span class="line">score++; is_there[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">score++;</span><br><span class="line">&#125;</span><br><span class="line">idx = (idx + <span class="number">1</span>) % <span class="number">9</span>; <span class="comment">// 다음 순번</span></span><br><span class="line"><span class="keyword">if</span> (out == <span class="number">3</span>) <span class="keyword">break</span>; <span class="comment">// 3진 아웃</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; score) ans = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectOrder</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">9</span>) &#123;</span><br><span class="line">Game();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) cnt++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i]) <span class="keyword">continue</span>; </span><br><span class="line">selected[i] = <span class="literal">true</span>;</span><br><span class="line">order[cnt] = i;</span><br><span class="line">SelectOrder(cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; info[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">selected[<span class="number">0</span>] = <span class="literal">true</span>; order[<span class="number">3</span>] = <span class="number">0</span>; <span class="comment">// 1번 선수 4번째 고정</span></span><br><span class="line">SelectOrder(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17281/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17144번 미세먼지 안녕!</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17144/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17144/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17144-미세먼지-안녕&quot;&gt;&lt;a href=&quot;#17144-미세먼지-안녕&quot; class=&quot;headerlink&quot; title=&quot;#17144. 미세먼지 안녕!&quot;&gt;&lt;/a&gt;#17144. 미세먼지 안녕!&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17144-미세먼지-안녕"><a href="#17144-미세먼지-안녕" class="headerlink" title="#17144. 미세먼지 안녕!"></a>#17144. 미세먼지 안녕!</h1><p><a href="https://www.acmicpc.net/problem/17144" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>공기청정기 항상 왼쪽 열 (두 행 차지)</li><li>그외 미세먼지나 빈 칸이 존재</li><li>1초 동안 일어나는 일</li></ul><ol><li>미세먼지 확산<br>4방향(상하좌우)<br>공기청정기나 경계를 벗어나는 칸은 확산이 일어나지 않음<br>미세먼지 양/5 만큼 확산된다. (각 방향에 대해 한 칸)<br>확산된 후 남은 미세먼지 양은<br>현재 미세먼지 양 - 현재 미세먼지 양/5 * 확산된 방향 개수</li><li>공기청정기 작동 (바람)<br>위쪽 → 반시계방향 순환<br>아래쪽 → 시계방향 순환<br>미세먼지가 바람의 방향대로 한 칸씩 이동<br>미세먼지가 공기청정기로 들어가면 모두 정화</li></ol><p><strong>Goal: T초가 지난 후 남아있는 미세먼지의 양</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>1초가 지날 때마다 다음과 같은 작업이 수행된다.</p><ol><li>미세먼지 확산</li><li>바람으로 인한 이동</li></ol><ul><li>미세먼지 확산</li></ul><p>5 이상인 값만 확산이 일어난다.<br>확산이 일어나기 전에 queue에 이 값과 이 값이 있는 위치를 저장해놓는다.<br>(값을 저장해야 올바른 값을 구할 수 있음)<br>queue에서 하나씩 꺼내어 4가지 방향을 확인한다.<br>(공기청정기 있는 곳과 경계를 넘는 곳은 불가능)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r;</span><br><span class="line"><span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> mid = q.front().value;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y] += mid / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] -= mid / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>확산이 가능하다면 연산을 수행한다.</p><ul><li>바람으로 인한 이동</li></ul><p>아래 순서대로 map을 바꿔준다. </p><p><img src="https://user-images.githubusercontent.com/46062199/73121950-14990780-3fc2-11ea-9391-c99ce7698c5c.png" alt></p><p>공기청정기로 들어간다는 것은 굳이 값을 바꿔줄 필요 없이 전의 값이 이를 덮어주기만 하면 된다. (1번째) → <strong>아래 2번 화살표가 잘못되었습니다….(반대입니다)</strong><br>공기청정기에서 나아가는 바람으로(4번째) 값을 0으로 채워주어야 한다.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, clean_row = clean[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 위쪽</span></span><br><span class="line"><span class="keyword">for</span> (i = clean_row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= clean_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 아래쪽</span></span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">clean_row = clean[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row + <span class="number">2</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[total_row - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[total_row - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = total_row - <span class="number">2</span>; i &gt;= clean_row; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> total_row, total_col, time;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clean[<span class="number">2</span>]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;info&gt; q;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; total_row &amp;&amp; c &lt; total_col) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r;</span><br><span class="line"><span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> mid = q.front().value;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y] += mid / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] -= mid / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, clean_row = clean[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= clean_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">clean_row = clean[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row + <span class="number">2</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[total_row - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[total_row - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = total_row - <span class="number">2</span>; i &gt;= clean_row; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer, idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;total_row, &amp;total_col, &amp;time);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][<span class="number">0</span>] == <span class="number">-1</span>) clean[idx++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (time--) &#123;</span><br><span class="line">answer = <span class="number">0</span>;</span><br><span class="line">spread();</span><br><span class="line">wind();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>) answer += <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 케이스는 다 맞다는데 틀렸단다…ㅎ</p><p>그 이유는 MAX를 50이기 때문이다. (응? 뭔 🙄🤔…다음부터 넉넉히 잡자..)<br>MAX 51로 고쳐주니까 바로 정답 처리 되었다.</p><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> total_row, total_col, time;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clean[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;info&gt; q;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; total_row &amp;&amp; c &lt; total_col) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r;</span><br><span class="line"><span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> mid = q.front().value;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y] += mid / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] -= mid / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, clean_row = clean[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= clean_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">clean_row = clean[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row + <span class="number">2</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[total_row - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[total_row - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = total_row - <span class="number">2</span>; i &gt;= clean_row; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer, idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;total_row, &amp;total_col, &amp;time);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][<span class="number">0</span>] == <span class="number">-1</span>) clean[idx++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (time--) &#123;</span><br><span class="line">answer = <span class="number">0</span>;</span><br><span class="line">spread();</span><br><span class="line">wind();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>) answer += <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>코드<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> total_row, total_col, time;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clean[<span class="number">2</span>]; <span class="comment">// 공기청정기 위치(무조건 0열)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;info&gt; q;</span><br><span class="line"><span class="comment">// 상하좌우</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; total_row &amp;&amp; c &lt; total_col) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1. 미세먼지 확산</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r;</span><br><span class="line"><span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> mid = q.front().value;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[x][y] += mid / <span class="number">5</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c] -= mid / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 바람으로 미세먼지 이동</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 위쪽 ( 반시계 작업은 거꾸로 수행, 그래야 편함)</span></span><br><span class="line"><span class="keyword">int</span> i, j, clean_row = clean[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123; <span class="comment">// 공기청정기에 들어가면 사라지니까 바로 이전건 그냥 덮어쓰면 됨</span></span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">0</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= clean_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 아래쪽 ( 시계 )</span></span><br><span class="line">clean_row = clean[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = clean_row + <span class="number">2</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i - <span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[total_row - <span class="number">1</span>][j - <span class="number">1</span>] = <span class="built_in">map</span>[total_row - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = total_row - <span class="number">2</span>; i &gt;= clean_row; --i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i + <span class="number">1</span>][total_col - <span class="number">1</span>] = <span class="built_in">map</span>[i][total_col - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = total_col - <span class="number">2</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="built_in">map</span>[clean_row][j + <span class="number">1</span>] = <span class="built_in">map</span>[clean_row][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[clean_row][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer, idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;total_row, &amp;total_col, &amp;time);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][<span class="number">0</span>] == <span class="number">-1</span>) clean[idx++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (time--) &#123;</span><br><span class="line">answer = <span class="number">0</span>;</span><br><span class="line">spread();</span><br><span class="line">wind();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"change\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_row; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_col; ++j) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>) answer += <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt;= <span class="number">5</span>) q.push(&#123; i, j, <span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>바람에 의한 이동 확인용 test case<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">7 8 1</span><br><span class="line">2 4 0 0 0 0 0 9</span><br><span class="line">3 0 0 0 3 0 0 8</span><br><span class="line">-1 3 5 0 0 0 22 0</span><br><span class="line">-1 8 0 0 0 0 0 3</span><br><span class="line">3 0 0 0 0 10 43 5</span><br><span class="line">4 0 5 0 15 0 0 0</span><br><span class="line">2 1 40 0 0 0 20 3</span><br><span class="line">&#x2F;&#x2F; output</span><br><span class="line">Change</span><br><span class="line">4 0 0 0 0 0 9 8</span><br><span class="line">2 0 0 0 3 0 0 0</span><br><span class="line">-1 0 3 5 0 0 0 22</span><br><span class="line">-1 0 8 0 0 0 0 0</span><br><span class="line">4 0 0 0 0 10 43 3</span><br><span class="line">2 0 5 0 15 0 0 5</span><br><span class="line">1 40 0 0 0 20 3 0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">6 6 1</span><br><span class="line"> 5  0 3  4 1 2</span><br><span class="line"> 0  0 7  0 0 3</span><br><span class="line">-1 10 0 46 0 2</span><br><span class="line">-1  0 0  0 0 4</span><br><span class="line"> 3  0 0  0 0 3</span><br><span class="line"> 1  3 1  2 4 2</span><br><span class="line">change!!</span><br><span class="line"> 3 1   4  4 1 2</span><br><span class="line"> 1 3   3 10 0 3</span><br><span class="line">-1 4  12 10 9 2</span><br><span class="line">-1 2   0  9 0 4</span><br><span class="line"> 3 0   0  0 0 3</span><br><span class="line"> 1 3   1  2 4 2</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17144/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17143번 낚시왕</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17143/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17143/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17143-낚시왕&quot;&gt;&lt;a href=&quot;#17143-낚시왕&quot; class=&quot;headerlink&quot; title=&quot;#17143. 낚시왕&quot;&gt;&lt;/a&gt;#17143. 낚시왕&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17143-낚시왕"><a href="#17143-낚시왕" class="headerlink" title="#17143. 낚시왕"></a>#17143. 낚시왕</h1><p><a href="https://www.acmicpc.net/problem/17143" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>R x C 크기의 격자판</li><li>낚시왕 위치 (0, 0)</li><li>1초 동안 일어나는 일<ol><li>낚시왕 오른쪽으로 한 칸 이동<br>(낚시왕이 먼저 이동하기에 상어가 이동하기 전 잡히게 된다.)</li><li>낚시왕이 열에 있는 상어 중 가장 가까운 상어를 잡는다.</li><li>상어 이동<br>상어 : 속도와 크기를 가짐<br>경계를 넘게되면 방향을 반대로 바꿈<br><strong>이동을 마친 후에</strong> 상어가 한 칸에 여러 마리 있으면, 가장 큰 상어가 나머지 상어들을 모두 먹음(사라짐)</li></ol></li></ul><p><strong>Goal: 낚시왕이 잡은 상어 크기의 합</strong></p><ul><li><p>입력</p><p>  R : ~100<br>  C : ~100<br>  M(상어 수) : ~10000<br>  r, c : 위치 ~R, ~C<br>  s : 속력 ~1000<br>  d : 이동방향 1~4 상하우좌<br>  z : 크기 ~10000</p></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>필자는 인덱스를 0부터 계산하였기에…이를 모두 신경쓰느라 🐕고생<br>그냥 1부터 신경쓰는게 편할 수도 있다. (입력 받을 때도 신경써주어야함…)</li><li>상어 정보 (MAX는 100)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> row, col, speed, direction, size;</span><br><span class="line"><span class="keyword">bool</span> death = <span class="literal">false</span>;</span><br><span class="line">&#125;sharks[MAX*MAX];</span><br></pre></td></tr></table></figure>상어의 현재 위치, 방향, 크기, 사라졌는지 유무가 저장된다.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(열의 수: 처음부터~열의 끝까지 이동) </span><br><span class="line">catchShark() <span class="comment">//  1. 상어를 잡는다</span></span><br><span class="line">moveShark() <span class="comment">//   2. 상어가 이동한다.</span></span><br><span class="line">updateMap() <span class="comment">//   3. 이동을 마친 상어들 map에 반영(먹히면 사라지도록)</span></span><br></pre></td></tr></table></figure></li><li><code>catchShark()</code><br>해당 열을 탐색하다가 상어를 발견하면 답에 크기를 더해주고 리턴</li><li><code>moveShark()</code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">주기 : <span class="number">2</span> * (전체 행이나 열의 크기<span class="number">-1</span>)</span><br><span class="line"><span class="comment">// ex 방향 -&gt; 전체 열의 크기: 4, 상어는 (1, 2)에 있다고 가정할 때</span></span><br><span class="line">위치:     <span class="number">2</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">방향:    -&gt; &lt;- &lt;- &lt;- -&gt; -&gt; -&gt; &lt;- &lt;- &lt;- -&gt; -&gt; -&gt; &lt;-</span><br><span class="line">이동거리: <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> </span><br><span class="line"></span><br><span class="line">주기가 <span class="number">2</span> * <span class="number">3</span> = <span class="number">6</span>으로 이동거리가 <span class="number">6</span>마다 같은 위치를 반복하고 있음</span><br><span class="line">방향은 <span class="number">0</span>이나 전체 열의 크기<span class="number">-1</span>에 위치할 때 바뀜</span><br><span class="line">위치는 방향에 맞게 이동해주면 됨</span><br><span class="line"></span><br><span class="line">방향</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>  <span class="comment">// 상하 우좌</span></span><br><span class="line"><span class="number">1</span> &lt;-&gt; <span class="number">2</span> (<span class="number">1</span>일 때 <span class="number">2</span>, <span class="number">2</span>일 때 <span class="number">1</span>)</span><br><span class="line"><span class="number">3</span> &lt;-&gt; <span class="number">4</span> (<span class="number">3</span>일 때 <span class="number">4</span>, <span class="number">4</span>일 때 <span class="number">3</span>)</span><br><span class="line">현재 방향을 <span class="number">2</span>로 나눴을 때 </span><br><span class="line">나머지가 <span class="number">0</span>이면 현재 방향에서 <span class="number">1</span>을 빼주고</span><br><span class="line">아니면 <span class="number">1</span>을 더해주면 바뀐 방향을 구할 수 있다.</span><br></pre></td></tr></table></figure></li><li><code>updateMap()</code></li></ul><ol><li>map을 초기화 해준다. (이동한 상어의 위치를 새로 반영하기 위해)</li><li>해당 위치에 상어가 있을 때와 없을 때를 구분해서 처리를 해준다.</li></ol><p>초기에 입력값을 반영하기 위해, 입력을 모두 받고 한 번 호출해준다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r, c, m, idx, answer;</span><br><span class="line"><span class="comment">// 상하우좌</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="comment">// 상어 정보</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> row, col, speed, direction, size;</span><br><span class="line"><span class="keyword">bool</span> death = <span class="literal">false</span>;</span><br><span class="line">&#125;sharks[MAX*MAX];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX][<span class="number">2</span>]; <span class="comment">// 상어가 존재한다면 해당 상어 크기와 해당 상어가 몇 번째 상어인지</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">catchShark</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col][<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">sharks[<span class="built_in">map</span>[i][col][<span class="number">1</span>]].death = <span class="literal">true</span>;</span><br><span class="line">answer += sharks[<span class="built_in">map</span>[i][col][<span class="number">1</span>]].size;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeDirection</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[idx].direction % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">sharks[idx].direction--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sharks[idx].direction++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveShark</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> period = <span class="number">2</span> * end;</span><br><span class="line"><span class="keyword">int</span> move = sharks[idx].speed % period;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; move; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[idx].direction &lt;= <span class="number">2</span>) &#123; <span class="comment">// 상하</span></span><br><span class="line"><span class="keyword">if</span> ((sharks[idx].row == end &amp;&amp; sharks[idx].direction == <span class="number">2</span>) ||</span><br><span class="line">(sharks[idx].row == <span class="number">0</span> &amp;&amp; sharks[idx].direction == <span class="number">1</span>)) &#123;</span><br><span class="line">changeDirection(idx);</span><br><span class="line">&#125;</span><br><span class="line">sharks[idx].row += dx[sharks[idx].direction - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 우좌</span></span><br><span class="line"><span class="keyword">if</span> ((sharks[idx].col == end &amp;&amp; sharks[idx].direction == <span class="number">3</span>) ||</span><br><span class="line">(sharks[idx].col == <span class="number">0</span> &amp;&amp; sharks[idx].direction == <span class="number">4</span>)) &#123;</span><br><span class="line">changeDirection(idx);</span><br><span class="line">&#125;</span><br><span class="line">sharks[idx].col += dy[sharks[idx].direction<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123; <span class="comment">// map 초기화</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[i][j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[i].death) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> r = sharks[i].row;</span><br><span class="line"><span class="keyword">int</span> c = sharks[i].col;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[r][c][<span class="number">0</span>] != <span class="number">0</span>) &#123; <span class="comment">// 해당 위치에 상어가 있다면</span></span><br><span class="line"><span class="keyword">if</span> (sharks[i].size &gt; <span class="built_in">map</span>[r][c][<span class="number">0</span>]) &#123;</span><br><span class="line">sharks[<span class="built_in">map</span>[r][c][<span class="number">1</span>]].death = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">0</span>] = sharks[i].size;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sharks[i].death = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 해당 위치에 상어가 없을 때</span></span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">0</span>] = sharks[i].size;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;r, &amp;c, &amp;m);</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;row);</span><br><span class="line">sharks[idx].row = row - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;col);</span><br><span class="line">sharks[idx].col = col - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx].speed);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx].direction);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx++].size);</span><br><span class="line">&#125;</span><br><span class="line">updateMap(); <span class="comment">// 초기 map update</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; ++i) &#123;</span><br><span class="line">catchShark(i); <span class="comment">// 상어 잡기</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123; <span class="comment">// 상어 이동</span></span><br><span class="line"><span class="keyword">if</span> (sharks[j].death) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (sharks[j].direction &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">moveShark(j, r<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">moveShark(j, c<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">updateMap(); <span class="comment">// 이동한 상어 위치 반영</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>자꾸 for문에서 <code>i</code>나 <code>j</code>가 아닌 r, c로 고정값을 두어서…이런 실수는 진짜진짜 조심하자.</li></ul><h3 id="For-Debug"><a href="#For-Debug" class="headerlink" title="For Debug"></a>For Debug</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r, c, m, idx, answer;</span><br><span class="line"><span class="comment">// 상하우좌</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="comment">// 상어 정보</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> row, col, speed, direction, size;</span><br><span class="line"><span class="keyword">bool</span> death = <span class="literal">false</span>;</span><br><span class="line">&#125;sharks[MAX*MAX];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX][<span class="number">2</span>]; <span class="comment">// 상어가 존재한다면 해당 상어 크기와 해당 상어가 몇 번째 상어인지</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">catchShark</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*printf("%d번째\n", col); // map 확인</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; r; ++i) &#123;</span></span><br><span class="line"><span class="comment">for (int j = 0; j &lt; c; ++j) &#123;</span></span><br><span class="line"><span class="comment">printf("%d ", map[i][j][0]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col][<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">sharks[<span class="built_in">map</span>[i][col][<span class="number">1</span>]].death = <span class="literal">true</span>;</span><br><span class="line">answer += sharks[<span class="built_in">map</span>[i][col][<span class="number">1</span>]].size;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeDirection</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[idx].direction % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">sharks[idx].direction--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sharks[idx].direction++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveShark</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> period = <span class="number">2</span> * end;</span><br><span class="line"><span class="keyword">int</span> move = sharks[idx].speed % period;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; move; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[idx].direction &lt;= <span class="number">2</span>) &#123; <span class="comment">// 상하</span></span><br><span class="line"><span class="keyword">if</span> ((sharks[idx].row == end &amp;&amp; sharks[idx].direction == <span class="number">2</span>) ||</span><br><span class="line">(sharks[idx].row == <span class="number">0</span> &amp;&amp; sharks[idx].direction == <span class="number">1</span>)) &#123;</span><br><span class="line">changeDirection(idx);</span><br><span class="line">&#125;</span><br><span class="line">sharks[idx].row += dx[sharks[idx].direction - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 우좌</span></span><br><span class="line"><span class="keyword">if</span> ((sharks[idx].col == end &amp;&amp; sharks[idx].direction == <span class="number">3</span>) ||</span><br><span class="line">(sharks[idx].col == <span class="number">0</span> &amp;&amp; sharks[idx].direction == <span class="number">4</span>)) &#123;</span><br><span class="line">changeDirection(idx);</span><br><span class="line">&#125;</span><br><span class="line">sharks[idx].col += dy[sharks[idx].direction<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[i][j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[i].death) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> r = sharks[i].row;</span><br><span class="line"><span class="keyword">int</span> c = sharks[i].col;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[r][c][<span class="number">0</span>] != <span class="number">0</span>) &#123; <span class="comment">// 해당 위치에 상어가 있다면</span></span><br><span class="line"><span class="keyword">if</span> (sharks[i].size &gt; <span class="built_in">map</span>[r][c][<span class="number">0</span>]) &#123;</span><br><span class="line">sharks[<span class="built_in">map</span>[r][c][<span class="number">1</span>]].death = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">0</span>] = sharks[i].size;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sharks[i].death = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 해당 위치에 상어가 없을 때</span></span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">0</span>] = sharks[i].size;</span><br><span class="line"><span class="built_in">map</span>[r][c][<span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;r, &amp;c, &amp;m);</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;row);</span><br><span class="line">sharks[idx].row = row - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;col);</span><br><span class="line">sharks[idx].col = col - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx].speed);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx].direction);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sharks[idx++].size);</span><br><span class="line">&#125;</span><br><span class="line">updateMap();</span><br><span class="line"><span class="comment">/*for (int i = 0; i &lt; m; ++i) &#123; // 입력 확인</span></span><br><span class="line"><span class="comment">printf("%d %d %d %d %d\n", sharks[i].row, sharks[i].col, sharks[i].speed, sharks[i].direction, sharks[i].size);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; ++i) &#123;</span><br><span class="line">catchShark(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (sharks[j].death) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (sharks[j].direction &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">moveShark(j, r<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">moveShark(j, c<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">updateMap();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17143/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17142번 연구소 3</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17142/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17142/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17142-연구소-3&quot;&gt;&lt;a href=&quot;#17142-연구소-3&quot; class=&quot;headerlink&quot; title=&quot;#17142. 연구소 3&quot;&gt;&lt;/a&gt;#17142. 연구소 3&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Proble
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17142-연구소-3"><a href="#17142-연구소-3" class="headerlink" title="#17142. 연구소 3"></a>#17142. 연구소 3</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17142" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>퍼트릴 M개의 바이러스를 선택한다. (DFS)<br>중복을 허용하지 않는 조합이다.</li><li>선택한 바이러스를 퍼트리다. (BFS)<br>4 방향으로 탐색을 하되, 빈 칸 또는 바이러스가 있는 곳이어야 한다.</li><li>dist라는 배열에 시간을 저장한다.<br>단, 모서리에 있는 바이러스에서 탐색이 끝난 경우 시간을 1 빼주어야 한다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> selected[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; virus;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">50</span>][<span class="number">50</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">50</span>][<span class="number">50</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : selected) &#123;</span><br><span class="line"><span class="keyword">if</span> (e != <span class="number">-1</span>) &#123;</span><br><span class="line">q.push(&#123; virus[e].first, virus[e].second &#125;);</span><br><span class="line">visit[virus[e].first][virus[e].second] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &lt; <span class="number">0</span> || d_y &lt; <span class="number">0</span> || d_x &gt;= N || d_y &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">1</span> || visit[d_x][d_y]) <span class="keyword">continue</span>;</span><br><span class="line">visit[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">dist[d_x][d_y] = dist[x][y] + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (dist[i][j] != <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span> || i == N - <span class="number">1</span> || j == N - <span class="number">1</span>)</span><br><span class="line">dist[i][j]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!visit[i][j] &amp;&amp; <span class="built_in">map</span>[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (dist[i][j] &gt; time) time = dist[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; time) ans = time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectVirus</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == M) &#123;</span><br><span class="line">Spread();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; virus.size(); ++i) &#123;</span><br><span class="line">selected[i] = i;</span><br><span class="line">SelectVirus(i+<span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">bool</span> no_zero = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>) virus.push_back(&#123; i, j &#125;);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>) no_zero = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (no_zero) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">memset</span>(selected, <span class="number">-1</span>, <span class="keyword">sizeof</span>(selected));</span><br><span class="line">SelectVirus(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans != <span class="number">1e9</span>) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17142/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17140번 이차원 배열과 연산</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17140/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17140/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17140-이차원-배열과-연산&quot;&gt;&lt;a href=&quot;#17140-이차원-배열과-연산&quot; class=&quot;headerlink&quot; title=&quot;#17140. 이차원 배열과 연산&quot;&gt;&lt;/a&gt;#17140. 이차원 배열과 연산&lt;/h1&gt;&lt;h3 id=&quot;Probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17140-이차원-배열과-연산"><a href="#17140-이차원-배열과-연산" class="headerlink" title="#17140. 이차원 배열과 연산"></a>#17140. 이차원 배열과 연산</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17140" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>시뮬레이션 문제이다. (항상 자료구조를 뭘 사용할지 잘 판단하자.)</li><li>여기서는 <strong>map</strong>과 <strong>priority queue</strong>를 사용하였다.</li><li>map의 쓰임</li></ul><p>&lt;수, 등장 횟수&gt;를 저장하기 위해 쓰인다. 처음에 1차원 배열로 cnt[수]=등장 횟수로 하려 했지만, 이렇게 되면 매번 100번 for문을 연산해야 한다고 느껴 map을 이용해 바로 접근이 가능하도록 하였다.</p><ul><li>priority queue의 쓰임</li></ul><p>R연산 또는 C연산 중에 생성되는 정렬된 값들을 저장하기 위해 쓰인다. 연산자를 오버로딩하여 삽입 시 정렬 순위를 정해주었다.<br>원래 우선순위 큐는 기본적으로 내림차순으로 정렬되어 있다. (pair라면 첫 번째 기준, 첫 번째 원소가 같다면 두 번째 원소 내림차순 정렬)</p><p>그렇기에 따로 정해주었는데 그럴 필요 없이 <strong>-를 붙여 저장하면 오름차순으로 정렬된다는 것을 깨닫고…(유레카!!)</strong></p><p>*아래 코드는 그러진 않았다.</p><ul><li>해당 수를 카운트할 때 중요한 것은 카운트가 끝나면 <strong>해당 배열의 값을 0으로 바꾼다</strong>는 것이다. 그래야 행이나 열의 크기가 줄어들 때 영향을 받지 않고 연산을 정상적으로 수행할 수 있다.</li><li>그 외는 문제 그대로 구현하면 된다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r, c, k, total_r, total_c;</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">100</span>][<span class="number">100</span>]; <span class="comment">// 1 ~ 100</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Info</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> num, count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Info &amp;v1, <span class="keyword">const</span> Info &amp;v2) &#123;</span><br><span class="line"><span class="keyword">if</span> (v1.count == v2.count) <span class="keyword">return</span> v1.num &gt; v2.num;</span><br><span class="line"><span class="keyword">return</span> v1.count &gt; v2.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; k;</span><br><span class="line">total_r = total_c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_r; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_c; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt;= <span class="number">100</span>; ++t) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[r - <span class="number">1</span>][c - <span class="number">1</span>] == k) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Info&gt; pq;</span><br><span class="line"><span class="keyword">if</span> (total_r &gt;= total_c) &#123; <span class="comment">// R 연산</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_r; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_c; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt.count(A[i][j]) == <span class="number">0</span>) cnt[A[i][j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cnt[A[i][j]]++;</span><br><span class="line">A[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : cnt) &#123;</span><br><span class="line">pq.push(&#123; e.first, e.second &#125;);</span><br><span class="line">&#125;</span><br><span class="line">cnt.clear();</span><br><span class="line"><span class="keyword">int</span> len = pq.size() * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += <span class="number">2</span>) &#123;</span><br><span class="line">A[i][j] = pq.top().num; A[i][j + <span class="number">1</span>] = pq.top().count;</span><br><span class="line">pq.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (total_c &lt; len) total_c = len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// C 연산</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_c; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; total_r; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (A[j][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt.count(A[j][i]) == <span class="number">0</span>) cnt[A[j][i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cnt[A[j][i]]++;</span><br><span class="line">A[j][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : cnt) &#123;</span><br><span class="line">pq.push(&#123; e.first, e.second &#125;);</span><br><span class="line">&#125;</span><br><span class="line">cnt.clear();</span><br><span class="line"><span class="keyword">int</span> len = pq.size() * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j += <span class="number">2</span>) &#123;</span><br><span class="line">A[j][i] = pq.top().num; A[j + <span class="number">1</span>][i] = pq.top().count;</span><br><span class="line">pq.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (total_r &lt; len) total_r = len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">Task();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17140/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17136번 색종이 붙이기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17136/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17136/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17136-색종이-붙이기&quot;&gt;&lt;a href=&quot;#17136-색종이-붙이기&quot; class=&quot;headerlink&quot; title=&quot;#17136. 색종이 붙이기&quot;&gt;&lt;/a&gt;#17136. 색종이 붙이기&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17136-색종이-붙이기"><a href="#17136-색종이-붙이기" class="headerlink" title="#17136. 색종이 붙이기"></a>#17136. 색종이 붙이기</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17136" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>DFS + BackTracking을 사용하여 푼다.<br>(처음에 BFS+Greedy를 이용해 풀었다가 틀렸다…반례가 존재)</li><li>10 x 10 크기의 모든 배열에서 모든 지점을 탐색한다.<ul><li>탐색 횟수가 100이라면 모든 지점을 탐색한 경우라 값을 갱신하고 종료한다.</li><li>행과 열은 0 → 100개의 원소들에 맞게 계산</li><li>이미 <code>ans</code> 가 지금까지 구한 개수(<code>cnt</code>) 보다 크면 종료 (BackTracking)</li><li>해당 지점이 1이면 색종이 크기가 큰 5부터 검사 시작<ul><li>해당 크기가 가능하면 붙이고 다음 경우 탐색<br>탐색이 끝난 경우 원래대로 돌려놓아야 모든 경우 탐색이 가능하다.</li></ul></li><li>해당 지점이 0이면 다음 번째 원소 탐색</li></ul></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> type[<span class="number">5</span>] = &#123;<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span> &#125;; <span class="comment">// 1 2 3 4 5 종류</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; x + size; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt; y + size; ++j) &#123;</span><br><span class="line"><span class="built_in">map</span>[i][j] = status;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x + size &gt; <span class="number">10</span> || y + size &gt; <span class="number">10</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 범위 밖</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; x + size; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt; y + size; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">100</span>) &#123; <span class="comment">// 모든 경우를 탐색한 경우 (총 100개)</span></span><br><span class="line"><span class="keyword">if</span> (ans &gt; cnt) ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = n / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = n % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (ans &lt;= cnt) <span class="keyword">return</span>; <span class="comment">// BackTracking</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &gt; <span class="number">0</span>; --i) &#123; <span class="comment">// 크기 5부터 시작</span></span><br><span class="line"><span class="keyword">if</span> (type[i<span class="number">-1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Check(x, y, i)) &#123;</span><br><span class="line">type[i - <span class="number">1</span>]--;</span><br><span class="line">Update(x, y, i, <span class="number">0</span>); <span class="comment">// 색종이 붙이기</span></span><br><span class="line">DFS(n+<span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">Update(x, y, i, <span class="number">1</span>); <span class="comment">// 색종이 다시 때기</span></span><br><span class="line">type[i - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> DFS(n + <span class="number">1</span>, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">DFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">100</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17136/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17135번 캐슬 디펜스</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17135/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17135/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:21 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17135-캐슬-디펜스&quot;&gt;&lt;a href=&quot;#17135-캐슬-디펜스&quot; class=&quot;headerlink&quot; title=&quot;#17135. 캐슬 디펜스&quot;&gt;&lt;/a&gt;#17135. 캐슬 디펜스&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17135-캐슬-디펜스"><a href="#17135-캐슬-디펜스" class="headerlink" title="#17135. 캐슬 디펜스"></a>#17135. 캐슬 디펜스</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/17135" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>궁수 3명의 위치를 지정한다. (중복x, 오름차순 순열조합)</li><li>적이 사라질 때까지(<strong>=궁수가 0번째 행으로 이동할 때까지</strong>) 게임을 진행한다.<ol><li>궁수는 가장 가까운 위치의 적을 공격해야 하며, 여럿이면 왼쪽의 적부터 공격한다. 또한 동시에 공격이 가능하다(=위의 조건을 만족하는 같은 적을 공격한다.)</li><li>공격이 끝나면 배열을 바꾸지 않고 궁수의 위치를 이동시킨다. (위로)<br><code>step</code> 변수를 두어 범위를 좁혀간다.</li></ol></li></ol><p>가까운 적을 먼저 찾아 공격하기 위해 BFS 탐색을 사용한다.</p><ul><li>각 궁수별로 <code>queue</code> 를 만들어 자신의 위치를 저장하고 탐색 시작 (최대 D까지)</li><li>궁수가 적을 공격할 경우 다음 궁수에게 차례를 넘긴다. (즉, 공격하면 자신의 턴 끝=탐색 끝)</li><li><code>check array</code>를 사용해 공격한 적일 경우 해당 <code>step + 1</code>의 값을 준다. (step이 0부터 시작, check는 0으로 초기화 되어있기에)</li><li><code>step</code>을 이용해 <code>check</code>에 값을 준 이유는 다음 <code>step</code>에서 궁수의 위치가 이동될 때 이전 턴에서 공격 당해 제외된 적인지 아닌지를 판단하기 위함이다. (step의 값이 변하니까 중복되지 않게 탐색 가능)</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>궁수는 가장 가까운 위치의 적을 공격, 가까운 적이 여럿이면 왼쪽 우선 그리고 동시에 공격 가능하다는 조건을 충족하지 못 했다. → BFS를 이용하기로 결정<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, D, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> archer[<span class="number">3</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDistance</span><span class="params">(<span class="keyword">int</span> a_x, <span class="keyword">int</span> a_y, <span class="keyword">int</span> b_x, <span class="keyword">int</span> b_y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(a_x - b_x) + <span class="built_in">abs</span>(a_y - b_y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line"><span class="keyword">int</span> attack_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - step - <span class="number">1</span>; i &gt;= (N -step) - D &amp;&amp; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = attack_cnt; k &lt; <span class="number">3</span>; ++k) &#123; <span class="comment">// 3명의 궁수</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (D &gt;= getDistance(i, j, N - step, archer[k])</span><br><span class="line">&amp;&amp; <span class="built_in">map</span>[i][j] == <span class="number">1</span> &amp;&amp; !check[i][j]) &#123; <span class="comment">// 공격 개시</span></span><br><span class="line">res++;</span><br><span class="line">check[i][j] = <span class="literal">true</span>;</span><br><span class="line">attack_cnt++;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">// 한 번만 공격 가능</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">step++;</span><br><span class="line"><span class="keyword">if</span> (N - step - <span class="number">1</span> &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; res) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectPosition</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) &#123;</span><br><span class="line">Game();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (archer[cnt] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">archer[cnt] = i;</span><br><span class="line">SelectPosition(i + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">archer[cnt] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; D;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectPosition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, D, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> archer[<span class="number">3</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">3</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>, res = <span class="number">0</span>; <span class="comment">// step은 1턴이 끝날 때 이동을 위함</span></span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123; <span class="comment">// 궁수 각 3명에 대하여</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">q.push(&#123; N - step, archer[i] &#125;); <span class="comment">// 궁수 현재 위치부터 시작</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D; ++j) &#123; <span class="comment">// 최대 D까지만큼만 탐색</span></span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">bool</span> end_flag = <span class="literal">false</span>; <span class="comment">// 적을 공격했을 때 종료 flag</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">3</span>; ++dir) &#123; <span class="comment">// 왼 위 오 순서로 탐색 시작</span></span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; N - step &amp;&amp; d_y &lt; M) &#123; <span class="comment">// N - step은 궁수 위치</span></span><br><span class="line"><span class="keyword">if</span> (d_x &lt; N - step - D) <span class="keyword">continue</span>; <span class="comment">// [N - step - D, N-step) 탐색 범위</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">1</span> &amp;&amp; check[d_x][d_y] == <span class="number">0</span>) &#123; <span class="comment">// 처음 적을 공격한 경우</span></span><br><span class="line">res++;</span><br><span class="line">check[d_x][d_y] = step + <span class="number">1</span>; <span class="comment">// step을 옮겼을 때 중복 방지를 위함</span></span><br><span class="line">end_flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">1</span> &amp;&amp; check[d_x][d_y] == step + <span class="number">1</span>) &#123; <span class="comment">// 동시에 적을 공격한 경우</span></span><br><span class="line">end_flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 적을 발견하지 못 한 경우</span></span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (end_flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (end_flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">step++;</span><br><span class="line"><span class="keyword">if</span> (N - step - <span class="number">1</span> &lt; <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; res) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectPosition</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) &#123;</span><br><span class="line">Game();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (archer[cnt] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">archer[cnt] = i;</span><br><span class="line">SelectPosition(i + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">archer[cnt] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; D;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectPosition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17135/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 17070번 파이프 옮기기 1</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17070/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17070/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;17070-파이프-옮기기-1&quot;&gt;&lt;a href=&quot;#17070-파이프-옮기기-1&quot; class=&quot;headerlink&quot; title=&quot;#17070. 파이프 옮기기 1&quot;&gt;&lt;/a&gt;#17070. 파이프 옮기기 1&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="17070-파이프-옮기기-1"><a href="#17070-파이프-옮기기-1" class="headerlink" title="#17070. 파이프 옮기기 1"></a>#17070. 파이프 옮기기 1</h1><p><a href="https://www.acmicpc.net/problem/17070" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>파이프는 2개의 연속된 칸을 차지</li><li>회전이 가능 (3가지: 수평선, 수직선, 대각선(4칸 차지))</li></ul><p><strong>Goal: (0, 0) 과 (0, 1)에 위치한 하나의 파이프를 (N, N)으로 옮기는 방법의 개수<br>불가능한 경우 0</strong> </p><ul><li>파이프 옮기기</li></ul><p>오른쪽, 아래, 오른쪽 아래 대각선 방향으로 옮길 수 있음<br>옮길 때 45도 회전 가능<br>벽에 닿으면 안됨</p><ul><li>가로(수평) → 오른쪽 or 오른쪽 아래 대각선</li><li>세로(수직) → 아래 or 오른쪽 아래 대각선</li><li>오른쪽 아래 대각선 → 3가지 모두 가능</li></ul><p><strong>입력</strong></p><pre><code>N: 3~16빈칸 0 벽은 1// 예제0 0 1 0 0 0 0 0 0 0 0 00 0 0 0-&gt; 0맨 처음 파이프는 (0,0), (0,1) 즉 가로이기에 가능한 방향인오른쪽, 오른쪽 아래 대각선으로 옮길 수 없다.</code></pre><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>현재 type 정보와 위치를 알고 있어야 한다.</li><li>현재 type에 따라 옮길 수 있는 방향이 다르다.</li><li>현재 type에 따라 옮길 수 있는지 check를 해주어야 한다.</li><li><code>check</code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">가로: 오른쪽 <span class="number">1</span>칸 검사</span><br><span class="line">세로: 아래 <span class="number">1</span>칸 검사</span><br><span class="line">대각선: 오른쪽 <span class="number">1</span>칸, 아래 <span class="number">1</span>칸, 오른쪽 아래 <span class="number">1</span>칸 검사</span><br><span class="line"><span class="comment">// # 1.</span></span><br><span class="line">가로 -&gt; 가로 (자기 자신)</span><br><span class="line">     -&gt; 대각선 </span><br><span class="line"><span class="comment">// # 2.</span></span><br><span class="line">세로 -&gt; 세로 (자기 자신)</span><br><span class="line">     -&gt; 대각선 </span><br><span class="line"><span class="comment">// # 3.</span></span><br><span class="line">대각선 -&gt; 세로</span><br><span class="line">       -&gt; 가로</span><br><span class="line">       -&gt; 대각선</span><br></pre></td></tr></table></figure></li></ul><ol><li>모두 자기 자신의 타입 그대로 옮길 수 있다.</li><li>대각선을 가기 위해서는 가로, 세로로 갈 수 있는 조건 역시 만족해야 한다.</li></ol><p>위를 이용하여 탐색 코드를 구현한다.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> 탐색(현재 위치, 현재 타입)</span><br><span class="line">도착했을 때 answer++후 리턴</span><br><span class="line"><span class="keyword">for</span>(<span class="number">3</span>번)</span><br><span class="line">check할 위치(오른쪽, 아래, 오른쪽 아래)</span><br><span class="line">경계확인</span><br><span class="line">(벽이 아니고 자신과 같은 type)이거나(벽이 아니고 대각선)</span><br><span class="line">탐색(옮길 위치, 가능한 타입) </span><br><span class="line">모든 곳을 검사했을 때만 대각선 탐색</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 16</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, answer;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="comment">// 오른쪽 1칸 검사, 아래 1칸 검사, 오른쪽 아래 1칸 검사</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;; </span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// type 0 : 가로, 1 : 세로, 2 : 대각선</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (r == n - <span class="number">1</span> &amp;&amp; c == n - <span class="number">1</span>) &#123;</span><br><span class="line">answer++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 현재 타입이 가로일 때 어차피 대각선 때문에 3칸 다 검사해야 한다.</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">x = r + dx[i];</span><br><span class="line">y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y)) &#123;</span><br><span class="line"><span class="comment">// 같은 type일 경우 or 대각선일 경우, i==2이면 대각선 경우가 한 번 더 구해지는 꼴이다.</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">map</span>[x][y] == <span class="number">0</span> &amp;&amp; type == i || <span class="built_in">map</span>[x][y] == <span class="number">0</span> &amp;&amp; type == <span class="number">2</span>) &amp;&amp; i != <span class="number">2</span>) &#123; </span><br><span class="line">dfs(x, y, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[x][y] != <span class="number">0</span>) flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">dfs(x, y, <span class="number">2</span>); <span class="comment">// 오른쪽 아래 대각선</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/17070/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16637번 괄호 추가하기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16637/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16637/</guid>
      <pubDate>Sat, 25 Jan 2020 08:04:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16637-괄호-추가하기&quot;&gt;&lt;a href=&quot;#16637-괄호-추가하기&quot; class=&quot;headerlink&quot; title=&quot;#16637. 괄호 추가하기&quot;&gt;&lt;/a&gt;#16637. 괄호 추가하기&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16637-괄호-추가하기"><a href="#16637-괄호-추가하기" class="headerlink" title="#16637. 괄호 추가하기"></a>#16637. 괄호 추가하기</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/16637" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>어느 연산자에 괄호를 넣을지 정해야 한다.<br>괄호는 연산자 연속으로 넣을 수 없다. (1+(3)-2) → 말도 안되는 식<br>그렇기에 이전 괄호의 위치를 알고 있어야 한다.<br>괄호는 첫 번째에 넣을 필요는 없으며(op[i]≠1)<br>이전 괄호의 위치와 2 차이가 나면 안된다.</li><li>괄호를 모두 지정했으면 각 경우에 맞게 식을 계산한다.</li></ol><ul><li>괄호가 등장하면 한 번에 계산하고 반환한다.</li><li><code>Stack</code>을 사용하여 연산자만 넣는다.</li><li><code>Stack</code>이 비어있지 않으면 꺼내어 연산자에 맞게 계산한다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li><p>*(곱셈)은 괄호가 필요 없을 것이라 생각하여 괄호를 넣어주지 않았다.<br>하지만 연산은 왼쪽에서부터 순서대로 진행되기에 곱셈도 괄호가 필요하다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> expr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> N, ans, total_bracket;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TaskBracket</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = expr[start] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> b = expr[start+<span class="number">2</span>] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">char</span> opr = expr[start + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (opr == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = expr[<span class="number">0</span>]-<span class="string">'0'</span>, tmp = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != N<span class="number">-1</span> &amp;&amp; selected[i+<span class="number">1</span>]) &#123;</span><br><span class="line">tmp = TaskBracket(i);</span><br><span class="line">i+=<span class="number">2</span>; </span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!st.empty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (st.top() == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res += tmp; </span><br><span class="line"><span class="keyword">else</span> res += <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (st.top() == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res -= tmp;</span><br><span class="line"><span class="keyword">else</span> res -= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res *= tmp; </span><br><span class="line"><span class="keyword">else</span> res *= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">st.pop();</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">st.push(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectBracket</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt, <span class="keyword">int</span> prior)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt;= total_bracket) &#123;</span><br><span class="line">Calculate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; total_bracket; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[op[i]] || op[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (op[i] - prior == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">selected[op[i]] = <span class="literal">true</span>;</span><br><span class="line">SelectBracket(i+<span class="number">1</span>, cnt+<span class="number">1</span>, op[i]);</span><br><span class="line">selected[op[i]] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; expr[i];</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span>) &#123;</span><br><span class="line">op[total_bracket++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectBracket(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3></li><li><p>ans(정답)의 초기값을 0으로 설정해서 틀렸다. 정답은 (-2^31, 2^31)의 범위에 속한다.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> expr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> N, total_bracket, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TaskBracket</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = expr[start] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> b = expr[start+<span class="number">2</span>] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">char</span> opr = expr[start + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (opr == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opr == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = expr[<span class="number">0</span>]-<span class="string">'0'</span>, tmp = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != N<span class="number">-1</span> &amp;&amp; selected[i+<span class="number">1</span>]) &#123;</span><br><span class="line">tmp = TaskBracket(i);</span><br><span class="line">i+=<span class="number">2</span>; </span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!st.empty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (st.top() == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res += tmp; </span><br><span class="line"><span class="keyword">else</span> res += <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (st.top() == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res -= tmp;</span><br><span class="line"><span class="keyword">else</span> res -= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res *= tmp; </span><br><span class="line"><span class="keyword">else</span> res *= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">st.pop();</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">st.push(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectBracket</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt, <span class="keyword">int</span> prior)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt;= total_bracket) &#123;</span><br><span class="line">Calculate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; total_bracket; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[op[i]] || op[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (op[i] - prior == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">selected[op[i]] = <span class="literal">true</span>;</span><br><span class="line">SelectBracket(i+<span class="number">1</span>, cnt+<span class="number">1</span>, op[i]);</span><br><span class="line">selected[op[i]] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; expr[i];</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">op[total_bracket++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectBracket(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Try"><a href="#3-Try" class="headerlink" title="3 Try"></a>3 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> expr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> N, total_bracket, ans = numeric_limits&lt;<span class="keyword">int</span>&gt;::min();</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TaskBracket</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = expr[start] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> b = expr[start+<span class="number">2</span>] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">char</span> opr = expr[start + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (opr == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opr == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = expr[<span class="number">0</span>]-<span class="string">'0'</span>, tmp = <span class="number">0</span>, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != N<span class="number">-1</span> &amp;&amp; selected[i+<span class="number">1</span>]) &#123; <span class="comment">// 괄호인 경우</span></span><br><span class="line">tmp = TaskBracket(i); <span class="comment">// 한 번에 계산</span></span><br><span class="line">i+=<span class="number">2</span>; </span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!st.empty()) &#123; <span class="comment">// 스택에 연산자가 있을 경우</span></span><br><span class="line"><span class="keyword">if</span> (st.top() == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res += tmp; </span><br><span class="line"><span class="keyword">else</span> res += <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (st.top() == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res -= tmp;</span><br><span class="line"><span class="keyword">else</span> res -= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) res *= tmp; </span><br><span class="line"><span class="keyword">else</span> res *= <span class="keyword">int</span>(expr[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line">st.pop();</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">st.push(expr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectBracket</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt, <span class="keyword">int</span> prior)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt;= total_bracket) &#123;</span><br><span class="line">Calculate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; total_bracket; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[op[i]] || op[i] == <span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">// 첫 번째 연산자에 괄호는 필요 없다.</span></span><br><span class="line"><span class="keyword">if</span> (op[i] - prior == <span class="number">2</span>) <span class="keyword">continue</span>; <span class="comment">// 연속적인 괄호는 불가능</span></span><br><span class="line">selected[op[i]] = <span class="literal">true</span>;</span><br><span class="line">SelectBracket(i+<span class="number">1</span>, cnt+<span class="number">1</span>, op[i]);</span><br><span class="line">selected[op[i]] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; expr[i];</span><br><span class="line"><span class="keyword">if</span> (expr[i] == <span class="string">'+'</span> || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span>) &#123;</span><br><span class="line">op[total_bracket++] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SelectBracket(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16637/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16236번 아기 상어</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16236/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16236/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16236-아기-상어&quot;&gt;&lt;a href=&quot;#16236-아기-상어&quot; class=&quot;headerlink&quot; title=&quot;#16236. 아기 상어&quot;&gt;&lt;/a&gt;#16236. 아기 상어&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16236-아기-상어"><a href="#16236-아기-상어" class="headerlink" title="#16236. 아기 상어"></a>#16236. 아기 상어</h1><p><a href="https://www.acmicpc.net/problem/16236" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 공간</li><li>물고기 M, 아기 상어 1마리 (1칸에 최대 1마리)</li><li>아기 상어 처음 크기 : 2, 물고기도 크기 존재</li><li>아기 상어 움직임 (1초마다 상하좌우)<br>자신보다 큰 물고기 있는 칸은 못 감 나머진 이동 가능<br>자신보다 작은 물고기만 먹을 수 있고, 크기가 같다면 지나가는건 가능</li><li>자신의 크기만큼 물고기를 먹어야 크기가 1 증가한다.</li><li>상어가 이동할 곳 결정 방법<ul><li>더 이상 먹을 물고기가 없으면 종료</li><li>먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹는다. (여기부터 이동)</li><li>1마리보다 많다면, 거리가 가장 가까운 물고기부터 먹는다.<ul><li>가장 가까운 물고기가 여럿이면 가장 위</li><li>그런 물고기가 또 여럿이면 가장 왼쪽에 있는 물고기를 먹는다.</li></ul></li></ul></li></ul><p><strong>Goal: 종료되는 시간은?</strong></p><ul><li><p>입력</p><p>  0: 빈 칸<br>  1~6: 물고기 크기<br>  9: 아기 상어</p></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><p>입력값 다루기</p><p>  struct shark {</p><pre><code>  int r, c, size, cnt= 0;</code></pre><p>  }baby;</p></li></ul><p>아기 상어의 위치, 크기, 먹은 수를 저장할 수 있도록 구조체를 만든다.</p><ul><li>다음 작업이 반복된다.</li></ul><ol><li>먹이를 찾기</li><li>찾았다면 그 중 규칙에 따라 먹이 선택하기</li></ol><ul><li><strong>먹이 찾기</strong></li></ul><ol><li>탐색할 queue와 먹을 수 있는 물고기를 저장할 queue가 필요하다.</li><li>탐색 지점의 표시를 위해 check 배열이 필요하다.</li><li>아기 상어가 이동한 후 다음 먹이까지 찾아가는데 걸리는 시간을 따로 저장해야 한다. (<code>part_time</code>)</li><li>탐색할 지점은 경계를 넘지 않고 아기 상어 크기보다 작거나 같고 탐색표시가 안된 지점이다.<ul><li>탐색이 가능할 때</li></ul><ol><li>탐색 표시를 하고 탐색 queue에 넣어준다.</li><li>아기 상어 크기보다 작은 물고기라면 먹이 queue에 넣어준다.</li></ol></li><li>1초간 갈 수 있는 탐색이 끝나면 먹이 queue가 비어있는지를 판단한다.<ol><li>먹이 queue에 먹이가 들어있으면 걸린 시간(<code>part_time</code>)을 더해준다.</li><li>먹이를 선택한다.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrey</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, prey;</span><br><span class="line">q.push(&#123; row, col &#125;);</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">check[row][col] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> part_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 순회할 때마다 1초 증가</span></span><br><span class="line">part_time++;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; baby.size &gt;= <span class="built_in">map</span>[x][y] &amp;&amp; !check[x][y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (baby.size &gt; <span class="built_in">map</span>[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">prey.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!prey.empty()) &#123;</span><br><span class="line">selectPrey(prey);</span><br><span class="line">time += part_time;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>만약 탐색을 모두 했는데도 먹이가 없다면 <code>isEnd</code>는 <strong>true</strong>가 되므로 작업이 종료된다.</li></ol></li></ol><ul><li><strong>규칙에 따라 먹이 선택하기</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPrey</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;prey)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> prior_x = n, prior_y = n;</span><br><span class="line"><span class="keyword">while</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = prey.front().first;</span><br><span class="line"><span class="keyword">int</span> y = prey.front().second;</span><br><span class="line">prey.pop();</span><br><span class="line"><span class="keyword">if</span> (x &lt; prior_x) &#123;</span><br><span class="line">prior_x = x;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == prior_x) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt; prior_y) &#123;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[baby.r][baby.c] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[prior_x][prior_y] = <span class="number">9</span>;</span><br><span class="line">baby.r = prior_x;</span><br><span class="line">baby.c = prior_y;</span><br><span class="line">baby.cnt++;</span><br><span class="line"><span class="keyword">if</span> (baby.cnt == baby.size) &#123;</span><br><span class="line">baby.size++;</span><br><span class="line">baby.cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>이 먹이 queue에 들어있는 (여럿이라면)물고기들은 모두 같은 거리이기에 문제의 규칙인 가장 위쪽 우선, 가장 왼쪽 우선을 따라 물고기를 선택한다.</li></ul><p>먹을 물고기가 선택되면 아기 상어의 위치를 변경해준다. 크기 또한 먹은 수에 맞게 변경해준다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>시간초과 코드<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, time;</span><br><span class="line"><span class="keyword">bool</span> isEnd;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shark</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, size, cnt= <span class="number">0</span>;</span><br><span class="line">&#125;baby;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPrey</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;prey, <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> prior_x = n, prior_y = n;</span><br><span class="line"><span class="keyword">while</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = prey.front().first;</span><br><span class="line"><span class="keyword">int</span> y = prey.front().second;</span><br><span class="line">prey.pop();</span><br><span class="line"><span class="keyword">if</span> (x &lt; prior_x) &#123;</span><br><span class="line">prior_x = x;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == prior_x) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt; prior_y) &#123;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[baby.r][baby.c] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[prior_x][prior_y] = <span class="number">9</span>;</span><br><span class="line">baby.r = prior_x;</span><br><span class="line">baby.c = prior_y;</span><br><span class="line">baby.cnt++;</span><br><span class="line"><span class="keyword">if</span> (baby.cnt == baby.size) &#123;</span><br><span class="line">baby.size++;</span><br><span class="line">baby.cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; prior_x, prior_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrey</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, prey;</span><br><span class="line">q.push(&#123; row, col &#125;);</span><br><span class="line">check[row][col] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> part_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 순회할 때마다 1초 증가</span></span><br><span class="line">part_time++;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; baby.size &gt;= <span class="built_in">map</span>[x][y] &amp;&amp; !check[x][y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (baby.size &gt; <span class="built_in">map</span>[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">prey.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">selectPrey(prey, q);</span><br><span class="line">time = part_time;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123; <span class="comment">// 아기 상어 정보</span></span><br><span class="line">baby.r = i;</span><br><span class="line">baby.c = j;</span><br><span class="line">baby.size = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEnd) &#123;</span><br><span class="line">findPrey(baby.r, baby.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>while (!q.empty()) q.pop();</code> 라인 때문에 시간초과가 걸린 것 같아 굳이 이럴 필요 없이 먹을 수 있는 물고기가 있다면 <code>selectPrey()</code> 를 호출하여 물고기를 선택하고 시간을 갱신해준 후 return하도록 하였다. 이러면 다시 <code>findPrey()</code> 를 호출하기에 업데이트 된 아기 상어 위치가 queue에 들어가고 작업을 수행한다. <code>q</code>를 비울 필요가 없어짐.</li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, time;</span><br><span class="line"><span class="keyword">bool</span> isEnd;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="comment">// 상좌우하</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shark</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, size, cnt= <span class="number">0</span>;</span><br><span class="line">&#125;baby;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPrey</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;prey)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> prior_x = n, prior_y = n;</span><br><span class="line"><span class="keyword">while</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = prey.front().first;</span><br><span class="line"><span class="keyword">int</span> y = prey.front().second;</span><br><span class="line">prey.pop();</span><br><span class="line"><span class="keyword">if</span> (x &lt; prior_x) &#123;</span><br><span class="line">prior_x = x;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == prior_x) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt; prior_y) &#123;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[baby.r][baby.c] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[prior_x][prior_y] = <span class="number">9</span>;</span><br><span class="line">baby.r = prior_x;</span><br><span class="line">baby.c = prior_y;</span><br><span class="line">baby.cnt++;</span><br><span class="line"><span class="keyword">if</span> (baby.cnt == baby.size) &#123;</span><br><span class="line">baby.size++;</span><br><span class="line">baby.cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrey</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, prey;</span><br><span class="line">q.push(&#123; row, col &#125;);</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">check[row][col] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> part_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 순회할 때마다 1초 증가</span></span><br><span class="line">part_time++;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; baby.size &gt;= <span class="built_in">map</span>[x][y] &amp;&amp; !check[x][y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (baby.size &gt; <span class="built_in">map</span>[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">prey.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!prey.empty()) &#123;</span><br><span class="line">selectPrey(prey);</span><br><span class="line">time += part_time;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123; <span class="comment">// 아기 상어 정보</span></span><br><span class="line">baby.r = i;</span><br><span class="line">baby.c = j;</span><br><span class="line">baby.size = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEnd) &#123;</span><br><span class="line">findPrey(baby.r, baby.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>코드<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, time;</span><br><span class="line"><span class="keyword">bool</span> isEnd;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="comment">// 상좌우하</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shark</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c, size, cnt= <span class="number">0</span>;</span><br><span class="line">&#125;baby;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectPrey</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;prey, <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> prior_x = n, prior_y = n;</span><br><span class="line"><span class="keyword">while</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = prey.front().first;</span><br><span class="line"><span class="keyword">int</span> y = prey.front().second;</span><br><span class="line">prey.pop();</span><br><span class="line"><span class="keyword">if</span> (x &lt; prior_x) &#123;</span><br><span class="line">prior_x = x;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == prior_x) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &lt; prior_y) &#123;</span><br><span class="line">prior_y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[baby.r][baby.c] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[prior_x][prior_y] = <span class="number">9</span>;</span><br><span class="line">baby.r = prior_x;</span><br><span class="line">baby.c = prior_y;</span><br><span class="line">baby.cnt++;</span><br><span class="line"><span class="keyword">if</span> (baby.cnt == baby.size) &#123;</span><br><span class="line">baby.size++;</span><br><span class="line">baby.cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; prior_x, prior_y &#125;);</span><br><span class="line"><span class="comment">/*printf("change %d\n");</span></span><br><span class="line"><span class="comment">for (int k = 0; k &lt; n; ++k) &#123;</span></span><br><span class="line"><span class="comment">for (int l = 0; l &lt; n; ++l) &#123;</span></span><br><span class="line"><span class="comment">printf("%d ", map[k][l]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPrey</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, prey;</span><br><span class="line">q.push(&#123; row, col &#125;);</span><br><span class="line">check[row][col] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> part_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 순회할 때마다 1초 증가</span></span><br><span class="line">part_time++;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; baby.size &gt;= <span class="built_in">map</span>[x][y] &amp;&amp; !check[x][y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (baby.size &gt; <span class="built_in">map</span>[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">prey.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!prey.empty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">selectPrey(prey, q);</span><br><span class="line">time = part_time;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isEnd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123; <span class="comment">// 아기 상어 정보</span></span><br><span class="line">baby.r = i;</span><br><span class="line">baby.c = j;</span><br><span class="line">baby.size = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!isEnd) &#123;</span><br><span class="line">findPrey(baby.r, baby.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16236/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16235번 나무 재테크</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16235-나무-재테크&quot;&gt;&lt;a href=&quot;#16235-나무-재테크&quot; class=&quot;headerlink&quot; title=&quot;#16235. 나무 재테크&quot;&gt;&lt;/a&gt;#16235. 나무 재테크&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16235-나무-재테크"><a href="#16235-나무-재테크" class="headerlink" title="#16235. 나무 재테크"></a>#16235. 나무 재테크</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/16235" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>시뮬레이션 문제이다.</li><li>봄, 여름, 가을, 겨울에 맞게 작업을 수행하면 된다.</li><li>단 한 칸에 여러 개의 나무가 존재할 수 있다는 점에 주목하자.</li></ul><p>처음에 3차원 벡터로 해당 칸에 나무 정보를 저장하였지만 계절마다 작업을 수행할 때 상당히 비효율적이라 시간초과가 떴다.</p><p><strong>→ 문제의 조건을 잘 보면 답이 보인다. (항상 느끼는 거지만 어떤 자료구조를 선택할지가 중요)</strong></p><ol><li>나이가 어린 나무부터 양분을 먹는다. (해당 칸에 있는 나무 정보를 순회할 때 어린 나무부터 접근해야 한다.)</li><li>나무 정보를 처음에 입력받을 때 한 칸에 하나씩만 받는다.</li><li>나무가 추가될 때 나이가 1인 나무가 추가된다.</li><li>나이가 클수록 먼저 죽음(나이만큼 양분을 먹기 때문이다.)</li></ol><p>위 조건을 도합하면 <code>deque</code> 가 가장 적합하다. <code>deque&lt;int&gt; tree[10][10]</code><br>나이가 어린 나무가 앞에 즉, 오름차순으로 정렬되어 있어야 하는데, 처음에 각 칸에 하나씩 입력 받고 추가될 때 <strong>앞부분에 나무를 추가</strong>해주면 되기 때문이다. 죽는건 앞에서부터 탐색을 하다가 죽는 나무가 생기면 그 뒤부터 이미 죽은 나무가 되기에 죽을 나무 개수만 카운트하고 <strong>뒤에서부터 개수만큼 pop하면</strong> 되기 때문이다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, ans, diff;</span><br><span class="line"><span class="keyword">int</span> land[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">v.resize(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">v[i].resize(N);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">land[i][j] = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c, age;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; age;</span><br><span class="line">v[r<span class="number">-1</span>][c<span class="number">-1</span>].push_back(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 봄, 여름</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j].size() &gt; <span class="number">1</span>) sort(v[i][j].begin(), v[i][j].end());</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i][j].size(); ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] - v[i][j][k] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += v[i][j][k] / <span class="number">2</span>;</span><br><span class="line">v[i][j][k] = <span class="number">0</span>; <span class="comment">// 죽은 표시</span></span><br><span class="line">diff++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">land[i][j] -= v[i][j][k];</span><br><span class="line">v[i][j][k]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 가을, 겨울</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i][j].size(); ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">8</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> r = i + dx[dir];</span><br><span class="line"><span class="keyword">int</span> c = j + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (r &lt;= <span class="number">-1</span> || c &lt;= <span class="number">-1</span> || r &gt;= N || c &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line">v[r][c].push_back(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line"><span class="keyword">while</span> (K--) &#123;</span><br><span class="line">Task();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">ans += v[i][j].size();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans -= diff;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>시간초과</li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, ans;</span><br><span class="line"><span class="keyword">int</span> land[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">ans = M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">land[i][j] = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c, age;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; age;</span><br><span class="line">tree[r - <span class="number">1</span>][c - <span class="number">1</span>].push_back(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 봄, 여름</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i][j].empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, dead_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = tree[i][j].begin(); iter != tree[i][j].end(); ++iter) &#123;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] - *iter &lt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += (*iter) / <span class="number">2</span>;</span><br><span class="line">dead_num++;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">land[i][j] -= (*iter);</span><br><span class="line">(*iter)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; dead_num; ++k) tree[i][j].pop_back();</span><br><span class="line">land[i][j] += sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 가을, 겨울</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = tree[i][j].begin(); iter != tree[i][j].end(); ++iter) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*iter) % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">8</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> r = i + dx[dir];</span><br><span class="line"><span class="keyword">int</span> c = j + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (r &lt;= <span class="number">-1</span> || c &lt;= <span class="number">-1</span> || r &gt;= N || c &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line">tree[r][c].push_front(<span class="number">1</span>);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line"><span class="keyword">while</span> (K--) &#123;</span><br><span class="line">Task();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16234번 인구 이동</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16234-인구-이동&quot;&gt;&lt;a href=&quot;#16234-인구-이동&quot; class=&quot;headerlink&quot; title=&quot;#16234. 인구 이동&quot;&gt;&lt;/a&gt;#16234. 인구 이동&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Proble
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16234-인구-이동"><a href="#16234-인구-이동" class="headerlink" title="#16234. 인구 이동"></a>#16234. 인구 이동</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/16234" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><strong>BFS</strong></li></ul><p>N x N 크기의 배열을 전부 탐색하면서 check표시가 되어있지 않은 부분은 인구 이동이 가능한지 확인 작업이 수행된다.</p><p>작업 동안 누적 합과 연합에 포함된 나라 수를 계산해야 한다.</p><ol><li>queue가 비어있을 때까지 다음을 수행한다.</li><li>현재 위치에서 4방향 탐색 → 범위체크, 탐색할 위치가 미탐색인지 확인</li><li>탐색 가능하면 누적 합, 나라 수 계산, 종료되지 않게 flag 갱신, queue에 넣어준다.</li><li>만약 나라 수가 1보다 크면 누적합과 사람 수를 따로 저장한다.</li></ol><p>위 작업이 끝나면 이제 따로 저장한 누적합과 사람 수를 이용해 N x N 크기의 배열을 바꿔준다. (실질적 인구 이동)</p><p>만약 flag가 false 즉, 인구이동이 없다면 종료한다.</p><ul><li><strong>DFS</strong></li></ul><p>BFS보다 훨씬 빠르고 깔끔하며 명료하다. 처음에 BFS로 할 생각을 했던 것은 N x N 크기의 배열 값을 미리 바꾸면 인구 이동에 영향을 미치게 된다는 생각에 코드를 작성했었는데 생각해보니 한 번 탐색이 끝나면(BFS든 DFS든) check 표시 되어 있기에 영향을 주지 않고 한 번 탐색할 때 위치만 미리 벡터에 저장해주면 된다.</p><h3 id="BFS-1-Try"><a href="#BFS-1-Try" class="headerlink" title="BFS 1 Try"></a>BFS 1 Try</h3><ul><li>code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, L, R, idx, ans;</span><br><span class="line"><span class="keyword">bool</span> no_end;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">51</span>][<span class="number">51</span>]; <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="keyword">int</span> val[<span class="number">1251</span>][<span class="number">2</span>]; <span class="comment">// 값, 사람 수</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; N &amp;&amp; y &lt; N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movePeople</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">idx++; </span><br><span class="line"><span class="keyword">int</span> sum = <span class="built_in">map</span>[r][c], cnt = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">check[r][c] = idx;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">tie(x, y) = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; check[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &gt;= L &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &lt;= R) &#123;</span><br><span class="line">check[d_x][d_y] = idx;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">no_end = <span class="literal">true</span>;</span><br><span class="line">cnt++; sum += <span class="built_in">map</span>[d_x][d_y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">val[idx][<span class="number">0</span>] = sum;</span><br><span class="line">val[idx][<span class="number">1</span>] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">check[r][c] = <span class="number">0</span>;</span><br><span class="line">idx--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changePeople</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> no_move = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">map</span>[i][j] = val[check[i][j]][<span class="number">0</span>] / val[check[i][j]][<span class="number">1</span>];</span><br><span class="line">check[i][j] = <span class="number">0</span>; no_move = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!no_move) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;N, &amp;L, &amp;R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line">no_end = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j] &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">movePeople(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">changePeople();</span><br><span class="line">&#125; <span class="keyword">while</span> (no_end);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DFS-1-Try"><a href="#DFS-1-Try" class="headerlink" title="DFS 1 Try"></a>DFS 1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, L, R, sum, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">51</span>][<span class="number">51</span>]; </span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v; <span class="comment">// 위치 정보</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; N &amp;&amp; y &lt; N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">sum += <span class="built_in">map</span>[x][y];</span><br><span class="line">v.push_back(&#123; x, y &#125;);</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; !check[d_x][d_y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &gt;= L &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &lt;= R) &#123;</span><br><span class="line">dfs(d_x, d_y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> change = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">v.clear();</span><br><span class="line">dfs(i, j);</span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : v) &#123;</span><br><span class="line"><span class="built_in">map</span>[e.first][e.second] = sum / v.size();</span><br><span class="line">&#125;</span><br><span class="line">change = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> change;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;N, &amp;L, &amp;R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (task()) &#123; ans++; &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15686번 치킨 배달</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15686-치킨-배달&quot;&gt;&lt;a href=&quot;#15686-치킨-배달&quot; class=&quot;headerlink&quot; title=&quot;#15686. 치킨 배달&quot;&gt;&lt;/a&gt;#15686. 치킨 배달&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15686-치킨-배달"><a href="#15686-치킨-배달" class="headerlink" title="#15686. 치킨 배달"></a>#15686. 치킨 배달</h1><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 도시</li><li>0: 빈 칸, 1: 집, 2: 치킨 집</li><li>도시의 치킨 거리는 모든 집의 치킨 거리의 합</li><li>치킨 거리 ( 집: (r1, c1) 치킨집: (r2, c2) )<br>집과 가장 가까운 치킨집 사이의 거리를 말한다.</li></ul><script type="math/tex; mode=display">|r_1-r_2| +|c_1-c_2|</script><p><strong>Goal: 치킨집 중에서 최대 M개를 골랐을 때 도시의 치킨 거리 최솟값</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>치킨 집을 M개 고르는 모든 조합 구하기</li></ul><p>해당 집을 고르면 배열에 넣고 아니면 넣지 않음<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (select_idx == m) &#123;</span><br><span class="line">BFS 이용하여 치킨 거리 구하기</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>); <span class="comment">// 선택하지 않기</span></span><br><span class="line">select[select_idx++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>); <span class="comment">// 선택하기</span></span><br><span class="line">select_idx--; <span class="comment">// 다른 경우의 수를 위해 인덱스 빼주기 (중요)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>중요</strong>라고 되어있는 부분을 작성하지 않으면 모든 경우의 수를 구할 수 없다. 경우의 수가 꼬여버림. </p><p>4개 중에 2개를 고른다고 하면<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">comb(<span class="number">0</span>)</span><br><span class="line">comb(<span class="number">1</span>)</span><br><span class="line">comb(<span class="number">2</span>)</span><br><span class="line">comb(<span class="number">3</span>)</span><br><span class="line">...</span><br><span class="line">이런식으로 호출이 이루어지기에 (<span class="number">3</span>, <span class="number">2</span>) 경우가 먼저 완성된다.</span><br><span class="line">완성되고 BFS이용하여 치킨 거리 구하고 <span class="keyword">return</span>되면 select_idx를 빼준다.</span><br><span class="line">그럼 <span class="number">2</span>자리에 다른 경우가 넣어질 수 있다. (<span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><ul><li>각 조합에 대한 최소한의 치킨 거리 구하기</li></ul><p>BFS를 이용하여 한 칸씩 갈 때 1초 증가</p><p>그러다 1을 만나면 해당 초를 더 해준다.<br>BFS를 이용하면 동시에 1을 만나기에 time만 더해주어서는 안된다.<br>동시에 발견한 집의 수만큼 time을 더해주어야 한다.</p><p>모든 1을 만났으면 종료<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; select_idx; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); </span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>이 중 가장 최소인 치킨 거리 구하기</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3></li><li><p>컴파일 에러 (index라는 변수명은 기피하자…) <strong>select_idx</strong>로 변경</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, total_chicken, total_house, index, answer;</span><br><span class="line"><span class="keyword">int</span> city[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> select[<span class="number">13</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line">&#125;chicken[<span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); <span class="comment">// 선택한 치킨집 queue에 저장</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; <span class="comment">// M개를 선택하는 모든 경우의 수 구하기</span></span><br><span class="line"><span class="keyword">if</span> (index == m) &#123;</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select[index++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;city[i][j]);</span><br><span class="line"><span class="keyword">if</span> (city[i][j] == <span class="number">2</span>) &#123; <span class="comment">// 치킨집 정보 저장</span></span><br><span class="line">chicken[total_chicken].r = i;</span><br><span class="line">chicken[total_chicken++].c = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (city[i][j] == <span class="number">1</span>) total_house++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">answer = <span class="number">1e9</span>;</span><br><span class="line">combination(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, total_chicken, total_house, select_idx, answer;</span><br><span class="line"><span class="keyword">int</span> city[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> select[<span class="number">13</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line">&#125;chicken[<span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; select_idx; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); <span class="comment">// 선택한 치킨집 queue에 저장</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; <span class="comment">// M개를 선택하는 모든 경우의 수 구하기</span></span><br><span class="line"><span class="keyword">if</span> (select_idx == m) &#123;</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select[select_idx++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select_idx--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;city[i][j]);</span><br><span class="line"><span class="keyword">if</span> (city[i][j] == <span class="number">2</span>) &#123; <span class="comment">// 치킨집 정보 저장</span></span><br><span class="line">chicken[total_chicken].r = i;</span><br><span class="line">chicken[total_chicken++].c = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (city[i][j] == <span class="number">1</span>) total_house++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">answer = <span class="number">1e9</span>;</span><br><span class="line">combination(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15685번 드래곤 커브</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15685-드래곤-커브&quot;&gt;&lt;a href=&quot;#15685-드래곤-커브&quot; class=&quot;headerlink&quot; title=&quot;#15685. 드래곤 커브&quot;&gt;&lt;/a&gt;#15685. 드래곤 커브&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmic
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15685-드래곤-커브"><a href="#15685-드래곤-커브" class="headerlink" title="#15685. 드래곤 커브"></a>#15685. 드래곤 커브</h1><p><a href="https://www.acmicpc.net/problem/15685" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>좌표 평면</li><li>3가지 속성</li></ul><ol><li>시작 점</li><li>시작 방향<br>0:  x 좌표 증가 → 방향<br>1:  y 좌표 감소  ↑ 방향<br>2:  x 좌표 감소 ← 방향<br>3:  y 좌표 증가  ↓ 방향</li><li>세대</li></ol><ul><li>0세대: 길이가 1인 선분</li><li>1세대: 0세대 드래곤 커브 <strong>끝 점을 기준으로</strong> 시계 방향 90도 회전시켜 0세대 끝 점에 붙인 것</li><li>2세대: 1세대를 이용하여 1세대를 만든 것처럼 만든다.</li><li>N세대: N-1세대 커브를 끝 점 기준으로 90도 시계 방향 회전시킨 것을 붙인 것</li><li><p>입력</p><p>  드래곤 커브 개수 N (~20)<br>  x, y (드래곤 커브 시작 점) ~100<br>  d (시작 방향)<br>  g (세대) ~10</p></li></ul><p>드래곤 커브는 서로 겹칠 수 있다.</p><p><strong>Goal: 만들어진 드래곤 커브에서 정사각형 4개의 꼭짓점이 모두 드래곤 커브의 일부인 것의 개수를 구하기 (모양이 정사각형이 아니어도 4개의 꼭짓점만 만족하면 된다.)</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>끝점을 기준으로 시계방향 90도를 했을 때 각 방향의 이동은 다음과 같다.</li></ul><ol><li>0 → 1</li><li>1 → 2</li><li>2 → 3</li><li>3 → 0</li></ol><p>아래 그림 참고.</p><p><img src="https://user-images.githubusercontent.com/46062199/73121639-950a3900-3fbf-11ea-871d-edcf306df4a5.png" alt></p><ul><li>드래곤 커브를 그려주는 건 check 배열로 수행한다.<br>(겹쳐도 되니까 초기화할 필요 없다.)</li><li>방향만 배열에 저장해주면 된다.</li><li><p>끝점에서 이동을 수행하니 위치 좌표는 끝점만 알면된다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input : 3 3 0 1</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>) : 처음 시작 위치</span><br><span class="line">(<span class="number">4</span>, <span class="number">3</span>) : <span class="number">0</span>세대 <span class="comment">// 위치 좌표: (4, 3) 방향 0</span></span><br><span class="line">(<span class="number">4</span>, <span class="number">2</span>) : <span class="number">1</span>세대 <span class="comment">// 위치 좌표: (4, 2) 방향 0, 1</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>) : <span class="number">2</span>세대 <span class="comment">// 위치 좌표: (3, 2) -&gt; (3,1) 방향 0, 1, 2, 1</span></span><br></pre></td></tr></table></figure><p>2세대 설명: 1세대에서 방향이 [0, 1]로 저장되어 있다. 끝점부터 시작하기에 방향 1이 시계방향으로 90도 회전하면 방향 2가 된다. [0, 1, 2]<br>이후 0이 시계방향으로 90도 회전하면 방향 1이된다. [0, 1, 2, 1]</p></li><li><p>드래곤 커브 위의 규칙대로 그리기</p></li></ul><p>0세대 까지 그려놓고 (0세대가 아니라면) 1세대부터 그린다.</p><p>direction 배열에 위의 [0, 1, 2, 1]과 같은 값이 들어간다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> clockwise[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line"><span class="keyword">while</span>(g--) &#123;</span><br><span class="line"><span class="keyword">int</span> len = idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">d = clockwise[direction[i]];</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; MAX &amp;&amp; y &lt; MAX) &#123;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>4개의 꼭짓점 확인</li></ul><p>배열은 최대 100 x 100의 크기를 가지기에 0~99까지 check 값이 존재할 수 있다. (사실상 98까지만 확인하면 된다.)</p><pre><code>1 1   (0, 0)을 기준으로 오른쪽, 아래, 오른쪽 아래 대각선만 확인하면 된다.1 1</code></pre><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clockwise[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> direction[MAX*MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line"><span class="keyword">while</span>(g--) &#123;</span><br><span class="line"><span class="keyword">int</span> len = idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">d = clockwise[direction[i]];</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; MAX &amp;&amp; y &lt; MAX) &#123;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, x, y, d, g, answer = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x, &amp;y, &amp;d, &amp;g);</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line">draw(x, y, d, g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">99</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i + <span class="number">1</span>][j] &amp;&amp; check[i][j + <span class="number">1</span>] &amp;&amp; check[i + <span class="number">1</span>][j + <span class="number">1</span>]) answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15684번 사다리 조작</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15684-사다리-조작&quot;&gt;&lt;a href=&quot;#15684-사다리-조작&quot; class=&quot;headerlink&quot; title=&quot;#15684. 사다리 조작&quot;&gt;&lt;/a&gt;#15684. 사다리 조작&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15684-사다리-조작"><a href="#15684-사다리-조작" class="headerlink" title="#15684. 사다리 조작"></a>#15684. 사다리 조작</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="http://acmicpc.net/problem/15684" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>처음에 감이 안잡혀서 어떻게 풀지 막막했었다.</li><li>입력값을 보고 사다리 정보를 어떤 식으로 저장할건지가 첫 스타트이자 포인트다.<br>이렇게 data가 보여야 조합도 어떤식으로 구성할지 생각나기 때문이다.</li><li>작업은 2개로 나뉜다.<ol><li>조합 구하기</li><li>사다리 타기</li></ol></li><li>조합 구하기</li></ul><p>조합을 구하기 전에 입력값이 어떻게 들어오나 확인해보자.</p><p>a b가 입력되면 a행에 b열 사다리와 b+1열 사다리가 연결된다.<br>이를 array[a][b] = 1(사다리 있음)으로 표시하면 b+1로 갈 수 있다는 뜻이다.<br>반대로 b+1지점에서 array[a][b]값이 1인걸 확인하면 b로 갈 수 있다는 뜻이다.</p><p>이를 활용하여 조합을 구해보자.</p><p>모든 행의 1열부터 N-1열까지 탐색해야 한다.<br>단, 현재 위치뿐만 아니라 자신의 왼쪽, 오른쪽도 확인해야 한다. (연속으로 설치하지 못하기 때문)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>행 <span class="number">1</span>열 선택 시 다음 가능한 경우 (N에 표시하는 것은 의미 X - 입력값 생각)</span><br><span class="line"> <span class="number">1</span>행 - <span class="number">1</span>(x), <span class="number">2</span>(x), <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"> <span class="number">2</span>행 - <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"> ...</span><br><span class="line"> H행 - <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123; </span><br><span class="line"><span class="keyword">if</span> (visit[i][j]) <span class="keyword">continue</span>; <span class="comment">// 현재 확인</span></span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; visit[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 왼쪽 확인</span></span><br><span class="line"><span class="keyword">if</span> (visit[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 오른쪽 확인</span></span><br><span class="line">visit[i][j] = <span class="literal">true</span>; <span class="comment">// 선택 표시</span></span><br><span class="line">selectAll(i, cnt + <span class="number">1</span>); <span class="comment">// 다음 선택</span></span><br><span class="line">visit[i][j] = <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, H, ans;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">31</span>][<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ans = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; H;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;  <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">visit[a][b] = <span class="literal">true</span>; <span class="comment">// a행 b - b+1 사다리</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> current_num = j;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (visit[i][current_num]) &#123; <span class="comment">// 오른쪽 사다리로 이동</span></span><br><span class="line">current_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num &gt; <span class="number">1</span> &amp;&amp; visit[i][current_num <span class="number">-1</span>]) &#123; <span class="comment">// 왼쪽 사다리로 이동</span></span><br><span class="line">current_num--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current_num != j) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectAll</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Check()) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; cnt) ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123; <span class="comment">// 5번 사다리는 확인할 필요 없다. (입력값 생각)</span></span><br><span class="line"><span class="keyword">if</span> (visit[i][j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; visit[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visit[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">visit[i][j] = <span class="literal">true</span>;</span><br><span class="line">selectAll(i, cnt + <span class="number">1</span>);</span><br><span class="line">visit[i][j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">selectAll(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">4</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15683번 감시</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15683-감시&quot;&gt;&lt;a href=&quot;#15683-감시&quot; class=&quot;headerlink&quot; title=&quot;#15683. 감시&quot;&gt;&lt;/a&gt;#15683. 감시&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;he
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15683-감시"><a href="#15683-감시" class="headerlink" title="#15683. 감시"></a>#15683. 감시</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/15683" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>설치된 CCTV 위치정보, 번호 얻기</li><li>설치된 CCTV 방향 정하기 (상하좌우: 0123)<br>1번 cctv: 0, 1, 2, 3<br>2번 cctv: (0, 1), (2, 3)<br>3번 cctv: (0, 3), (1, 3), (0, 2), (1, 2)<br>4번 cctv: (2, 0, 3), (0, 3, 1), (2, 1, 3), (0, 2, 1)<br>5번 cctv: (0, 1, 2, 3)<br>묶음을 왼쪽에서부터 0, 1, 2, 3이라고 정하고 (여기서 5번은 0만 갖게된다.)<br><code>selected</code> 배열에 넣어준다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectDirection</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">task(); <span class="comment">// 방향대로 감시 시작</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> type = cctv[idx].type;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">2</span>) &#123; <span class="comment">// 2번 cctv는 최대 1 값만 가능</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">5</span>) &#123; <span class="comment">// 5번 cctv는 최대 0만 가능</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">selected[idx] = i;</span><br><span class="line">selectDirection(idx + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[idx] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>선택된 방향대로 감시 시작</li></ol></li></ol><ul><li>범위를 벗어나거나 벽을 만나면 감시를 중단한다. 그전까지는 정해진 방향대로 계속 check 표시를 한다.</li><li>check는 check되어 있지 않고 맵의 값이 0인 경우에만 진행한다.<br>탐색된 곳의 개수를 구하기 위해서이다.</li><li><p>전체 칸의 개수 - 탐색된 곳의 개수 - 벽의 개수 - cctv 개수 = 사각지대 개수</p><ol><li>사각지대가 최소가 되도록 갱신한다.</li></ol></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, wall_cnt, ans;</span><br><span class="line"><span class="keyword">int</span> room[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> selected[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> type_two[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> type_three[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> type_four[<span class="number">4</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, type;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;INFO&gt; cctv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) selected[i] = <span class="number">-1</span>;</span><br><span class="line">ans = <span class="number">1e9</span>; wall_cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">9</span>][<span class="number">9</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="keyword">int</span> type, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cctv.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> dir = selected[i];</span><br><span class="line"><span class="keyword">int</span> x = cctv[i].x, y = cctv[i].y;</span><br><span class="line"><span class="keyword">int</span> d_x, d_y;</span><br><span class="line"><span class="keyword">if</span> (cctv[i].type == <span class="number">1</span>) &#123;</span><br><span class="line">d_x = x + dx[dir];</span><br><span class="line">d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[dir];</span><br><span class="line">d_y += dy[dir];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_two[dir][j]];</span><br><span class="line">d_y = y + dy[type_two[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_two[dir][j]];</span><br><span class="line">d_y += dy[type_two[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_three[dir][j]];</span><br><span class="line">d_y = y + dy[type_three[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_three[dir][j]];</span><br><span class="line">d_y += dy[type_three[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_four[dir][j]];</span><br><span class="line">d_y = y + dy[type_four[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_four[dir][j]];</span><br><span class="line">d_y += dy[type_four[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[j];</span><br><span class="line">d_y = y + dy[j];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[j];</span><br><span class="line">d_y += dy[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res = (n * m) - res - wall_cnt - cctv.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (res &lt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectDirection</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">task();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> type = cctv[idx].type;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">selected[idx] = i;</span><br><span class="line">selectDirection(idx + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[idx] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; room[i][j];</span><br><span class="line"><span class="keyword">if</span> (room[i][j] &gt;= <span class="number">1</span> &amp;&amp; room[i][j] &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">cctv.push_back(&#123; i, j, room[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (room[i][j] == <span class="number">6</span>) wall_cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">selectDirection(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14891번 톱니바퀴</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14891/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14891/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14891-톱니바퀴&quot;&gt;&lt;a href=&quot;#14891-톱니바퀴&quot; class=&quot;headerlink&quot; title=&quot;#14891. 톱니바퀴&quot;&gt;&lt;/a&gt;#14891. 톱니바퀴&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14891-톱니바퀴"><a href="#14891-톱니바퀴" class="headerlink" title="#14891. 톱니바퀴"></a>#14891. 톱니바퀴</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/14891" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>SWEA 모의 SW 역량 테스트 <code>[특이한 자석](https://www.notion.so/doyuni/4013-e51a7fc5e88b4e2b999dba66b24f358b#ffc1b4f8b7b140a2a1f2e12a9f953f5b)</code> 와 동일하다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> magnatic[<span class="number">4</span>][<span class="number">8</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; task;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">1</span>) &#123; <span class="comment">// 시계 방향</span></span><br><span class="line"><span class="keyword">int</span> first_ele = magnatic[n][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">6</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">magnatic[n][i + <span class="number">1</span>] = magnatic[n][i];</span><br><span class="line">&#125;</span><br><span class="line">magnatic[n][<span class="number">0</span>] = first_ele;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">-1</span>) &#123; <span class="comment">// 반시계 방향</span></span><br><span class="line"><span class="keyword">int</span> last_ele = magnatic[n][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">magnatic[n][i - <span class="number">1</span>] = magnatic[n][i];</span><br><span class="line">&#125;</span><br><span class="line">magnatic[n][<span class="number">7</span>] = last_ele;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkRotate</span><span class="params">(<span class="keyword">int</span> current_num, <span class="keyword">int</span> prior_num, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count_dir = dir &gt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">task.insert(&#123; current_num, dir &#125;);</span><br><span class="line"><span class="keyword">if</span> (current_num == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num][<span class="number">2</span>] != magnatic[current_num + <span class="number">1</span>][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num + <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num - <span class="number">1</span>][<span class="number">2</span>] != magnatic[current_num][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num - <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num][<span class="number">2</span>] != magnatic[current_num + <span class="number">1</span>][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num + <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num - <span class="number">1</span>][<span class="number">2</span>] != magnatic[current_num][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num - <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num][<span class="number">2</span>] != magnatic[current_num + <span class="number">1</span>][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num + <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num - <span class="number">1</span>][<span class="number">2</span>] != magnatic[current_num][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num - <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, score = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; ++n) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[n][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">ans += score;</span><br><span class="line">&#125;</span><br><span class="line">score *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;magnatic[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> number, dir; <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;number, &amp;dir);</span><br><span class="line">checkRotate(number - <span class="number">1</span>, <span class="number">-1</span>, dir);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : task) &#123;</span><br><span class="line">rotate(e.first, e.second);</span><br><span class="line">&#125;</span><br><span class="line">task.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, getScore());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14891/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14890번 경사로</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14890/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14890/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14890-경사로&quot;&gt;&lt;a href=&quot;#14890-경사로&quot; class=&quot;headerlink&quot; title=&quot;#14890. 경사로&quot;&gt;&lt;/a&gt;#14890. 경사로&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14890-경사로"><a href="#14890-경사로" class="headerlink" title="#14890. 경사로"></a>#14890. 경사로</h1><p><a href="https://www.acmicpc.net/problem/14890" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 지도, 각 칸의 높이가 적힘</li><li>길은 한 행 또는 한 열 → 길에 속한 모든 칸의 높이가 모두 같아야 지나갈 수 있음</li><li>또는 경사로를 놓아서 지나갈 수 있는 길을 만들 수 있음( 경사로 높이 1, 길이 L), 경사로 개수는 매우 많음</li></ul><p>경사로 놓을 수 있는 경우</p><ul><li>낮은 칸과 높은 칸의 차이가 1인 경우</li><li>L개의 칸이 같은 높이로 연속되게 있어야 한다.</li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>한 행</p><ol><li>맨 왼쪽에서부터 오른쪽으로 탐색한다. (첫 번째 원소부터 마지막 원소 바로 이전까지)</li><li>현재 탐색한 원소와 바로 다음 원소와의 차이를 구한다.</li><li>+1인 경우<br>다음 원소부터 경사로 길이만큼 <strong>오른쪽으로</strong> 탐색을 시작한다.<br>탐색하면서 다음 경우를 확인한다.<br>범위를 벗어날 경우(n이상) or 경사로 길이만큼 같은 높이가 아닐 때 종료<br>그게 아니면 경사로를 놓는다.</li><li>-1인 경우<br>현재 원소부터 경사로 길이만큼 <strong>왼쪽으로</strong> 탐색을 시작한다.<br>탐색하면서 다음 경우를 확인한다.<br>범위를 벗어날 경우(0미만) or 경사로 길이만큼 같은 높이가 아닐 때 or <strong>경사로가 놓여있을 때</strong> 종료<br>그게 아니면 경사로를 놓는다.</li><li>차이가 1 초과 -1 미만인 경우 종료</li><li>그게 아니라면 성공</li></ol><p>왼쪽에서 오른쪽으로 탐색하기에 </p><p>한 열 또한 위와 마찬가지로 구현한다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>하…<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, len, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkRow</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = j + <span class="number">1</span>; start &lt;= j + len; ++start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 범위를 벗어나는 경우</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j + <span class="number">1</span>] != <span class="built_in">map</span>[row][start]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 칸의 높이가 같지 않을 때</span></span><br><span class="line">check[row][start] = <span class="literal">true</span>; <span class="comment">// 경사로 놓기</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = j; start &gt; j - len; --start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 범위를 벗어나는 경우</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j] != <span class="built_in">map</span>[row][start]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (check[row][start]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[row][start] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] &gt; <span class="number">1</span> || <span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] &lt; <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkCol</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = i + <span class="number">1</span>; start &lt;= i + len; ++start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i + <span class="number">1</span>][col] != <span class="built_in">map</span>[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[start][col] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = i; start &gt; i - len; --start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col] != <span class="built_in">map</span>[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (check[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[start][col] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] &gt; <span class="number">1</span> || <span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] &lt; <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; n; ++row) &#123;</span><br><span class="line"><span class="keyword">if</span>(checkRow(row)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line"><span class="keyword">if</span> (checkCol(col)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>checkCol</code> 함수에 return true 즉 반환값을 넣어주지 않았기에 틀렸다고 나왔다. bool 함수는 반드시 true와 false 둘 다 반환해주자.</li></ul><p>이걸 몰라서 계속 문제만 주구장창 봤음…ㅠ</p><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, len, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkRow</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = j + <span class="number">1</span>; start &lt;= j + len; ++start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 범위를 벗어나는 경우</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j + <span class="number">1</span>] != <span class="built_in">map</span>[row][start]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 칸의 높이가 같지 않을 때</span></span><br><span class="line">check[row][start] = <span class="literal">true</span>; <span class="comment">// 경사로 놓기</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = j; start &gt; j - len; --start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j] != <span class="built_in">map</span>[row][start]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (check[row][start]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 경사로가 이미 놓여진 경우</span></span><br><span class="line">check[row][start] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] &gt; <span class="number">1</span> || <span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] &lt; <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkCol</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = i + <span class="number">1</span>; start &lt;= i + len; ++start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i + <span class="number">1</span>][col] != <span class="built_in">map</span>[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[start][col] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = i; start &gt; i - len; --start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col] != <span class="built_in">map</span>[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (check[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[start][col] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] &gt; <span class="number">1</span> || <span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] &lt; <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; n; ++row) &#123;</span><br><span class="line"><span class="keyword">if</span> (checkRow(row)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line"><span class="keyword">if</span> (checkCol(col)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14890/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14889번 스타트와 링크</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14889/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14889/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14889-스타트와-링크&quot;&gt;&lt;a href=&quot;#14889-스타트와-링크&quot; class=&quot;headerlink&quot; title=&quot;#14889. 스타트와 링크&quot;&gt;&lt;/a&gt;#14889. 스타트와 링크&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14889-스타트와-링크"><a href="#14889-스타트와-링크" class="headerlink" title="#14889. 스타트와 링크"></a>#14889. 스타트와 링크</h1><p><a href="https://www.acmicpc.net/problem/14889" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>총 N명 중 N/2명으로 두 팀을 만든다. (N은 짝수)</li><li>Sij + Sji = 능력치 ( i번과 j번 사람이 같은 팀에 속했을 때)</li></ul><p><strong>Goal: 두 팀의 능력치의 차이의 최솟값</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>먼저 두 팀을 나눠야 한다.<br>1~N 중에 N/2를 골라 만들어야 하는데 중복X + 오름차순이어야 한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectTeam</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == n / <span class="number">2</span>) &#123; <span class="comment">// 성공 조건</span></span><br><span class="line"><span class="comment">// 능력치 계산</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx &gt; n) <span class="keyword">return</span>; <span class="comment">// 실패 조건</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] == <span class="number">0</span>) &#123;</span><br><span class="line">selected[i] = i;</span><br><span class="line">selectTeam(i+<span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>1~20개의 번호를 담을 수 있는 selected 배열을 만든다.</li><li>선택 되면 선택된 번호의 값을 갖는다. 선택되지 않으면 0값을 갖는다.</li><li>중복 안되고, 오름차 순이기에 for문의 시작 조건을 위와 같이 한다.</li><li><p>N/2 만큼 선택하면 능력치를 계산한다.</p><ol><li><p>능력치 계산</p><p>링크팀: 0, 3, 5<br>-&gt; 능력치<br>(0, 3) (0, 5)<br>(3, 0) (3, 5)<br>(5, 0) (5, 3)</p></li></ol></li></ul><p>그렇기에 선택된 숫자를 기준으로 나머지 선택된 숫자 하나만 고르면 된다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i는 앞에 선택된 숫자 (i, j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[j] == <span class="number">0</span> &amp;&amp; i != j) &#123;</span><br><span class="line">team_start += ability[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="keyword">int</span> ability[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> selected[<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getDifference</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> team_start = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> team_link = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] == <span class="number">0</span>) &#123; <span class="comment">// 선택되지 않은 넘버가 다른 팀</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[j] == <span class="number">0</span> &amp;&amp; i != j) &#123;</span><br><span class="line">team_start += ability[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[j] != <span class="number">0</span> &amp;&amp; i != j) &#123;</span><br><span class="line">team_link += ability[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> diff = <span class="built_in">abs</span>(team_start - team_link);</span><br><span class="line"><span class="keyword">if</span> (ans &gt; diff) ans = diff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectTeam</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == n / <span class="number">2</span>) &#123;</span><br><span class="line">getDifference();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx &gt; n) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] == <span class="number">0</span>) &#123;</span><br><span class="line">selected[i] = i;</span><br><span class="line">selectTeam(i+<span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ability[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">1e9</span>;</span><br><span class="line">selectTeam(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14889/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14503번 로봇 청소기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14503/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14503/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14503-로봇-청소기&quot;&gt;&lt;a href=&quot;#14503-로봇-청소기&quot; class=&quot;headerlink&quot; title=&quot;#14503. 로봇 청소기&quot;&gt;&lt;/a&gt;#14503. 로봇 청소기&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmic
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14503-로봇-청소기"><a href="#14503-로봇-청소기" class="headerlink" title="#14503. 로봇 청소기"></a>#14503. 로봇 청소기</h1><p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x M 크기, 벽 또는 빈칸, 모든 외곽은 벽</li><li>청소기는 바라보는 방향이 있음(상하좌우)</li><li>작동</li></ul><ol><li>현재 위치 청소</li><li>현재 방향을 기준으로 왼쪽부터 탐색<br>왼쪽에 청소하지 않은 공간이 있으면 그 방향으로 회전, 1칸 전진, 1번 진행<br>없다면, 그 방향으로 회전 2번 진행<br>상하좌우 모두 청소 되어 있거나 벽이라면, 방향 유지한 채 한 칸 후진 후 2번 진행 ( 현재 위치에서 4방향 다 청소나 벽일 때 현재 방향 유지한 채 후진)<br>바로 위의 경우에서 뒤쪽이 벽이라 후진도 못 하는 경우 <strong>작동 종료</strong></li></ol><p><strong>Goal: 로봇 청소기가 청소하는 칸의 개수 출력</strong></p><p>방향: 0 → 위, 1 → 우, 2 → 아래, 3 → 왼</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>시뮬레이션 문제이다. 각 순서에 맞게 잘 구현하면 된다.</p><ol><li>현재 탐색 지점의 값이 0이라면 청소하는 칸의 개수 1 증가 후 2로 표시</li><li>최대 5번 방향을 바꾸게 된다. (자신으로 돌아오는 것까지 포함)</li></ol><ul><li>0(위쪽) → 3(왼쪽)</li><li>1(오른쪽) → 0(위쪽)</li><li>2(아래쪽) → 1(오른쪽)</li><li>3(왼쪽) → 2(아래쪽)</li></ul><p>위는 현재 방향에 따른 왼쪽 방향(다음 탐색 방향)이다.</p><p>현재 방향을 토대로 다음 방향을 결정하고 다음 방향에 맞는 좌표를 구한다.</p><ul><li>탐색 가능하면(값이 0이면) 현재 방향을 이 방향으로 바꾸고 좌표를 바꾸고 반복문 종료</li><li>탐색 불가능하면 현재 방향만 이 방향으로 바꾼다.</li><li>처음 방향과 같게 나오면(5번째일 경우) 후진이 가능한지 조사한다.<br>가능하면 좌표만 바꿔주고 아니면 시뮬레이션을 종료한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> next_dir = left_dir[current_dir];</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> back_x = x + dx[back_dir[dir]];</span><br><span class="line"><span class="keyword">int</span> back_y = y + dy[back_dir[dir]];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[back_x][back_y] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x = back_x; y = back_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[next_dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[next_dir];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">dir = next_dir;</span><br><span class="line">x = d_x; y = d_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">current_dir = next_dir;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> left_dir[<span class="number">4</span>] = &#123; <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> back_dir[<span class="number">4</span>] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanMap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="number">0</span>) ans++;</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> current_dir = dir;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> next_dir = left_dir[current_dir];</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> back_x = x + dx[back_dir[dir]];</span><br><span class="line"><span class="keyword">int</span> back_y = y + dy[back_dir[dir]];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[back_x][back_y] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x = back_x; y = back_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[next_dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[next_dir];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">dir = next_dir;</span><br><span class="line">x = d_x; y = d_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">current_dir = next_dir;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> start_x, start_y, dir;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; start_x &gt;&gt; start_y &gt;&gt; dir;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cleanMap(start_x, start_y, dir);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14503/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14502번 연구소</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14502/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14502/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14502-연구소&quot;&gt;&lt;a href=&quot;#14502-연구소&quot; class=&quot;headerlink&quot; title=&quot;#14502. 연구소&quot;&gt;&lt;/a&gt;#14502. 연구소&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14502-연구소"><a href="#14502-연구소" class="headerlink" title="#14502. 연구소"></a>#14502. 연구소</h1><p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x M 크기, 빈 칸(0), 벽(1), 바이러스(2) 존재</li><li>바이러스는 상하좌우 빈칸으로만 움직임</li><li>벽을 꼭 3개 세워야 한다.</li></ul><p><strong>Goal: 벽을 3개 세운 뒤, 얻을 수 있는 안전 영역 크기의 최댓값<br>안전 영역은 벽 3개 세운 뒤 0의 개수</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li><p>벽을 3개 세우는 경우의 수를 모두 구한다. (브루트 포스 - 재귀)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildWall</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) &#123;</span><br><span class="line">spreadVirus();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == zero_point.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">buildWall(idx + <span class="number">1</span>, cnt);</span><br><span class="line">wall[cnt].x = zero_point[idx].first;</span><br><span class="line">wall[cnt].y = zero_point[idx].second;</span><br><span class="line">buildWall(idx + <span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0인 지점을 저장해놓은 벡터에서 3개를 선택하도록 한다.</p><ol><li>원래의 map은 보존해야 하므로 새로운 배열에 복사를 해놓고 위에서 구한 경우의 수에 맞게 벽을 세운다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copyMap(); <span class="comment">// 새로운 배열(tmp)에 복사</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">tmp[wall[i].x][wall[i].y] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>벽을 세운 새로운 map에서 바이러스가 퍼지도록 한다. (BFS) <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spreadVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 2번째 작업</span></span><br><span class="line"><span class="comment">// 아래부터 3번째 작업</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_virus; ++i) &#123;</span><br><span class="line">q.push(&#123; virus[i].x, virus[i].y &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minus_safe_area = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; tmp[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">tmp[d_x][d_y] = <span class="number">2</span>;</span><br><span class="line">minus_safe_area++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; safe_area - minus_safe_area) ans = safe_area - minus_safe_area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>BFS 탐색이 끝나면 queue가 비워지게 되므로, 다음 탐색을 위해 바이러스 위치를 저장해놓을 배열이 필요하다는 것에 주의한다.</li></ol></li></ol><p><strong>안전영역 크기 = 원래 map의 0의 개수 - 벽 3개 - 모두 퍼진 바이러스 수</strong></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans, safe_area, total_virus;</span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; zero_point;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;wall[<span class="number">3</span>], virus[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">tmp[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spreadVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">copyMap();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">tmp[wall[i].x][wall[i].y] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_virus; ++i) &#123;</span><br><span class="line">q.push(&#123; virus[i].x, virus[i].y &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minus_safe_area = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; tmp[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">tmp[d_x][d_y] = <span class="number">2</span>;</span><br><span class="line">minus_safe_area++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; safe_area - minus_safe_area) ans = safe_area - minus_safe_area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildWall</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) &#123;</span><br><span class="line">spreadVirus();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == zero_point.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">buildWall(idx + <span class="number">1</span>, cnt);</span><br><span class="line">wall[cnt].x = zero_point[idx].first;</span><br><span class="line">wall[cnt].y = zero_point[idx].second;</span><br><span class="line">buildWall(idx + <span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">map</span>.resize(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i].resize(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>) zero_point.push_back(&#123; i, j &#125;);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">virus[total_virus].x = i;</span><br><span class="line">virus[total_virus++].y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">safe_area = zero_point.<span class="built_in">size</span>();</span><br><span class="line">buildWall(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14502/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14499번 주사위 굴리기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14499/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14499/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14499-주사위-굴리기&quot;&gt;&lt;a href=&quot;#14499-주사위-굴리기&quot; class=&quot;headerlink&quot; title=&quot;#14499. 주사위 굴리기&quot;&gt;&lt;/a&gt;#14499. 주사위 굴리기&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14499-주사위-굴리기"><a href="#14499-주사위-굴리기" class="headerlink" title="#14499. 주사위 굴리기"></a>#14499. 주사위 굴리기</h1><p><a href="https://www.acmicpc.net/problem/14499" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x M 지도 위에 주사위 하나</li><li>오른쪽(동), 위쪽(북)</li><li>주사위 위치는 (x, y) 모든 면에 0 적혀 있음</li><li>지도에는 정수가 쓰여있고<br>주사위가 이동한 칸에 쓰여 있는 수가 0이면 주사위 바닥면 수가 지도로 복사<br>0이 아니면 지도위에 쓰여 있는 수가 주사위 바닥면으로 복사, 지도에 쓰여 있는 수는 0이 된다.</li></ul><p><strong>Goal: 주사위가 이동했을 때마다 주사위의 윗 면에 쓰여 있는 수를 출력<br>범위를 벗어나는 명령이면 움직이지 않고 출력도 하지 않는다.</strong></p><p>1: 오른쪽, 2: 왼쪽, 3: 위쪽, 4: 아래쪽으로 이동한다.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>주사위 6면의 정보를 가지고 있어야 한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> up = <span class="number">0</span>, down = <span class="number">0</span>, front = <span class="number">0</span>, back = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;dice;</span><br><span class="line"><span class="comment">// 윗면, 아랫면, 앞면, 뒷면, 왼면, 오른면</span></span><br></pre></td></tr></table></figure></li><li>주사위를 움직일 때 6면의 정보가 방향에 맞게 업데이트 되어야 한다.</li></ul><p>먼저 범위를 검사하고 검사한 후에 주사위 위치를 변경해준다.</p><ol><li>오른쪽 이동<br>위 → 오른 → 아래 → 왼 → 위</li><li>왼쪽 이동<br>위 → 왼 → 아래  → 오른 → 위</li><li>위쪽 이동<br>위 → 뒤 → 아래 → 앞 → 위</li><li>아래쪽 이동<br>위 → 앞 → 아래 → 뒤 → 위</li></ol><p>값을 제대로 업데이트 하기 위해서 사이클이 시작되기 전 값을 저장해놓고 순서대로 덮어씌우는 방식으로 값을 갱신한다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveDice</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d_x = dice.x + dx[dir - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> d_y = dice.y + dy[dir - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y)) &#123;</span><br><span class="line">dice.x = d_x; dice.y = d_y;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">1</span>) &#123; <span class="comment">// right</span></span><br><span class="line">tmp = dice.left;</span><br><span class="line">dice.left = dice.down;</span><br><span class="line">dice.down = dice.right;</span><br><span class="line">dice.right = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123; <span class="comment">// left</span></span><br><span class="line">tmp = dice.right;</span><br><span class="line">dice.right = dice.down;</span><br><span class="line">dice.down = dice.left;</span><br><span class="line">dice.left = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123; <span class="comment">// up</span></span><br><span class="line">tmp = dice.front;</span><br><span class="line">dice.front = dice.down;</span><br><span class="line">dice.down = dice.back;</span><br><span class="line">dice.back = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">4</span>) &#123; <span class="comment">// down</span></span><br><span class="line">tmp = dice.back;</span><br><span class="line">dice.back = dice.down;</span><br><span class="line">dice.down = dice.front;</span><br><span class="line">dice.front = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>움직였을 때<ul><li>지도의 칸이 0이면, 주사위 바닥면 수 → 지도</li><li>지도의 칸이 0이 아니면, 지도 → 주사위 바닥면 수 &amp;  0 → 지도<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[dice.x][dice.y] == <span class="number">0</span>) <span class="built_in">map</span>[dice.x][dice.y] = dice.down;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dice.down = <span class="built_in">map</span>[dice.x][dice.y];</span><br><span class="line"><span class="built_in">map</span>[dice.x][dice.y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dice.up &lt;&lt; <span class="string">"\n"</span>; <span class="comment">// 윗면 출력</span></span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> up = <span class="number">0</span>, down = <span class="number">0</span>, front = <span class="number">0</span>, back = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;dice;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveDice</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d_x = dice.x + dx[dir<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> d_y = dice.y + dy[dir<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y)) &#123;</span><br><span class="line">dice.x = d_x; dice.y = d_y;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">1</span>) &#123; <span class="comment">// right</span></span><br><span class="line">tmp = dice.left;</span><br><span class="line">dice.left = dice.down;</span><br><span class="line">dice.down = dice.right;</span><br><span class="line">dice.right = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123; <span class="comment">// left</span></span><br><span class="line">tmp = dice.right;</span><br><span class="line">dice.right = dice.down;</span><br><span class="line">dice.down = dice.left;</span><br><span class="line">dice.left = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123; <span class="comment">// up</span></span><br><span class="line">tmp = dice.front;</span><br><span class="line">dice.front = dice.down;</span><br><span class="line">dice.down = dice.back;</span><br><span class="line">dice.back = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">4</span>) &#123; <span class="comment">// down</span></span><br><span class="line">tmp = dice.back;</span><br><span class="line">dice.back = dice.down;</span><br><span class="line">dice.down = dice.front;</span><br><span class="line">dice.front = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[dice.x][dice.y] == <span class="number">0</span>) <span class="built_in">map</span>[dice.x][dice.y] = dice.down;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dice.down = <span class="built_in">map</span>[dice.x][dice.y];</span><br><span class="line"><span class="built_in">map</span>[dice.x][dice.y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dice.up &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> start_x, start_y, k, dir;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; start_x &gt;&gt; start_y &gt;&gt; k;</span><br><span class="line">dice.x = start_x; dice.y = start_y;</span><br><span class="line"><span class="built_in">map</span>.resize(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i].resize(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; dir;</span><br><span class="line">moveDice(dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14499/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14226번 이모티콘</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14226/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14226/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14226-이모티콘&quot;&gt;&lt;a href=&quot;#14226-이모티콘&quot; class=&quot;headerlink&quot; title=&quot;#14226. 이모티콘&quot;&gt;&lt;/a&gt;#14226. 이모티콘&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14226-이모티콘"><a href="#14226-이모티콘" class="headerlink" title="#14226. 이모티콘"></a>#14226. 이모티콘</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/14226" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>화면에 있는 이모티콘 모두 클립보드에 저장</li><li>클립보드에 있는 이모티콘 화면에 붙여넣기</li><li>화면에 있는 이모티콘 하나 삭제</li></ol><p>클립보드에 이모티콘이 하나라도 있어야 2번 작업 가능</p><p>화면에 이모티콘이 하나라도 있어야 3번 작업 가능</p><p>1번 작업은 언제나 수행 가능</p><p>2번 작업은 화면에 있는 이모티콘 + 클립보드 이모티콘이 목표(만들어야 할 이모티콘 수)이하여야 한다.</p><p>3번 작업은 화면에 있는 이모티콘 - 1이 0이상이어야 한다. (목표 이모티콘 최소 수가 2이기에 1이상이어도 상관 없다.)</p><p>각 작업은 1초로 동일한 시간이 걸리기에 BFS로 해결한다.</p><ul><li>queue에는 &lt;화면에 있는 이모티콘 수, 클립보드에 있는 이모티콘 수&gt;가 저</li><li>중복되지 않도록 dist라는 배열에 [화면][클립보드] 첨자를 이용해 시간을 저장한다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">q.push(&#123; <span class="number">1</span>, <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> s, c;</span><br><span class="line">tie(s, c) = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (dist[s][s] == <span class="number">0</span>) &#123; <span class="comment">// 화면에 있는 이모티콘 클립보드에 복사</span></span><br><span class="line">dist[s][s] = dist[s][c] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; s, s &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s+c &lt;= n &amp;&amp; dist[s+c][c] == <span class="number">0</span>) &#123; <span class="comment">// 클립보드 화면에 붙여넣기</span></span><br><span class="line">dist[s + c][c] = dist[s][c] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; s + c, c &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; dist[s - <span class="number">1</span>][c] == <span class="number">0</span>) &#123; <span class="comment">// 화면에 있는 이모티콘 -1</span></span><br><span class="line">dist[s - <span class="number">1</span>][c] = dist[s][c] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; s - <span class="number">1</span>, c &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123; <span class="comment">// 최솟값 찾기</span></span><br><span class="line"><span class="keyword">if</span> (ans &gt; dist[n][i] &amp;&amp; dist[n][i] != <span class="number">0</span>) ans = dist[n][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14226/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 13913번 숨바꼭질 4</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13913/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13913/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;13913-숨바꼭질-4&quot;&gt;&lt;a href=&quot;#13913-숨바꼭질-4&quot; class=&quot;headerlink&quot; title=&quot;#13913. 숨바꼭질 4&quot;&gt;&lt;/a&gt;#13913. 숨바꼭질 4&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="13913-숨바꼭질-4"><a href="#13913-숨바꼭질-4" class="headerlink" title="#13913. 숨바꼭질 4"></a>#13913. 숨바꼭질 4</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/13913" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>BFS 탐색을 하되, 경로를 알고 있어야 하기에 <code>path[to] = from</code> 을 사용한다.</li><li>즉, 5→6→8→10 이라면 path[10]에는 8, path[8]에는 6이 저장되어 있다.</li><li><p>경로를 출력하기 위해 재귀함수를 사용한다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">5</span>, <span class="number">10</span>) <span class="number">4.</span> 출력</span><br><span class="line">(<span class="number">5</span>, <span class="number">8</span>) <span class="number">3.</span> 출력</span><br><span class="line">(<span class="number">5</span>, <span class="number">6</span>)  <span class="number">2.</span> 출력</span><br><span class="line">(<span class="number">5</span>, <span class="number">5</span>) <span class="number">1.</span> 출력</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3></li><li><p>code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="keyword">bool</span> end_flag;</span><br><span class="line"><span class="keyword">int</span> dist[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : path) <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(N);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> n = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (n == K) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; dist[n - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[n - <span class="number">1</span>] = dist[n] + <span class="number">1</span>;</span><br><span class="line">q.push(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt; MAX &amp;&amp; dist[n + <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[n + <span class="number">1</span>] = dist[n] + <span class="number">1</span>;</span><br><span class="line">q.push(n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * n &lt;= MAX &amp;&amp; dist[<span class="number">2</span> * n] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[<span class="number">2</span> * n] = dist[n] + <span class="number">1</span>;</span><br><span class="line">q.push(<span class="number">2</span> * n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (end_flag == <span class="literal">true</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (dist[K] == cnt &amp;&amp; n == K) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dist[K] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">PrintPath();</span><br><span class="line">end_flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dist[K] == cnt) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">path.push_back(n - <span class="number">1</span>);</span><br><span class="line">DFS(n - <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">path.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt; MAX) &#123;</span><br><span class="line">path.push_back(n +<span class="number">1</span>);</span><br><span class="line">DFS(n + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">path.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * n &lt;= MAX) &#123;</span><br><span class="line">path.push_back(<span class="number">2</span> * n);</span><br><span class="line">DFS(<span class="number">2</span> * n, cnt + <span class="number">1</span>);</span><br><span class="line">path.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BFS();</span><br><span class="line">path.push_back(N);</span><br><span class="line">DFS(N, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BFS + DFS로 구하니 시간초과 (BFS로 depth를 구하고 그 depth만큼 DFS를 수행하도록 하였다.)</p></li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="keyword">int</span> dist[MAX + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> path[MAX + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (from != to) &#123;</span><br><span class="line">PrintPath(from, path[to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; to &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(N);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> n = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (n == K) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; dist[n - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[n - <span class="number">1</span>] = dist[n] + <span class="number">1</span>;</span><br><span class="line">path[n - <span class="number">1</span>] = n;</span><br><span class="line">q.push(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt; MAX &amp;&amp; dist[n + <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[n + <span class="number">1</span>] = dist[n] + <span class="number">1</span>;</span><br><span class="line">path[n + <span class="number">1</span>] = n;</span><br><span class="line">q.push(n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * n &lt;= MAX &amp;&amp; dist[<span class="number">2</span> * n] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[<span class="number">2</span> * n] = dist[n] + <span class="number">1</span>;</span><br><span class="line">path[<span class="number">2</span> * n] = n;</span><br><span class="line">q.push(<span class="number">2</span> * n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BFS();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dist[K] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">PrintPath(N, K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13913/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 13460번 구슬 탈출 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13460/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13460/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;13460-구슬-탈출-2&quot;&gt;&lt;a href=&quot;#13460-구슬-탈출-2&quot; class=&quot;headerlink&quot; title=&quot;#13460. 구슬 탈출 2&quot;&gt;&lt;/a&gt;#13460. 구슬 탈출 2&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="13460-구슬-탈출-2"><a href="#13460-구슬-탈출-2" class="headerlink" title="#13460. 구슬 탈출 2"></a>#13460. 구슬 탈출 2</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/13460" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>시뮬레이션 문제이다.</li><li>어떤 방향으로 기울일지 정해야 한다. (모든 경우를 구해야 한다. - 재귀 사용)<br>이전 방향과 반대되는 방향으로 이동할 필요는 없다.</li><li>맵을 갱신할 필요는 없고 구슬의 위치만 변경하면 된다.</li><li>각 경우마다 구슬의 위치를 다음 작업에 넘겨주어야 한다. (재귀 함수 인자로 넘기기)</li><li>기울이기 재귀함수<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Move(이동 횟수, 이전 방향, 빨간 구슬 위치, 파란 구슬 위치)</span><br><span class="line"> <span class="keyword">if</span> 이동 횟수 &gt; <span class="number">10</span>  <span class="keyword">return</span></span><br><span class="line"> <span class="keyword">if</span> 파란 구슬이 구멍에 들어간 경우 <span class="keyword">return</span></span><br><span class="line"> <span class="keyword">if</span> 빨간 구슬만 구멍에 들어간 경우 최솟값 갱신 <span class="keyword">return</span></span><br><span class="line"> <span class="number">4</span> 방향 이동</span><br><span class="line">  벽이 아닐 때까지, 구멍 일 때까지 이동</span><br><span class="line">  <span class="comment">// 빨간 구슬 이동</span></span><br><span class="line">  <span class="comment">// 파란 구슬 이동</span></span><br><span class="line">  이동이 끝나면</span><br><span class="line">  <span class="keyword">if</span> 위치가 겹칠 때</span><br><span class="line">     <span class="keyword">if</span> 구멍이면 Move(이동 횟수 + <span class="number">1</span>, 방향, 위치)</span><br><span class="line">     <span class="keyword">else</span> </span><br><span class="line">        같은 행일 때</span><br><span class="line">같은 열일 때</span><br><span class="line">위치 이동</span><br><span class="line">        Move(이동횟수 +<span class="number">1</span>, 방향, 위치)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"> Move(이동횟수 +<span class="number">1</span>, 방향, 위치)</span><br></pre></td></tr></table></figure>빨간 구슬이 방향에 맞게 이동하고, 그 후 파란 구슬이 이동한다.</li></ul><p>구멍에 들어갔거나 같은 행이거나 같은 열이면 위치가 같게 된다. 이때 방향과 처음 위치에 맞게 방향을 바꿔준다.</p><p>갱신이 끝났으면 재귀함수를 호출해준다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> g_x, g_y;</span><br><span class="line"><span class="keyword">char</span> board[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> count_dir[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Red</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Blue</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> prior_dir, Red r, Blue b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (b.x == g_x &amp;&amp; b.y == g_y) <span class="keyword">return</span>; <span class="comment">// 파란 구슬 구멍 통과</span></span><br><span class="line"><span class="keyword">if</span> (r.x == g_x &amp;&amp; r.y == g_y) &#123; <span class="comment">// 빨간 구슬만 구멍 통과</span></span><br><span class="line"><span class="keyword">if</span> (ans &gt; cnt) ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line">Red nr = &#123; r.x, r.y &#125;; Blue nb = &#123; b.x, b.y &#125;; <span class="comment">// next</span></span><br><span class="line"><span class="keyword">if</span> (prior_dir != <span class="number">-1</span> &amp;&amp; count_dir[prior_dir] == dir) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[nr.x + dx[dir]][nr.y + dy[dir]] == <span class="string">'#'</span>) <span class="keyword">break</span>;</span><br><span class="line">nr.x += dx[dir];</span><br><span class="line">nr.y += dy[dir];</span><br><span class="line"><span class="keyword">if</span> (board[nr.x][nr.y] == <span class="string">'O'</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[nb.x + dx[dir]][nb.y + dy[dir]] == <span class="string">'#'</span>) <span class="keyword">break</span>;</span><br><span class="line">nb.x += dx[dir];</span><br><span class="line">nb.y += dy[dir];</span><br><span class="line"><span class="keyword">if</span> (board[nb.x][nb.y] == <span class="string">'O'</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (nr.x == nb.x &amp;&amp; nr.y == nb.y) &#123; <span class="comment">// 겹칠 때</span></span><br><span class="line"><span class="keyword">if</span> (board[nr.x][nr.y] == <span class="string">'O'</span>) Move(cnt + <span class="number">1</span>, dir, nr, nb);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (r.x == b.x) &#123; <span class="comment">// 같은 행</span></span><br><span class="line"><span class="keyword">if</span> (r.y &lt; b.y) &#123; <span class="comment">// R B</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">2</span>) nb.y++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) nr.y--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// B R</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">2</span>) nr.y++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) nb.y--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (r.y == b.y) &#123; <span class="comment">// 같은 열</span></span><br><span class="line"><span class="keyword">if</span> (r.x &lt; b.x) &#123; <span class="comment">// R이 B보다 위</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">0</span>) nb.x++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) nr.x--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// R이 B보다 아래</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">0</span>) nr.x++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) nb.x--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Move(cnt + <span class="number">1</span>, dir, nr, nb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Move(cnt + <span class="number">1</span>, dir, nr, nb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">Red r; Blue b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; board[i][j];</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">g_x = i; g_y = j;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">'R'</span>) &#123;</span><br><span class="line">r.x = i; r.y = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">'B'</span>) &#123;</span><br><span class="line">b.x = i; b.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Move(<span class="number">0</span>, <span class="number">-1</span>, r, b);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">1e9</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="문제-풀고나서-찾아본-깔끔한-코드"><a href="#문제-풀고나서-찾아본-깔끔한-코드" class="headerlink" title="문제 풀고나서 찾아본 깔끔한 코드"></a>문제 풀고나서 찾아본 깔끔한 코드</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> rx, ry, bx, by;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">11</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> rx, <span class="keyword">int</span> ry, <span class="keyword">int</span> bx, <span class="keyword">int</span> by, <span class="keyword">int</span> mx, <span class="keyword">int</span> my, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> rm = <span class="number">0</span>, bm = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (mx != my)&#123;</span><br><span class="line"><span class="keyword">while</span> (a[bx + mx][by + my] - <span class="string">'#'</span>)&#123;</span><br><span class="line">bx += mx;</span><br><span class="line">by += my;</span><br><span class="line">bm++;</span><br><span class="line"><span class="keyword">if</span> (!(a[bx][by] - <span class="string">'O'</span>))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[rx + mx][ry + my] - <span class="string">'#'</span>)&#123;</span><br><span class="line">rx += mx;</span><br><span class="line">ry += my;</span><br><span class="line">rm++;</span><br><span class="line"><span class="keyword">if</span> (!(a[rx][ry] - <span class="string">'O'</span>))&#123;</span><br><span class="line">ans = ans &lt; cnt ? ans : cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rx == bx &amp;&amp; ry == by)</span><br><span class="line"><span class="keyword">if</span> (rm &lt; bm)</span><br><span class="line">bx -= mx, by -= my;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rx -= mx, ry -= my;</span><br><span class="line"><span class="keyword">if</span> (mx == <span class="number">0</span>)&#123;</span><br><span class="line">go(rx, ry, bx, by, <span class="number">1</span>, <span class="number">0</span>, cnt + <span class="number">1</span>);</span><br><span class="line">go(rx, ry, bx, by, <span class="number">-1</span>, <span class="number">0</span>, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (my == <span class="number">0</span>)&#123;</span><br><span class="line">go(rx, ry, bx, by, <span class="number">0</span>, <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">go(rx, ry, bx, by, <span class="number">0</span>, <span class="number">-1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m - <span class="number">1</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">'R'</span>)</span><br><span class="line">rx = i, ry = j;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">'B'</span>)</span><br><span class="line">bx = i, by = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">go(rx, ry, bx, by, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans &lt; <span class="number">11</span> ? ans : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13460/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 12851번 숨바꼭질 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12851/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12851/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;12851-숨바꼭질-2&quot;&gt;&lt;a href=&quot;#12851-숨바꼭질-2&quot; class=&quot;headerlink&quot; title=&quot;#12851. 숨바꼭질 2&quot;&gt;&lt;/a&gt;#12851. 숨바꼭질 2&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="12851-숨바꼭질-2"><a href="#12851-숨바꼭질-2" class="headerlink" title="#12851. 숨바꼭질 2"></a>#12851. 숨바꼭질 2</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/12851" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>방법의 수를 구하는 것이 추가가 되었다.</li><li>이는 DP를 활용하여 구한다.</li><li>방문하지 않은 경로라면 방법의 수는 그대로 유지</li><li>방문한 경우 + 거리 차이가 1인 경우에만 방법의 수+1<br>거리 차이가 1인 경우에만 최소비용을 만족하는 경로이기 때문이다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dist[MAX + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[MAX + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">q.push(N);</span><br><span class="line">visit[N] = <span class="literal">true</span>;</span><br><span class="line">dist[N] = <span class="number">0</span>;</span><br><span class="line">cnt[N] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> next : &#123;x - <span class="number">1</span>, x + <span class="number">1</span>, x * <span class="number">2</span>&#125;) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= next &amp;&amp; next &lt;= MAX) &#123;</span><br><span class="line"><span class="keyword">if</span> (!visit[next]) &#123;</span><br><span class="line">visit[next] = <span class="literal">true</span>;</span><br><span class="line">dist[next] = dist[x] + <span class="number">1</span>;</span><br><span class="line">cnt[next] = cnt[x];</span><br><span class="line">q.push(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dist[next] == dist[x] + <span class="number">1</span>) &#123;</span><br><span class="line">cnt[next] += cnt[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line">BFS();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dist[K] &lt;&lt; <span class="string">"\n"</span> &lt;&lt; cnt[K] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12851/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 12100번 2048(Easy)</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12100/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12100/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;12100-2048-Easy&quot;&gt;&lt;a href=&quot;#12100-2048-Easy&quot; class=&quot;headerlink&quot; title=&quot;#12100. 2048(Easy)&quot;&gt;&lt;/a&gt;#12100. 2048(Easy)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;htt
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="12100-2048-Easy"><a href="#12100-2048-Easy" class="headerlink" title="#12100. 2048(Easy)"></a>#12100. 2048(Easy)</h1><p><a href="https://www.acmicpc.net/problem/12100" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 크기의 보드판</li><li>한 번의 이동 : 보드판에 있는 모든 블록 상하좌우 중 한 방향으로 쭉 이동<br>단순히 한 칸이 아닌 <strong>해당 방향 이동할 수 있는 곳 끝까지</strong></li><li><strong>같은 값</strong>을 가진 블록이 충돌하면 하나로 합쳐짐<br>(한 번 합쳐지면 다시 합칠 수 없음 → 한 번 이동할 때 연속으로 합쳐질 수 없음 2개 → 1개인 경우만 존재)<br>블록이 합쳐지면 해당 블록의 숫자를 더한 값이 된다.</li></ul><p><strong>Goal: 최대 5번 이동해서 만들 수 있는 가장 큰 블록의 값 구하기</strong></p><ul><li><p>입력</p><p>  N: ~20<br>  0: 빈칸<br>  2^i(i= 1, 2…10): 블록 // 적어도 하나 주어짐</p></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><strong>최대</strong> 5번 이동이니 한 번 이동하면서 최대 블록 값을 갱신해주어야 한다.<br>(꼭 안그래도 되겠지만)</li></ul><ol><li>5번 이동하는 조합을 구한다.</li><li>그 이동에 맞게 블록을 이동시킨다.</li></ol><ul><li>해당 번째의 방향을 저장할 배열을 이용해 5개의 방향을 저장해놓고, 모두 저장했을 때 보드판을 움직이도록 한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">5</span>) &#123; <span class="comment">// 방향 5개가 저장되었을 때</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123; <span class="comment">// 입력값인 temp를 board로 옮기고 작업을 수행한다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123; </span><br><span class="line">moveBlock(해당 방향);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">direction[idx] = i;</span><br><span class="line">dfs(idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>moveBlock()</code> 블럭 이동</li></ul><p>움직이는 방향이 좌우면 한 행의 열이 바뀌면서 board위의 블럭들이 바뀐다.<br>이때 좌로 이동하면 오른쪽부터 탐색, 우로 이동하면 왼쪽부터 탐색해야 한다.</p><p>움직이는 방향이 상하일 때도 위와 같은 방식이다. 이를 잘 구분해주어 update할 때 행, 열의 인덱스를 반영한다.</p><ul><li><code>update()</code> 아래 코드는 좌우로 이동할 때 블럭들을 갱신하는 함수다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCol</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span> &amp;&amp; board[i][j] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[i][value_idx] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[i][value_idx]);</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[i][j];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>3가지 경우를 확인하고 각 작업을 수행한다.</li></ul><ol><li>블럭이 없는 빈 곳: queue에 해당 위치를 넣어준다. (블럭을 옮길 때 쓰임)</li><li>합칠 대상이 되는 블럭: 이전에 저장해놓은 블럭 값과 같으면 합칠 수 있다.<br>이전에 저장해놓은 블럭의 값을 2배로 하고 합칠 대상이 되는 블럭은 0으로 바꾼뒤 이 위치를 queue에 넣어준다. </li><li>합쳐질 가능성이 있는 블럭: 이 값은 나중에 합쳐질 수 있으므로 해당 값과 위치를 저장해 놓는다.<br>단, queue가 비어있지 않다면 이 블럭의 위치를 옮겨주어야 하기에 queue에서 pop한 0의 위치로 해당 블럭 값을 넣어준다.<br>이렇게 되면 바뀌기 전 블럭은 0이 되고 이 위치를 다시 queue에 넣어주어야 한다.<br>마지막으로 위치가 바뀐 지점을 갱신해주면 된다.</li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, value, value_idx, zero_idx, answer = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> board[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> temp[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> direction[<span class="number">5</span>]; <span class="comment">// 방향 조합 0:상, 1:하, 2:좌, 3:우</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCol</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span> &amp;&amp; board[i][j] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[i][value_idx] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[i][value_idx]);</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">&#125;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[i][j];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateRow</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[j][i] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span> &amp;&amp; board[j][i] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[value_idx][i] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[value_idx][i]);</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[zero_idx][i] = value;</span><br><span class="line">&#125;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[j][i];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">board[zero_idx][i] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveBlock</span><span class="params">(<span class="keyword">int</span> <span class="built_in">move</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; zero;</span><br><span class="line">value = <span class="number">0</span>; value_idx = <span class="number">0</span>; zero_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">0</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">1</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">moveBlock(direction[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">direction[idx] = i;</span><br><span class="line">dfs(idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드가 틀린 Test case</p><pre><code>72 2 2 2 2 2 22 0 2 2 2 2 22 0 2 2 2 2 22 0 2 2 2 2 22 2 2 0 2 2 2 2 2 2 2 2 2 02 2 2 2 2 2 0-&gt; 32 // output</code></pre><p>디버깅용 코드를 보면 알겠지만 방향을 3(오른쪽)으로 했을 때 board의 블럭들을 확인해보니<br>실제로 잘 합쳐지지 않았던 것이다. (<strong>solution</strong>에는 정답 코드를 반영)</p><ul><li>위 코드의 빨간 줄을 없애주었다. 합쳐지면 0이 있는 곳을 찾아 넣는 작업을 하면 안되기 때문이다. 이 블럭은 합쳐졌고, 이 위치는 0으로 채우고 이 인덱스를 queue에 넣어주기만 하면 된다.</li><li>queue가 비어있지 않다면 해당 지점에 블럭을 놓는 작업이 있는데<br>이때,  <strong>value_idx = zero_idx</strong> 를 추가해주어야 해당 블럭의 바뀐 위치도 알 수 있다.<br>이를 추가하지 않으면 바뀌기 전 위치가 남아있어 합쳐지지 않는다.</li></ul><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>코드 보기<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, value, value_idx, zero_idx, answer = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> board[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> temp[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> direction[<span class="number">5</span>]; <span class="comment">// 방향 조합 0:상, 1:하, 2:좌, 3:우</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCol</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span> &amp;&amp; board[i][j] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[i][value_idx] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[i][value_idx]);</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[i][j];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d-%d번재: \n", i, j);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line"><span class="comment">//for (int j = 0; j &lt; n; ++j) &#123;</span></span><br><span class="line"><span class="comment">//printf("%d ", board[i][j]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateRow</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[j][i] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span> &amp;&amp; board[j][i] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[value_idx][i] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[value_idx][i]);</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[j][i];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">board[zero_idx][i] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveBlock</span><span class="params">(<span class="keyword">int</span> <span class="built_in">move</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; zero;</span><br><span class="line">value = <span class="number">0</span>; value_idx = <span class="number">0</span>; zero_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">0</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">1</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">moveBlock(direction[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">direction[idx] = i;</span><br><span class="line">dfs(idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dfs(0);</span></span><br><span class="line">direction[<span class="number">0</span>] = <span class="number">3</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">moveBlock(direction[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, value, value_idx, zero_idx, answer = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> board[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> temp[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> direction[<span class="number">5</span>]; <span class="comment">// 방향 조합 0:상, 1:하, 2:좌, 3:우</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCol</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span> &amp;&amp; board[i][j] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[i][value_idx] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[i][value_idx]);</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[i][j];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateRow</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[j][i] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span> &amp;&amp; board[j][i] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[value_idx][i] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[value_idx][i]);</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[j][i];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">board[zero_idx][i] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveBlock</span><span class="params">(<span class="keyword">int</span> <span class="built_in">move</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; zero;</span><br><span class="line">value = <span class="number">0</span>; value_idx = <span class="number">0</span>; zero_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">0</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">1</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">moveBlock(direction[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">direction[idx] = i;</span><br><span class="line">dfs(idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://user-images.githubusercontent.com/46062199/73121360-abfb5c00-3fbc-11ea-8669-ec3415c79ada.png" alt></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12100/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11729번 하노이 탑 이동 순서</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11729/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11729/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11729-하노이-탑-이동-순서&quot;&gt;&lt;a href=&quot;#11729-하노이-탑-이동-순서&quot; class=&quot;headerlink&quot; title=&quot;#11729. 하노이 탑 이동 순서&quot;&gt;&lt;/a&gt;#11729. 하노이 탑 이동 순서&lt;/h1&gt;&lt;h3 id=&quot;P
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11729-하노이-탑-이동-순서"><a href="#11729-하노이-탑-이동-순서" class="headerlink" title="#11729. 하노이 탑 이동 순서"></a>#11729. 하노이 탑 이동 순서</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N개의 원판</li><li>첫 번째 장대 → 세 번째 장대</li><li>한 번에 한 개의 원판만 다른 탑으로 이동 가능</li><li>원판 위 &lt; 원판 아래</li><li>원판 이동 순서 최소화</li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><del>굳이 이를 최소화시키는 방법을 생각하기보다 컴퓨터가 알아서 최소의 방법을 계산하도록 하자.</del>  → 하노이 탑도 알고리즘이 존재</p><ul><li>먼저 하나의 원판만 있을 때를 생각해보자</li></ul><p><img src="https://user-images.githubusercontent.com/46062199/73121288-00520c00-3fbc-11ea-936d-5cb92d287123.png" alt></p><p>보조 기둥 필요없이 바로 목표 기둥으로 이동하면 된다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// recursive frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(원반 개수, 시작, 보조, 목표)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(원반의 개수 == <span class="number">1</span>) &#123;</span><br><span class="line">시작-&gt;목표</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>원반의 개수가 1보다 클때는 어떻게 해야 할까?</p><p><img src="https://user-images.githubusercontent.com/46062199/73121290-034cfc80-3fbc-11ea-934a-c8215d11f3e0.png" alt></p><p>가장 큰 원반을 제외한 모든 원반이 보조 기둥에 있어야 한다. → <strong>이게 포인트</strong></p><p><img src="https://user-images.githubusercontent.com/46062199/73121292-03e59300-3fbc-11ea-9c02-1ee4690168dd.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 맨 아래에 있는 원반을 제외한 모든 원반을 보조 기둥으로 옮긴다.</span></span><br><span class="line"><span class="built_in">move</span>(원반개수<span class="number">-1</span>, 시작, 목표, 보조); <span class="comment">// 시작 -&gt; 보조</span></span><br></pre></td></tr></table></figure><br>그러면 가장 큰 원반은 이 부분이 적용된다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(원반의 개수 == <span class="number">1</span>) &#123;</span><br><span class="line">시작-&gt;목표</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>가장 큰 원반이 목표 기둥으로 이동하였고, 이제 이 원반은 없는 것으로 보아도 무방하다. 나머지 원반들이 모든 기둥을 이동할 수 있기 때문이다.</p><p><img src="https://user-images.githubusercontent.com/46062199/73121293-03e59300-3fbc-11ea-9631-44f7b5937c96.png" alt></p><p>그러면 이제 다시 n-1개의 원반을 가지고 위와 같은 작업을 진행한다.<br>이때는 원래 보조 기둥을 시작 기둥으로, 시작 기둥을 보조 기둥으로 생각해야 한다.</p><p><img src="https://user-images.githubusercontent.com/46062199/73121294-03e59300-3fbc-11ea-8ce0-397a59024104.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">move</span>(원반개수<span class="number">-1</span>, 보조, 시작, 목표);</span><br></pre></td></tr></table></figure><br>Recursive frame의 내용을 완성해보자.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> start, <span class="keyword">int</span> temp, <span class="keyword">int</span> goal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// start -&gt; goal</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">move</span>(count<span class="number">-1</span>, start, goal, temp); <span class="comment">// start-&gt;temp</span></span><br><span class="line">    <span class="comment">// start -&gt; goal</span></span><br><span class="line">    <span class="built_in">move</span>(count<span class="number">-1</span>, temp, start, goal); <span class="comment">// temp-&gt;goal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>주석으로 되어 있는 부분은 실질적으로 어떤 기둥에서 어떤 기둥으로 원반이 움직였는지를 나타내는 부분이다.</p><p>좀 더 깊은 이해를 위해 원반의 개수가 3개일 때 재귀함수 호출 순서를 작성하였다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">move</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">move</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>) <span class="comment">// 1, 2번 원반이 2번 기둥으로 가는 과정</span></span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) </span><br><span class="line"><span class="number">1</span>에서 <span class="number">3</span>으로 이동 (<span class="number">1</span>번 원반)</span><br><span class="line"><span class="number">1</span>에서 <span class="number">2</span>로 이동 (<span class="number">2</span>번 원반)</span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">3</span>에서 <span class="number">2</span>로 이동(<span class="number">1</span>번 원반)</span><br><span class="line"><span class="number">1</span>에서 <span class="number">3</span>으로 이동(<span class="number">3</span>번 원반)</span><br><span class="line"><span class="built_in">move</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>) <span class="comment">// 1, 2번 원반이 3번 기둥으로 가는 과정</span></span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">2</span>에서 <span class="number">1</span>로 이동(<span class="number">1</span>번 원반)</span><br><span class="line"><span class="number">2</span>에서 <span class="number">3</span>으로 이동(<span class="number">2</span>번 원반)</span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">1</span>에서 <span class="number">3</span>으로 이동 (<span class="number">1</span>번 원반)</span><br></pre></td></tr></table></figure></p><h3 id="전체-코드"><a href="#전체-코드" class="headerlink" title="전체 코드"></a>전체 코드</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; answer;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> start, <span class="keyword">int</span> temp, <span class="keyword">int</span> goal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>) &#123;</span><br><span class="line">        answer.push_back(make_pair(start, goal));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    move(count<span class="number">-1</span>, start, goal, temp); <span class="comment">// start-&gt;temp</span></span><br><span class="line">    answer.push_back(make_pair(start, goal));</span><br><span class="line">    move(count<span class="number">-1</span>, temp, start, goal); <span class="comment">// temp-&gt;goal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">   move(n, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; answer.size() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> v : answer) &#123;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; v.first &lt;&lt; <span class="string">" "</span> &lt;&lt; v.second &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이동 횟수부터 출력해야 하므로, pair를 만들어 vector에 넣어주었다.</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11729/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11651번 좌표 정렬하기 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11651/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11651/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11651-좌표-정렬하기-2&quot;&gt;&lt;a href=&quot;#11651-좌표-정렬하기-2&quot; class=&quot;headerlink&quot; title=&quot;#11651. 좌표 정렬하기 2&quot;&gt;&lt;/a&gt;#11651. 좌표 정렬하기 2&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11651-좌표-정렬하기-2"><a href="#11651-좌표-정렬하기-2" class="headerlink" title="#11651. 좌표 정렬하기 2"></a>#11651. 좌표 정렬하기 2</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>2차원 평면 위의 점 N개</li><li>y좌표 증가 순으로 정렬<ul><li>같다면 x좌표 증가 순으로 정렬</li></ul></li></ul><p>즉, y좌표 오름차순(같다면 x좌표 오름차순)으로 정렬하는 문제이다.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>2차원 vector에 (y, x)를 담는다. → 정렬 때문</li><li>sort함수를 사용 (위 문제 조건처럼 정렬된다.)</li><li>출력은 거꾸로 한다.</li></ul><p>iostream 헤더 파일의 cin과 cout을 쓰면 <strong>시간초과</strong> 되기에 cstdio를 사용하였다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; positions;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n, x, y;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;n);</span><br><span class="line">   positions.resize(n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">" %d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">        positions[i].push_back(y);</span><br><span class="line">        positions[i].push_back(x); </span><br><span class="line">   &#125;</span><br><span class="line">   sort(positions.<span class="built_in">begin</span>(), positions.<span class="built_in">end</span>());</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> v : positions) &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = v.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, v[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://user-images.githubusercontent.com/46062199/73121196-0693b880-3fbb-11ea-99a2-516190f126f4.png" alt></p><p>92ms가 상당히 빠른 것은 아니기에 다른 최적의 정렬 방법이 있을지도 모른다.</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11651/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11650번 좌표 정렬하기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11650/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11650/</guid>
      <pubDate>Sat, 25 Jan 2020 08:01:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11650-좌표-정렬하기&quot;&gt;&lt;a href=&quot;#11650-좌표-정렬하기&quot; class=&quot;headerlink&quot; title=&quot;#11650. 좌표 정렬하기&quot;&gt;&lt;/a&gt;#11650. 좌표 정렬하기&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11650-좌표-정렬하기"><a href="#11650-좌표-정렬하기" class="headerlink" title="#11650. 좌표 정렬하기"></a>#11650. 좌표 정렬하기</h1><p><a href="https://www.acmicpc.net/problem/11650" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>2차원 평면 (x, y)</li><li>x 오름차순 정렬<ul><li>x가 같다면 y 오름차순 정렬</li></ul></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><x, y>를 <strong>pair</strong>를 사용하여 저장한다.</x,></li><li>pair를 사용하여 정렬하면 위 문제의 조건대로 정렬된다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, x, y;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; answer;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">answer.push_back(make_pair(x, y));</span><br><span class="line">&#125;</span><br><span class="line">sort(answer.begin(), answer.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> ans : answer) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.first &lt;&lt; <span class="string">" "</span> &lt;&lt; ans.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11650/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11559번 Puyo Puyo</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11559/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11559/</guid>
      <pubDate>Sat, 25 Jan 2020 04:30:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11559-Puyo-Puyo&quot;&gt;&lt;a href=&quot;#11559-Puyo-Puyo&quot; class=&quot;headerlink&quot; title=&quot;#11559. Puyo Puyo&quot;&gt;&lt;/a&gt;#11559. Puyo Puyo&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11559-Puyo-Puyo"><a href="#11559-Puyo-Puyo" class="headerlink" title="#11559. Puyo Puyo"></a>#11559. Puyo Puyo</h1><p><a href="https://www.acmicpc.net/problem/11559" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>뿌요는 바닥이나 다른 뿌요가 있을 때까지 아래로 떨어짐</li><li>뿌요가 놓여지고 같은 색 뿌요가 4개 이상 상하좌우로 연결되어 있으면<br>연결된 같은 색 뿌요들이 모두 사라진다.</li><li>위 과정이 반복되면 1연쇄씩 늘어난다. (터지는 그룹이 동시에 여럿이라도 1연쇄)</li></ul><p>입력</p><pre><code>12*6의 문자.은 빈공간이외 뿌요 색깔 R, G, B, P, Y뿌요들이 전부 아래로 떨어진 뒤의 상태가 주어짐</code></pre><p><strong>Goal: 몇 연쇄가 되는지 출력, 안터지면 0 출력</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>다음과 같은 과정이 일어난다.</p><ol><li>현재 map에서 터뜨릴 수 있는 것들 터뜨리기</li><li>아래로 떨어뜨리기</li><li>위 과정 반복하기(더이상 터뜨릴 수 없는 경우 종료)</li></ol><ul><li>터뜨리기</li></ul><p>BFS를 활용하여 4개 이상 연속인지 확인을 한다.</p><pre><code>void bfs(현재 위치)    탐색용도 queue와 지울(터뜨릴)용도 queue 선언    현재 위치 넣어주고, check    탐색용도 queue를 전부 비울 때까지 탐색    탐색이 끝나면(더이상 갈 때가 없는 것)    지울 용도의 queue 크기가 4이상이면 터뜨리기</code></pre><ul><li><p>bfs 탐색이 끝나면 다음과 같이 4개 연속인 것들 터뜨리기</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMap</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;erase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!erase.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = erase.front().first;</span><br><span class="line"><span class="keyword">int</span> c = erase.front().second;</span><br><span class="line">erase.pop();</span><br><span class="line"><span class="built_in">map</span>[r][c] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 과정이 모든 map의 각 행과 열에서 이루어지면 그때 아래로 떨어뜨린다.<br>(모든 위치에서 BFS탐색이 끝난 경우)</p></li><li><p>아래로 떨어뜨리기</p></li></ul><ol><li>Queue를 이용하여 맨 아래에서 부터 위로 탐색을 시작하여 <strong>.</strong> 인 지점을 순서대로 넣어준다.</li><li>. 이 아니라면 queue에 들어간 순서대로 위치를 교환한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">point</span>.empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">point</span>.front().first;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">point</span>.front().second;</span><br><span class="line"><span class="built_in">point</span>.pop();</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[j][i];</span><br><span class="line"><span class="built_in">map</span>[j][i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3></li></ol><ul><li>틀린 코드<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> answer, len;</span><br><span class="line"><span class="keyword">bool</span> flag, loop = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; <span class="number">12</span> &amp;&amp; c &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">point</span>.empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">point</span>.front().first;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">point</span>.front().second;</span><br><span class="line"><span class="built_in">point</span>.pop();</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[j][i];</span><br><span class="line"><span class="built_in">map</span>[j][i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMap</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; erase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!erase.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = erase.front().first;</span><br><span class="line"><span class="keyword">int</span> c = erase.front().second;</span><br><span class="line">erase.pop();</span><br><span class="line"><span class="built_in">map</span>[r][c] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; erase)</span> </span>&#123;</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line">erase.push(&#123; r, c &#125;);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] ==  <span class="built_in">map</span>[r][c] &amp;&amp; <span class="built_in">map</span>[r][c] != <span class="string">'.'</span>) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>; flag = <span class="literal">true</span>;</span><br><span class="line">erase.push(&#123; x, y &#125;);</span><br><span class="line">len++;</span><br><span class="line">dfs(x, y, erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag &amp;&amp; len &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">loop = <span class="literal">true</span>;</span><br><span class="line">changeMap(erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; erase;</span><br><span class="line"><span class="keyword">while</span> (loop) &#123;</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="string">'.'</span> &amp;&amp; !check[i][j]) &#123;</span><br><span class="line">len = <span class="number">1</span>;</span><br><span class="line">dfs(i, j, erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (loop) &#123;</span><br><span class="line">update();</span><br><span class="line">answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>DFS로 하니까 map에서 연속인 것들을 제대로 지우지 못 한다는 것을 깨닫고<br>(실제 값 확인해보면 erase queue에 연속적으로 못 넣고 return하게 됨)</li></ul><p>BFS를 사용하여 쉽게 풀었다..(진작에 할걸)</p><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> loop = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; <span class="number">12</span> &amp;&amp; c &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">point</span>.empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">point</span>.front().first;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">point</span>.front().second;</span><br><span class="line"><span class="built_in">point</span>.pop();</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[j][i];</span><br><span class="line"><span class="built_in">map</span>[j][i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMap</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;erase)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!erase.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = erase.front().first;</span><br><span class="line"><span class="keyword">int</span> c = erase.front().second;</span><br><span class="line">erase.pop();</span><br><span class="line"><span class="built_in">map</span>[r][c] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, erase;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">erase.push(&#123; r, c &#125;);</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> length = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">r = q.front().first;</span><br><span class="line">c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] == <span class="built_in">map</span>[r][c] &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="string">'.'</span>) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">erase.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (erase.<span class="built_in">size</span>() &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">loop = <span class="literal">true</span>;</span><br><span class="line">changeMap(erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (loop) &#123;</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="string">'.'</span> &amp;&amp; !check[i][j]) &#123;</span><br><span class="line">bfs(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (loop) &#123;</span><br><span class="line">update();</span><br><span class="line">answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>디버깅용 코드<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> answer;</span><br><span class="line"><span class="keyword">bool</span> loop = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; <span class="number">12</span> &amp;&amp; c &lt; <span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">11</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="string">'.'</span>) <span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">point</span>.empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">point</span>.front().first;</span><br><span class="line"><span class="keyword">int</span> y = <span class="built_in">point</span>.front().second;</span><br><span class="line"><span class="built_in">point</span>.pop();</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="built_in">map</span>[j][i];</span><br><span class="line"><span class="built_in">map</span>[j][i] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">point</span>.push(&#123; j, i &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*printf("start\n");</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 12; ++i) &#123;</span></span><br><span class="line"><span class="comment">for (int j = 0; j &lt; 6; ++j) &#123;</span></span><br><span class="line"><span class="comment">printf("%c", map[i][j]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf("\n");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMap</span><span class="params">(<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;erase)</span> </span>&#123;</span><br><span class="line"><span class="comment">//printf("erase\n");</span></span><br><span class="line"><span class="keyword">while</span> (!erase.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = erase.front().first;</span><br><span class="line"><span class="keyword">int</span> c = erase.front().second;</span><br><span class="line"><span class="comment">//printf("%d %d\n", r, c);</span></span><br><span class="line">erase.pop();</span><br><span class="line"><span class="built_in">map</span>[r][c] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q, erase;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">erase.push(&#123; r, c &#125;);</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> length = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">r = q.front().first;</span><br><span class="line">c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[j];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y] &amp;&amp; <span class="built_in">map</span>[x][y] == <span class="built_in">map</span>[r][c] &amp;&amp; <span class="built_in">map</span>[x][y] != <span class="string">'.'</span>) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">erase.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (erase.<span class="built_in">size</span>() &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">loop = <span class="literal">true</span>;</span><br><span class="line">changeMap(erase);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (loop) &#123;</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="string">'.'</span> &amp;&amp; !check[i][j]) &#123;</span><br><span class="line">bfs(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (loop) &#123;</span><br><span class="line">update();</span><br><span class="line">answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>디버깅용 Test case</li></ul><h1 id="1-output-14"><a href="#1-output-14" class="headerlink" title="1. output : 14"></a>1. output : 14</h1><pre><code>Y.....B.....R.R...G.R...YG....YBR..YRR...YYYRBRBYRBGBBGBRBGRGBRBGRGBRBGR</code></pre><h1 id="2-output-1"><a href="#2-output-1" class="headerlink" title="2. output : 1"></a>2. output : 1</h1><pre><code>................................................R...........RRYYGGRRYYGG</code></pre><h1 id="3-output-2"><a href="#3-output-2" class="headerlink" title="3. output: 2"></a>3. output: 2</h1><pre><code>........R.....R.GG...GG...R...........R.........R.........G.RRY..GRRYYGG</code></pre>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11559/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11047번 동전 0</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11047/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11047/</guid>
      <pubDate>Sat, 25 Jan 2020 04:23:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11047-동전-0&quot;&gt;&lt;a href=&quot;#11047-동전-0&quot; class=&quot;headerlink&quot; title=&quot;#11047. 동전 0&quot;&gt;&lt;/a&gt;#11047. 동전 0&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/p
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11047-동전-0"><a href="#11047-동전-0" class="headerlink" title="#11047. 동전 0"></a>#11047. 동전 0</h1><p><a href="https://www.acmicpc.net/problem/11047" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>동전의 종류 N</li><li>동전을 적절히 사용해 합을 K로 만드려고 한다.</li></ul><p><strong>Goal: K를 만드는데 필요한 동전 개수의 최솟값 구하기</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><p>동전의 가치는 오름차순으로 주어지고<br>이전 가치보다 항상 몇 배 더 크다.</p><p>  4200<br>  1000 <em> 4<br>  100 </em> 2<br>  6개</p><p>  4790<br>  4000 <em> 4  790<br>  500 </em> 1  290<br>  100 <em> 2 90<br>  50 </em> 1 40<br>  10 * 4<br>  12개</p><p>  12<br>  1, 3, 4, 5<br>  5 <em> 2  2<br>  1 </em> 2<br>  4개<br>  하지만<br>  4 * 3<br>  3개</p></li></ul><p>위와 같은 상황이 일어날까?<br>동전의 가치가 이전 가치의 배수이기에 일어날 수 없을 것이다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; costs;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, n, goal, answer = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; goal;</span><br><span class="line">costs.resize(n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; costs[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(goal != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(goal &gt;= costs[i<span class="number">-1</span>]) &#123;</span><br><span class="line">goal -= costs[i<span class="number">-1</span>];</span><br><span class="line">answer++;</span><br><span class="line">&#125; <span class="keyword">else</span> i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; answer &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11047/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 10989번 수 정렬하기 3</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10989/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10989/</guid>
      <pubDate>Sat, 25 Jan 2020 04:21:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;10989-수-정렬하기-3&quot;&gt;&lt;a href=&quot;#10989-수-정렬하기-3&quot; class=&quot;headerlink&quot; title=&quot;#10989. 수 정렬하기 3&quot;&gt;&lt;/a&gt;#10989. 수 정렬하기 3&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://w
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="10989-수-정렬하기-3"><a href="#10989-수-정렬하기-3" class="headerlink" title="#10989. 수 정렬하기 3"></a>#10989. 수 정렬하기 3</h1><p><a href="https://www.acmicpc.net/problem/10989" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>시간 제한 3초</li><li><strong>메모리 제한 8MB</strong></li></ul><p><strong>Goal : 주어진 수를 오름차순으로 정렬하기</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>메모리 제한이 8MB라는 점에 주의한다.</li><li>주어진 수는 최대 천만<br>수의 최댓값은 최대 만</li><li>int 형 배열을 천만개 크기로 만들면<br>10000000 * 4 = 4천만 byte = 38…MB(이미 초과</li><li>하지만 10001 크기의 배열만으로 문제를 풀 수 있다.<br>40004 = 0.038..MB(충분히 통과)</li><li>위의 크기만 가지고 문제를 푸려면 counting sort가 적절하다.</li><li>입력으로 받은 수를 각각 세어준다. → 끝</li><li>??? 진짜 끝이다. 남은건 해당 숫자만큼 차례대로 카운트한 횟수만큼 출력해주면 된다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">// 이거 안써도 된다...</span></span><br><span class="line"><span class="keyword">int</span> cnt[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, input;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">cnt[input]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAX; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt[i]; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10989/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 10814번 나이순 정렬</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10814/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10814/</guid>
      <pubDate>Sat, 25 Jan 2020 04:21:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;10814-나이순-정렬&quot;&gt;&lt;a href=&quot;#10814-나이순-정렬&quot; class=&quot;headerlink&quot; title=&quot;#10814. 나이순 정렬&quot;&gt;&lt;/a&gt;#10814. 나이순 정렬&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmic
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="10814-나이순-정렬"><a href="#10814-나이순-정렬" class="headerlink" title="#10814. 나이순 정렬"></a>#10814. 나이순 정렬</h1><p><a href="https://www.acmicpc.net/problem/10814" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>나이와 이름이 입력으로 주어진다.</li><li>나이순으로 정렬<ul><li>나이가 같다면 가입한 순서로 정렬(입력 순으로)</li></ul></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><key: 나이, value: 이름>으로 key가 중복될 수 있으니 <strong>multimap</strong>을 사용한다.</key:></li><li>map 자체가 key가 오름차순을 유지하도록 data를 넣어준다.<br>같다면 입력순으로 된다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; answer;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age &gt;&gt; name;</span><br><span class="line">answer.insert(make_pair(age, name));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> ans : answer) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.first &lt;&lt; <span class="string">" "</span> &lt;&lt; ans.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/10814/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 9019번 DSLR</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/9019/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/9019/</guid>
      <pubDate>Sat, 25 Jan 2020 04:21:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;9019-DSLR&quot;&gt;&lt;a href=&quot;#9019-DSLR&quot; class=&quot;headerlink&quot; title=&quot;#9019. DSLR&quot;&gt;&lt;/a&gt;#9019. DSLR&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="9019-DSLR"><a href="#9019-DSLR" class="headerlink" title="#9019. DSLR"></a>#9019. DSLR</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/9019" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>이 문제는 명령어 ‘L’과 ‘R’을 어떻게 수행하느냐가 제일 중요하다.</li><li>처음에 deque를 사용하여 숫자를 배열로 나누고 합치고 이러다가 시간초과…</li><li>사실 사칙연산만 사용하면 위 명령어를 수행할 수 있다.</li><li>L 명령어</li></ul><p>Next = (Now % 1000 * 10) + (Now / 1000)</p><ul><li>R 명령어</li></ul><p>Next = (Now / 10) + (Now % 10 * 1000)</p><ul><li>주의해야 할 사항</li></ul><p>테스트 케이스를 여러 번 수행하는 문제이므로 초기화가 필요한 변수나 배열은 초기화를 해줘야 한다.</p><p>명령어를 저장하고 있어야 하므로, 해당 숫자를 어떻게 만들었는지 경로를 저장할 배열을, 그 숫자를 만들 때 쓴 명령어가 무엇인지 저장할 배열을 만든다.</p><p><code>from[a] = b</code> a를 만들기 이전 숫자 b</p><p><code>how[a] = &#39;b&#39;</code> a를 만들 때 수행된 명령어 b</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>code<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">4</span>] = &#123; <span class="string">'D'</span>, <span class="string">'S'</span>, <span class="string">'L'</span>, <span class="string">'R'</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> check[MAX];</span><br><span class="line"><span class="keyword">int</span> from[MAX];</span><br><span class="line"><span class="keyword">char</span> how[MAX];</span><br><span class="line"><span class="keyword">int</span> A, B;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintCmd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">PrintCmd(a, from[b]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; how[b];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(A);</span><br><span class="line">check[A] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> a = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (a == B) &#123;</span><br><span class="line">PrintCmd(A, B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d = a * <span class="number">2</span> &gt; MAX - <span class="number">1</span> ? a * <span class="number">2</span> % MAX : a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (!check[d]) &#123;</span><br><span class="line">check[d] = <span class="literal">true</span>;</span><br><span class="line">how[d] = <span class="string">'D'</span>;</span><br><span class="line">from[d] = a;</span><br><span class="line">q.push(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s = a == <span class="number">0</span> ? MAX - <span class="number">1</span> : a - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!check[s]) &#123;</span><br><span class="line">check[s] = <span class="literal">true</span>;</span><br><span class="line">how[s] = <span class="string">'D'</span>;</span><br><span class="line">from[s] = a;</span><br><span class="line">q.push(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cur = a;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; ld, rd;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, div = <span class="number">1000</span>; i &lt; <span class="number">4</span>; ++i, div /= <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> num = cur / div; cur %= div;</span><br><span class="line">ld.push_back(num); rd.push_back(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp = ld.front(); ld.pop_front();</span><br><span class="line">ld.push_back(tmp);</span><br><span class="line">tmp = rd.back(); rd.pop_back();</span><br><span class="line">rd.push_front(tmp);</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, div = <span class="number">1</span>; i &lt; <span class="number">4</span>; ++i, div *= <span class="number">10</span>) &#123;</span><br><span class="line">l += ld.back() * div;</span><br><span class="line">r += rd.back() * div;</span><br><span class="line">ld.pop_back(); rd.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!check[l]) &#123;</span><br><span class="line">check[l] = <span class="literal">true</span>;</span><br><span class="line">how[l] = <span class="string">'L'</span>;</span><br><span class="line">from[l] = a;</span><br><span class="line">q.push(l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!check[r]) &#123;</span><br><span class="line">check[r] = <span class="literal">true</span>;</span><br><span class="line">how[r] = <span class="string">'R'</span>;</span><br><span class="line">from[r] = a;</span><br><span class="line">q.push(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; T; ++t) &#123;</span><br><span class="line">Init();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B;</span><br><span class="line">BFS();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>시간초과</li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">4</span>] = &#123; <span class="string">'D'</span>, <span class="string">'S'</span>, <span class="string">'L'</span>, <span class="string">'R'</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> check[MAX];</span><br><span class="line"><span class="keyword">int</span> from[MAX];</span><br><span class="line"><span class="keyword">char</span> how[MAX];</span><br><span class="line"><span class="keyword">int</span> A, B;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintCmd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">PrintCmd(a, from[b]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; how[b];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(A);</span><br><span class="line">check[A] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> a = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (a == B) &#123;</span><br><span class="line">PrintCmd(A, B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d = a * <span class="number">2</span> % MAX;</span><br><span class="line"><span class="keyword">if</span> (!check[d]) &#123;</span><br><span class="line">check[d] = <span class="literal">true</span>;</span><br><span class="line">how[d] = <span class="string">'D'</span>;</span><br><span class="line">from[d] = a;</span><br><span class="line">q.push(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s = a == <span class="number">0</span> ? MAX - <span class="number">1</span> : a - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!check[s]) &#123;</span><br><span class="line">check[s] = <span class="literal">true</span>;</span><br><span class="line">how[s] = <span class="string">'S'</span>;</span><br><span class="line">from[s] = a;</span><br><span class="line">q.push(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = (a % <span class="number">1000</span> * <span class="number">10</span>) + (a / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (!check[l]) &#123;</span><br><span class="line">check[l] = <span class="literal">true</span>;</span><br><span class="line">how[l] = <span class="string">'L'</span>;</span><br><span class="line">from[l] = a;</span><br><span class="line">q.push(l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r = (a / <span class="number">10</span>) + (a % <span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (!check[r]) &#123;</span><br><span class="line">check[r] = <span class="literal">true</span>;</span><br><span class="line">how[r] = <span class="string">'R'</span>;</span><br><span class="line">from[r] = a;</span><br><span class="line">q.push(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; T; ++t) &#123;</span><br><span class="line">Init();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B;</span><br><span class="line">BFS();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/9019/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 3190번 뱀</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3190/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3190/</guid>
      <pubDate>Sat, 25 Jan 2020 04:21:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3190-뱀&quot;&gt;&lt;a href=&quot;#3190-뱀&quot; class=&quot;headerlink&quot; title=&quot;#3190. 뱀&quot;&gt;&lt;/a&gt;#3190. 뱀&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/3190&quot; tar
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="3190-뱀"><a href="#3190-뱀" class="headerlink" title="#3190. 뱀"></a>#3190. 뱀</h1><p><a href="https://www.acmicpc.net/problem/3190" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 보드판</li><li>양 끝 모서리에 벽이 있음</li><li>뱀의 길이 1, 시작 위치 (1, 1), 방향: →</li><li>매 초마다 이동</li></ul><ol><li>머리를 다음 칸에 위치</li><li>이동한 칸에 사과가 있으면 사과 먹고 꼬리 움직이지 않음(몸길이 늘어남)</li><li>꼬리 움직인다. (몸길이 그대로)</li></ol><p><strong>Goal: 사과의 위치와 뱀의 이동경로가 주어질 때 게임이 몇 초만에 끝나는지 계산</strong></p><p>게임은 벽이나 자기자신의 몸과 부딪히면 끝난다.</p><p>뱀의 이동 경로는 (왼쪽 오른쪽 으로 90도 방향 회전)</p><ul><li>입력</li></ul><p>방향 변환 정보에서 주어진 초는 게임 시작 시간으로부터 X초가 끝난 뒤를 말한다.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>주어진 문제대로 구현하면 된다. (시뮬레이션)</li><li>방향전환 시간은 오름차순으로 주어지기에 queue에 저장</li><li>사과가 있는 곳은 -1로 표시</li><li>뱀이 있는 곳은 1부터~현재 길이까지 표시 (머리가 가장 큰 수)</li></ul><ol><li>머리를 기준으로 현재 방향에 맞게 움직인다.</li><li><p>머리가 움직였을 때 그곳이 벽이거나 자신의 몸인지 확인한다.<br>필자는 다음과 같은 경우에 뱀이 동시에 움직일거라 생각하여 게임이 안끝난다고 생각했다.</p><p> // 4가 머리이고 머리가 위쪽으로 가는 경우일 때<br> 1 2  -&gt;  4 1<br> 4 3      3 2</p></li></ol><p>하지만 동시에 움직이지 않고 머리부터 움직여서 꼬리가 따라온다. 그렇기에 위와 같은 경우는 게임이 종료된다.</p><ol><li><p>방향 전환 시간인지 확인한다.<br>해당 경우에 맞게 방향을 변경한다.</p></li><li><p>사과가 있는지 확인한다.<br>사과가 있으면 길이가 1 늘어나고 이동하지 않는다.</p></li><li><p>이동한다.<br>이동방법: 머리에서부터 시작해서 자신보다 1 적은 수를 찾는다. 찾으면 그 값을 넣는다. 이를 총 길이-1만큼 반복하고(머리를 제외하기 때문) 다음 탐색 부분에 머리를, 원래 꼬리 부분을 0으로 변경해준다.</p><p>1 2 3 4   —&gt;    1 1 2 3   —&gt;   0 1 2 3</p><pre><code>5                4             5 4</code></pre></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, l;</span><br><span class="line"><span class="keyword">int</span> board[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> d_left[<span class="number">4</span>] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span> &#125;; <span class="comment">// 'L'</span></span><br><span class="line"><span class="keyword">int</span> d_right[<span class="number">4</span>] = &#123; <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span> &#125;; <span class="comment">// 'D'</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; &gt; direction;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isWall</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">// 벽이면 true</span></span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; n || y &gt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x &lt;= n &amp;&amp; y &lt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>; <span class="keyword">int</span> y = <span class="number">1</span>; <span class="comment">// 시작위치</span></span><br><span class="line"><span class="keyword">int</span> dir = <span class="number">3</span>; <span class="comment">// 시작방향: 오른쪽</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">1</span>; <span class="comment">// 뱀의 길이</span></span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>; <span class="comment">// 게임 시작 시간</span></span><br><span class="line">board[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> convert = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!direction.empty()) &#123;</span><br><span class="line">convert = direction.front().first;</span><br><span class="line">&#125;</span><br><span class="line">time++;</span><br><span class="line"><span class="comment">// 현재 방향에 맞는 한 칸 이동</span></span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="comment">// 벽인지 자신의 몸인지 확인</span></span><br><span class="line"><span class="keyword">if</span> (isWall(d_x, d_y) || board[d_x][d_y] &gt; <span class="number">0</span>) <span class="keyword">return</span> time;</span><br><span class="line"><span class="comment">// 방향 전환 시간인지 확인</span></span><br><span class="line"><span class="keyword">if</span> (time == convert) &#123;</span><br><span class="line"><span class="keyword">if</span> (direction.front().second == <span class="string">'D'</span>) &#123;</span><br><span class="line">dir = d_right[dir];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dir = d_left[dir];</span><br><span class="line">&#125;</span><br><span class="line">direction.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 사과 있는지 확인</span></span><br><span class="line"><span class="keyword">if</span> (board[d_x][d_y] == <span class="number">-1</span>) &#123;</span><br><span class="line">board[d_x][d_y] = ++len;</span><br><span class="line">x = d_x; y = d_y;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 이동</span></span><br><span class="line"><span class="keyword">int</span> tmp_x = x, tmp_y = y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> d_tmp_x = tmp_x + dx[j];</span><br><span class="line"><span class="keyword">int</span> d_tmp_y = tmp_y + dy[j];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_tmp_x, d_tmp_y)) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[d_tmp_x][d_tmp_y] == board[tmp_x][tmp_y] - <span class="number">1</span>) &#123;</span><br><span class="line">board[tmp_x][tmp_y] = board[d_tmp_x][d_tmp_y];</span><br><span class="line">tmp_x = d_tmp_x; tmp_y = d_tmp_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">board[d_x][d_y] = len;</span><br><span class="line">board[tmp_x][tmp_y] = <span class="number">0</span>;</span><br><span class="line">x = d_x;</span><br><span class="line">y = d_y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;r, &amp;c);</span><br><span class="line">board[r][c] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x; <span class="keyword">char</span> dir;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;x, &amp;dir);</span><br><span class="line">direction.push(&#123; x, dir &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, game());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3190/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 3055번 탈출</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3055/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3055/</guid>
      <pubDate>Sat, 25 Jan 2020 04:18:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3055-탈출&quot;&gt;&lt;a href=&quot;#3055-탈출&quot; class=&quot;headerlink&quot; title=&quot;#3055. 탈출&quot;&gt;&lt;/a&gt;#3055. 탈출&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;header
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="3055-탈출"><a href="#3055-탈출" class="headerlink" title="#3055. 탈출"></a>#3055. 탈출</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/3055" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>조건 중에 “<strong>물이 찰 예정인 칸에 고슴도치가 움직일 수 없다.</strong>“에 집중하였다.</li><li>물이 이동할 queue와 고슴도치가 이동할 queue를 따로 두어 탐색을 시작한다.</li><li>단, 물이 먼저 이동해야 한다.(위 조건 때문에)</li><li>모든 탐색은 BFS로 이루어지며, 물은 이동할 때마다 map을 갱신한다. 고슴도치는 갱신 안한다.</li><li>고슴도치가 <strong>‘D’</strong>에 도착하지 못 하고 탐색할 지점이 없을 때 -1을 리턴하여 도착할 수 없다는 것을 표시한다.</li><li><strong>‘D’</strong>에 도착하면 그때 시간을 바로 출력하도록 한다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> R, C;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; water;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;R, &amp;C);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'S'</span>) &#123; q.push(&#123; i, j &#125;); visit[i][j] = <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="string">'*'</span>) water.push(&#123; i, j &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; R &amp;&amp; y &lt; C) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123; <span class="comment">// 고슴도치가 탐색할 지점이 없을 때까지 진행</span></span><br><span class="line"><span class="keyword">int</span> w_len = water.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w_len; ++i) &#123; <span class="comment">// 물의 이동</span></span><br><span class="line"><span class="keyword">int</span> water_x, water_y;</span><br><span class="line">tie(water_x, water_y) = water.front();</span><br><span class="line">water.pop();  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_w_x = water_x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_w_y = water_y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_w_x, d_w_y)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_w_x][d_w_y] == <span class="string">'.'</span> || <span class="built_in">map</span>[d_w_x][d_w_y] == <span class="string">'S'</span>) &#123;</span><br><span class="line"><span class="built_in">map</span>[d_w_x][d_w_y] = <span class="string">'*'</span>;</span><br><span class="line">water.push(&#123; d_w_x, d_w_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123; <span class="comment">// 고슴도치 이동</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">tie(x, y) = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="string">'D'</span>) <span class="keyword">return</span> time; <span class="comment">// 목적지 도착하면 시간 리턴</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; !visit[d_x][d_y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] != <span class="string">'X'</span> &amp;&amp; <span class="built_in">map</span>[d_x][d_y] != <span class="string">'*'</span>) &#123;</span><br><span class="line">visit[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">time++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = BFS();</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"KAKTUS\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/3055/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2869번 달팽이는 올라가고 싶다</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2869/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2869/</guid>
      <pubDate>Sat, 25 Jan 2020 04:11:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2869-달팽이는-올라가고-싶다&quot;&gt;&lt;a href=&quot;#2869-달팽이는-올라가고-싶다&quot; class=&quot;headerlink&quot; title=&quot;#2869. 달팽이는 올라가고 싶다&quot;&gt;&lt;/a&gt;#2869. 달팽이는 올라가고 싶다&lt;/h1&gt;&lt;h3 id=&quot;P
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2869-달팽이는-올라가고-싶다"><a href="#2869-달팽이는-올라가고-싶다" class="headerlink" title="#2869. 달팽이는 올라가고 싶다"></a>#2869. 달팽이는 올라가고 싶다</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>높이 V미터인 나무막대</p><ul><li>낮에 A미터 올라감</li><li>밤에 B미터 내려감</li><li>정상에서는 안내려감</li></ul><p>나무 막대 모두 올라가는데 걸리는 일 수</p><p>하루에 +A -B</p><p>B &lt; A ≤ V ≤ 10억</p><p>어차피 값은 10억을 넘을 수 없으니 int 사용해도 무방</p><h3 id="Ex"><a href="#Ex" class="headerlink" title="Ex."></a>Ex.</h3><pre><code> input2 1 5 output4</code></pre><ul><li>설명</li></ul><p>1일:  0+2 = 2</p><p>2일:  2-1+2 =3</p><p>3일:  3-1+2 = 4</p><p>4일:  4-1+2 = 5</p><p>하지만 제한시간이 <strong>0.15초</strong>이기에 이런 단계로 풀면 안된다.<br>하루는 무조건 A가 되고 그 후는 -B+A가 반복이니  다음이 성립한다.</p><script type="math/tex; mode=display">V = A + (A-B)x</script><script type="math/tex; mode=display">x \ge \frac {V-A}{A-B}</script><p>하지만 x는 정수이므로 위와 같은 부등호를 붙여주어야 한다.</p><p>3 1 6</p><p>1일: 3 </p><p>2일: 3-1+3 = 5</p><p>3일: 5-1+3 = 7</p><p>공식: x ≥ 1.xx 따라서 x는 2, 총 일 수는 2+1 = 3일이된다.</p><ul><li>근데 이 공식 적용하면 V가 되었다가 다시 줄어드는 경우가 있어서 답에 영향을 주나? → NO</li><li><code>ceil()</code> 때문에 피연산자는 <code>double</code>형으로, 결과값은 <code>int</code>형으로 두었다.<br>(결과값을 double로 설정하면 출력값이 큰 경우 부동소수점 방식으로 출력되어 틀린 답이 된다.)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a, b, v;</span><br><span class="line">    <span class="keyword">int</span> day = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; v;</span><br><span class="line">    <span class="keyword">double</span> ans = (v-a) / (a-b);</span><br><span class="line">    ans = <span class="built_in">ceil</span>(ans);</span><br><span class="line">    day += ans;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; day &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2869/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2798번 블랙잭</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2798/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2798/</guid>
      <pubDate>Sat, 25 Jan 2020 04:11:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2798-블랙잭&quot;&gt;&lt;a href=&quot;#2798-블랙잭&quot; class=&quot;headerlink&quot; title=&quot;#2798. 블랙잭&quot;&gt;&lt;/a&gt;#2798. 블랙잭&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;N장의 카드&lt;/li&gt;
&lt;li&gt;M : 목표&lt;/li&gt;
&lt;li&gt;N장의 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2798-블랙잭"><a href="#2798-블랙잭" class="headerlink" title="#2798. 블랙잭"></a>#2798. 블랙잭</h1><ul><li>N장의 카드</li><li>M : 목표</li><li>N장의 카드 중 3개 선택</li><li>3개의 숫자 합이 M에 최대한 가깝도록(M을 넘어서면 안됨)</li></ul><p>N은 최대 100이기에 100장 중 3장을 선택하는 경우의 수 100 x 99 x 98 = 970,200‬가 최대이다.<br>그러므로 충분히 모든 경우의 수를 구해 답을 찾아낼 수 있는 문제이다.</p><p>재귀나 for문을 이용하여 풀 수 있을 것이다.</p><p>필자는 재귀를 사용하였다.</p><p>M은 최대 300000이기에 MAX 값으로 두었고 재귀의 내용은 다음과 같다.</p><ul><li>매개변수<ul><li>numbers :  N개의 숫자를 담을 vector</li><li>goal : M</li><li>ans : 숫자 합</li><li>index : numbers의 인덱스</li><li>selected : 남은 카드 선택 횟수</li></ul></li><li>실패 조건<ul><li>숫자 합이 M보다 클 때</li><li>index가 numbers의 크기를 넘었을 때</li></ul></li><li>성공 조건<ul><li>3번을 뽑았을 경우, goal과 ans의 차이가 최소인 값</li></ul></li><li>재귀함수<ul><li>카드를 선택하지 않을 때</li><li>카드를 선택했을 때<br>ans에 선택한 카드가 더해짐<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 300000;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> min_diff = MAX;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doCombination</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers, <span class="keyword">int</span> goal, <span class="keyword">int</span> ans, <span class="keyword">int</span> index, <span class="keyword">int</span> selected)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans &gt; goal) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(selected == <span class="number">0</span>) &#123;</span><br><span class="line">        min_diff = min_diff &gt; goal-ans ? goal-ans : min_diff;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index &gt;= numbers.size()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    doCombination(numbers, goal, ans, index+<span class="number">1</span>, selected); <span class="comment">// not selected</span></span><br><span class="line">    ans += numbers[index];</span><br><span class="line">    doCombination(numbers, goal, ans, index+<span class="number">1</span>, selected<span class="number">-1</span>); <span class="comment">// selected</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n, m, answer = <span class="number">0</span>;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">   numbers.resize(n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">       <span class="built_in">cin</span> &gt;&gt; numbers[i];</span><br><span class="line">   &#125;</span><br><span class="line">   doCombination(numbers, m, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">   answer = m - min_diff;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; answer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2798/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2748번 피보나치 수 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2748/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2748/</guid>
      <pubDate>Sat, 25 Jan 2020 04:11:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2748-피보나치-수-2&quot;&gt;&lt;a href=&quot;#2748-피보나치-수-2&quot; class=&quot;headerlink&quot; title=&quot;#2748. 피보나치 수 2&quot;&gt;&lt;/a&gt;#2748. 피보나치 수 2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2748-피보나치-수-2"><a href="#2748-피보나치-수-2" class="headerlink" title="#2748. 피보나치 수 2"></a>#2748. 피보나치 수 2</h1><p><a href="https://www.acmicpc.net/problem/2748" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><strong>Goal : n번째 피보나치 수를 구하여라</strong></li><li>condition<ul><li>최대 90번째 피보나치 수를 구할 수 있어야 함</li><li>시간 제한 1초</li></ul></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><script type="math/tex; mode=display">F_n = F_{n-1} + F_{n-2}</script><p>수식 그대로 DP를 적용한다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[n]은 n번째 피보나치 수</span></span><br><span class="line">dp[n] = dp[n<span class="number">-1</span>] + dp[n<span class="number">-2</span>];</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">91</span>]; </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>, dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fibo(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>주의할 점은 90번째 피보나치 수(10의 18승보다 큼)를 담으려면 long long을 써야 한다는 점이다.(long은 안된다.)</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2748/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2468번 안전 영역</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2468/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2468/</guid>
      <pubDate>Sat, 25 Jan 2020 04:11:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2468-안전-영역&quot;&gt;&lt;a href=&quot;#2468-안전-영역&quot; class=&quot;headerlink&quot; title=&quot;#2468. 안전 영역&quot;&gt;&lt;/a&gt;#2468. 안전 영역&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2468-안전-영역"><a href="#2468-안전-영역" class="headerlink" title="#2468. 안전 영역"></a>#2468. 안전 영역</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/2468" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>높이 1부터 최대 높이까지 작업을 진행한다. → set에 높이 정보를 담고 오름차순으로 정렬하면 더 빠를듯</li><li>각 높이마다 모든 영역을 탐색한다. (말이 모든 영역이지 이미 높이보다 같거나 작은 영역이나 방문한 영역이면 탐색을 하지 않는다.)<br>탐색은 BFS로 안전영역을 표시한다.</li><li>탐색이 끝나면 안전 영역의 수를 1증가한다.</li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, max_height, ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">visited[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= N || ny &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visited[nx][ny] || arr[nx][ny] &lt;= h) <span class="keyword">continue</span>;</span><br><span class="line">visited[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; nx, ny &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i][j];</span><br><span class="line"><span class="keyword">if</span> (max_height &lt; arr[i][j]) max_height = arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">1</span>; h &lt;= max_height; ++h) &#123;</span><br><span class="line"><span class="keyword">int</span> area = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (visited[i][j] || arr[i][j] &lt;= h) <span class="keyword">continue</span>;</span><br><span class="line">BFS(i, j, h);</span><br><span class="line">area++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; area) ans = area;</span><br><span class="line"><span class="built_in">memset</span>(visited, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2468/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2251번 물통</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2251/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2251/</guid>
      <pubDate>Sat, 25 Jan 2020 04:10:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2251-물통&quot;&gt;&lt;a href=&quot;#2251-물통&quot; class=&quot;headerlink&quot; title=&quot;#2251. 물통&quot;&gt;&lt;/a&gt;#2251. 물통&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;header
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2251-물통"><a href="#2251-물통" class="headerlink" title="#2251. 물통"></a>#2251. 물통</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/2251" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>첫 시작은 C 물통만 가득 차 있으니 전체 합은 C의 물통이다.</li><li>물을 옮기는 경우는 총 6경우로 0을 A, 1을 B, 2를 C라고 했을 때 다음과 같은 경우가 존재한다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 -&gt; 1, 0 -&gt; 2</span><br><span class="line">1 -&gt; 0, 1 -&gt; 2</span><br><span class="line">2 -&gt; 0, 2 -&gt; 1</span><br></pre></td></tr></table></figure></li><li>경우의 수가 중복되지 않도록 표시해주는 배열은 2차원으로도 해결 가능하다. (전체 양은 일정하니 A, B만 알아도 C를 알 수 있기 때문이다.)</li></ul><ol><li>처음 A, B, C의 부피를 저장한다.</li><li>시작은 (0, 0)에서 시작하고, ans[C 물의 양]이 true임을 표시해 A가 0일 때 C의 물의양임을 나타낸다.</li><li>BFS 탐색을 시작한다. 각 경우에서 계속해서 나아가는 방식이기에 적합하다. (경우의 수도 많지 않음)</li><li><p>물을 옮기는 건 2가지 경우가 존재한다.</p><p> from x → to y</p><ol><li><strong>x + y ≤ Y</strong><br>x + y의 값이 y를 가진 물통의 부피(Y)이하일 때<br>x를 다 옮길 수 있으므로 <strong>x를 가졌던 물통의 물의 양은 0</strong>이 된다.<br>y를 가진 물통의 물의 양은 <strong>x+y</strong>가 된다.</li><li><strong>x + y &gt; Y</strong><br>x + y의 값이 Y보다 클 때 x를 다 옮길 수 없으므로<br>x를 가졌던 물통의 물의 양은 <strong>x + y - Y</strong>가된다.<br>y를 가졌던 물통의 물의 양은 <strong>Y</strong>가 된다.</li></ol><ol><li>check와 A의 물의 양이 0인지 판단하여 BFS 탐색을 한다.</li></ol></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> bucket[<span class="number">3</span>]; <span class="comment">// 물통 부피</span></span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">201</span>][<span class="number">201</span>]; <span class="comment">// A, B만 알아도 C를 알 수 있음</span></span><br><span class="line"><span class="keyword">bool</span> ans[<span class="number">201</span>]; <span class="comment">// A가 비어있을 때 C의 물의 양</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">int</span> from[<span class="number">6</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span> &#125;; <span class="comment">// 0: A, 1: B, 2: C</span></span><br><span class="line"><span class="keyword">int</span> to[<span class="number">6</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans[i]) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = bucket[<span class="number">2</span>];</span><br><span class="line">q.push(&#123; <span class="number">0</span>, <span class="number">0</span> &#125;);</span><br><span class="line">check[<span class="number">0</span>][<span class="number">0</span>]= <span class="literal">true</span>;</span><br><span class="line">ans[sum] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> cur[<span class="number">3</span>];</span><br><span class="line">cur[<span class="number">0</span>] = q.front().first;</span><br><span class="line">cur[<span class="number">1</span>] = q.front().second;</span><br><span class="line">cur[<span class="number">2</span>] = sum - cur[<span class="number">0</span>] - cur[<span class="number">1</span>];</span><br><span class="line">q.pop(); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> next[<span class="number">3</span>] = &#123; cur[<span class="number">0</span>], cur[<span class="number">1</span>], cur[<span class="number">2</span>] &#125;;</span><br><span class="line"><span class="keyword">if</span> (next[from[i]] + next[to[i]] &lt;= bucket[to[i]]) &#123; </span><br><span class="line">next[to[i]] += next[from[i]];</span><br><span class="line">next[from[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 옮긴 물의 양이 해당 물통 부피보다 클 때</span></span><br><span class="line">next[from[i]] += next[to[i]] - bucket[to[i]];</span><br><span class="line">next[to[i]] = bucket[to[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!check[next[<span class="number">0</span>]][next[<span class="number">1</span>]]) &#123;</span><br><span class="line">check[next[<span class="number">0</span>]][next[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; next[<span class="number">0</span>], next[<span class="number">1</span>] &#125;);</span><br><span class="line"><span class="keyword">if</span> (next[<span class="number">0</span>] == <span class="number">0</span>) ans[next[<span class="number">2</span>]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) <span class="built_in">cin</span> &gt;&gt; bucket[i];</span><br><span class="line">BFS();</span><br><span class="line">Output();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2251/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2231번 분해합</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2231/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2231/</guid>
      <pubDate>Sat, 25 Jan 2020 04:10:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2231-분해합&quot;&gt;&lt;a href=&quot;#2231-분해합&quot; class=&quot;headerlink&quot; title=&quot;#2231. 분해합&quot;&gt;&lt;/a&gt;#2231. 분해합&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2231-분해합"><a href="#2231-분해합" class="headerlink" title="#2231. 분해합"></a>#2231. 분해합</h1><p><a href="https://www.acmicpc.net/problem/2231" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합</li><li>245의 분해합 : 245+2+4+5 = 256<br>245는 256의 생성자</li><li>생성자는 없을 수도 여러 개일 수도 있음<ul><li>없다면 0 출력</li></ul></li></ul><p><strong>Goal: N이 주어졌을 때 N의 가장 작은 생성자 출력</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>1부터 최대 N-1까지 분해합을 구하면서 풀어보면 어떻게 될까?</li><li>1부터 분해합을 구하다가 N이 되었을 때 종료하면 가장 작은 생성자를 출력할 수 있다.</li><li>분해합 구하기<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">212</span>의 분해합 구하기</span><br><span class="line"><span class="number">212</span>  자릿수 <span class="number">3</span></span><br><span class="line"><span class="comment">// #1.</span></span><br><span class="line"><span class="number">212</span> / <span class="number">10</span>^<span class="number">2</span> = <span class="number">2</span> -&gt; <span class="number">212</span>+<span class="number">2</span></span><br><span class="line"><span class="number">212</span> - <span class="number">2</span>*<span class="number">10</span>^<span class="number">2</span> = <span class="number">12</span></span><br><span class="line"><span class="comment">// #2.</span></span><br><span class="line"><span class="number">12</span> / <span class="number">10</span>^<span class="number">1</span> = <span class="number">1</span> -&gt; <span class="number">212</span>+<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="number">12</span> - <span class="number">1</span>*<span class="number">10</span>^<span class="number">1</span> = <span class="number">2</span> -&gt; <span class="number">212</span>+<span class="number">2</span>+<span class="number">1</span>+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">11</span>의 분해합 구하기</span><br><span class="line"><span class="number">11</span> 자릿수 <span class="number">2</span></span><br><span class="line">div = <span class="number">10</span> (<span class="number">10</span>의 제곱 수)</span><br><span class="line">sum = <span class="number">11</span> (분해합)</span><br><span class="line"><span class="comment">// #1.</span></span><br><span class="line">temp = <span class="number">11</span> / <span class="number">10</span> = <span class="number">1</span> (계산 용도)</span><br><span class="line">num = <span class="number">11</span> - <span class="number">10</span> = <span class="number">1</span></span><br><span class="line">sum = <span class="number">11</span> + <span class="number">1</span> = <span class="number">12</span></span><br><span class="line">div = <span class="number">1</span></span><br><span class="line"><span class="comment">// #2.</span></span><br><span class="line">temp = <span class="number">1</span> / <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">num = <span class="number">1</span> - <span class="number">1</span> = <span class="number">0</span></span><br><span class="line">sum = <span class="number">12</span> + <span class="number">1</span> = <span class="number">13</span></span><br><span class="line">div = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">그냥 더 간단한 방법이 생각났다. (<span class="number">2</span> Try 참고)</span><br><span class="line">sum, temp = <span class="number">11</span></span><br><span class="line">sum = <span class="number">11</span> + <span class="number">11</span> % <span class="number">10</span></span><br><span class="line">temp = <span class="number">11</span> / <span class="number">10</span> = <span class="number">1</span></span><br><span class="line">sum = <span class="number">12</span> + <span class="number">1</span> % <span class="number">10</span> = <span class="number">13</span></span><br><span class="line">즉, </span><br><span class="line">sum += temp % <span class="number">10</span></span><br><span class="line">temp /= <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 자릿 수 체크</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;<span class="keyword">while</span>(num/=<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 분해합 게산 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">distributeSum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = getLength(num);</span><br><span class="line"><span class="keyword">int</span> div = <span class="built_in">pow</span>(<span class="number">10</span>, length<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> sum = num; <span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">temp = num / div; </span><br><span class="line">num = num - temp * div; </span><br><span class="line">sum += temp; </span><br><span class="line">div /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(n == distributeSum(i)) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == n) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>108ms</p><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">distributeSum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum, temp;</span><br><span class="line">sum = temp = num;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sum += temp % <span class="number">10</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(temp /= <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(n == distributeSum(i)) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == n) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8ms</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2231/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2206번 벽 부수고 이동하기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2206/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2206/</guid>
      <pubDate>Sat, 25 Jan 2020 04:10:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2206-벽-부수고-이동하기&quot;&gt;&lt;a href=&quot;#2206-벽-부수고-이동하기&quot; class=&quot;headerlink&quot; title=&quot;#2206. 벽 부수고 이동하기&quot;&gt;&lt;/a&gt;#2206. 벽 부수고 이동하기&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2206-벽-부수고-이동하기"><a href="#2206-벽-부수고-이동하기" class="headerlink" title="#2206. 벽 부수고 이동하기"></a>#2206. 벽 부수고 이동하기</h1><p><a href="https://www.acmicpc.net/problem/2206" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x M 크기의 맵</li><li>0은 이동가능 1은 벽을 나타냄</li><li>(0, 0) → (N-1, M-1)까지 이동 (상하좌우)</li><li>벽을 1개까지 부수고 이동 가능</li></ul><p><strong>Goal: (0, 0)에서 (N-1, M-1)까지 이동하는데 걸리는 경로 중 최단 경로 구하기</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>이동하기</li></ul><p>시작지점(0, 0)에서부터 상하좌우로 갈 수 있는 방향을 탐색한다.<br>도착지점까지 모든 곳을 탐색해야 하며, 이때 BFS를 사용한다.<br>현재 지점에서 상하좌우로 가는데 걸리는 비용이 동일하기 때문이다.</p><ul><li>벽을 부수었는지 여부를 경로를 갱신할 때마다 가지고 있어야 한다.</li></ul><p>탐색할 때 이미 값이 있다면 이미 지나온 경로이므로 다른 지점을 탐색해야 한다. 그외는 다음을 확인하고 경로를 갱신한다.</p><ol><li>탐색할 지점이 0이라면 경로 갱신</li><li>탐색할 지점이 1인데 이전까지 벽을 부수지 않았다면 경로 갱신</li></ol><p>위와 같은 작업으로 문제를 해결할 수 있다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> path[MAX][MAX][<span class="number">2</span>]; <span class="comment">// 벽을 안부순 경로, 벽을 부순 경로</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line"><span class="keyword">bool</span> break_wall = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;INFO&gt; q;</span><br><span class="line">q.push(&#123; <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span> &#125;);</span><br><span class="line">path[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r; <span class="keyword">int</span> c = q.front().c;</span><br><span class="line"><span class="keyword">bool</span> bw = q.front().break_wall;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (r == n - <span class="number">1</span> &amp;&amp; c == m - <span class="number">1</span>) <span class="keyword">return</span> path[r][c][bw];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) &#123;</span><br><span class="line"><span class="keyword">if</span> (path[x][y][bw]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">path[x][y][bw] = path[r][c][bw] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; x, y, bw &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[x][y] == <span class="number">1</span> &amp;&amp; bw == <span class="number">0</span>) &#123;</span><br><span class="line">path[x][y][<span class="number">1</span>] = path[r][c][bw] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; x, y, <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bfs());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2206/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 2146번 다리 만들기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2146/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2146/</guid>
      <pubDate>Sat, 25 Jan 2020 04:10:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;2146-다리-만들기&quot;&gt;&lt;a href=&quot;#2146-다리-만들기&quot; class=&quot;headerlink&quot; title=&quot;2146. 다리 만들기&quot;&gt;&lt;/a&gt;2146. 다리 만들기&lt;/h2&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="2146-다리-만들기"><a href="#2146-다리-만들기" class="headerlink" title="2146. 다리 만들기"></a>2146. 다리 만들기</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/2146" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li><p>각 섬의 id를 매긴다. → DFS 이용</p></li><li><p>가장 짧은 다리의 길이를 구한다. → BFS 이용</p></li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> N, ans =<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">visited[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">map</span>[x][y] = idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; N &amp;&amp; d_y &lt; N) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">0</span> || visited[d_x][d_y]) <span class="keyword">continue</span>;</span><br><span class="line">DFS(d_x, d_y, idx);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(visited, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line"><span class="keyword">int</span> temp = <span class="built_in">map</span>[x][y];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">int</span> len = q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">while</span>(len--) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; N &amp;&amp; d_y &lt; N) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] != <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[d_x][d_y] != temp) <span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">0</span> &amp;&amp; !visited[d_x][d_y]) &#123;</span><br><span class="line">visited[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N; <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 각 섬에 번호 매기기</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (visited[i][j] || <span class="built_in">map</span>[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">DFS(i, j, idx++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 가장 짧은 다리 길이 구하기</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, BFS(i, j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/2146/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 1938번 통나무 옮기기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1938/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1938/</guid>
      <pubDate>Sat, 25 Jan 2020 04:09:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1938-통나무-옮기기&quot;&gt;&lt;a href=&quot;#1938-통나무-옮기기&quot; class=&quot;headerlink&quot; title=&quot;#1938. 통나무 옮기기&quot;&gt;&lt;/a&gt;#1938. 통나무 옮기기&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="1938-통나무-옮기기"><a href="#1938-통나무-옮기기" class="headerlink" title="#1938. 통나무 옮기기"></a>#1938. 통나무 옮기기</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/1938" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>통나무 중점 좌표를 토대로 BFS 탐색을 하였다.<br>중심을 기준으로 그대로(회전), 상, 하, 좌, 우로 이동하면 각각 작동횟수 + 1이기에<br>BFS로 탐색하는게 최적이다.<br>중복 탐색을 막기 위해 3차원 방문 배열을 두어 중점 좌표의 각 모양(타입)에 따라 표시를 하였다.</li><li>중점 좌표로 이동하다보니 이동 후 다음을 꼭 확인해야 한다.<ol><li>평지 범위를 벗어나지 않는지<br>세 좌표 모두 범위를 벗어나지 않도록 확인해야한다.</li><li>방문한 지점인지</li><li>움직일 수 있는지<br>상하좌우 → 움직인 세 좌표에 ‘1’이 없는지 확인<br>회전 → 움직인 중점좌표 기준으로 3x3dp ‘1’이 없는지 확인</li></ol></li><li>도착 지점에 도착하면 종료</li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">char</span> land[MAX + <span class="number">1</span>][MAX + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[MAX + <span class="number">1</span>][MAX + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; start_point;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; end_point;</span><br><span class="line"><span class="keyword">int</span> dr[<span class="number">5</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dc[<span class="number">5</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Log</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> type; <span class="comment">// 0 : 가로, 1 : 세로</span></span><br><span class="line"><span class="keyword">int</span> r, c; <span class="comment">// 중점 좌표</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isIn</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; <span class="comment">// 통나무가 평지 범위인지</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c--;</span><br><span class="line"><span class="keyword">else</span> r--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0</span> || c &lt; <span class="number">0</span> || r &gt; N - <span class="number">1</span> || c &gt; N - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c++;</span><br><span class="line"><span class="keyword">else</span> r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEnd</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; <span class="comment">// EEE에 도착했는지</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c--;</span><br><span class="line"><span class="keyword">else</span> r--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end_point.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (end_point[i].first != r || end_point[i].second != c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c++;</span><br><span class="line"><span class="keyword">else</span> r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; <span class="comment">// 이동이 가능한지</span></span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c--;</span><br><span class="line"><span class="keyword">else</span> r--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (land[r][c] == <span class="string">'1'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">0</span>) c++;</span><br><span class="line"><span class="keyword">else</span> r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckRotate</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> type)</span> </span>&#123; <span class="comment">// 회전이 가능한지</span></span><br><span class="line"><span class="keyword">int</span> sr = r - <span class="number">1</span>, sc = c - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = sr; i &lt; sr + <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = sc; j &lt; sc+ <span class="number">3</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] == <span class="string">'1'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;Log&gt; q;   </span><br><span class="line"><span class="keyword">int</span> type, r, c;</span><br><span class="line"><span class="keyword">if</span> (start_point[<span class="number">0</span>].first == start_point[<span class="number">1</span>].first) &#123;</span><br><span class="line">type = <span class="number">0</span>; r = start_point[<span class="number">0</span>].first; c = start_point[<span class="number">1</span>].second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">type = <span class="number">1</span>; c = start_point[<span class="number">0</span>].second; r = start_point[<span class="number">1</span>].first;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; type, r, c &#125;);</span><br><span class="line">visited[r][c][type] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">int</span> s = q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">while</span> (s--) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().r, c = q.front().c;</span><br><span class="line"><span class="keyword">int</span> type = q.front().type;</span><br><span class="line"><span class="keyword">if</span> (isEnd(r, c, type)) &#123;</span><br><span class="line">ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">5</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">0</span> || dir == <span class="number">1</span>) type = (type+<span class="number">1</span>) % <span class="number">2</span>; <span class="comment">// 회전 후 타입 원래대로</span></span><br><span class="line"><span class="keyword">int</span> nr = r + dr[dir];</span><br><span class="line"><span class="keyword">int</span> nc = c + dc[dir];</span><br><span class="line"><span class="keyword">if</span> (!isIn(nr, nc, type)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visited[nr][nc][type]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">0</span>) <span class="keyword">if</span> (!CheckRotate(nr, nc, type)) <span class="keyword">continue</span>; <span class="comment">// 3 x 3 확인 후 회전</span></span><br><span class="line"><span class="keyword">if</span> (Check(nr, nc, type)) &#123;</span><br><span class="line">visited[nr][nc][type] = <span class="literal">true</span>;</span><br><span class="line">q.push(&#123; type, nr, nc &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; land[i][j];</span><br><span class="line"><span class="keyword">if</span> (land[i][j] == <span class="string">'B'</span>) start_point.push_back(&#123; i, j &#125;);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (land[i][j] == <span class="string">'E'</span>) end_point.push_back(&#123; i, j &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BFS();</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">1e9</span>) ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1938/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 1932번 정수 삼각형</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1932/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1932/</guid>
      <pubDate>Sat, 25 Jan 2020 04:09:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1932-정수-삼각형&quot;&gt;&lt;a href=&quot;#1932-정수-삼각형&quot; class=&quot;headerlink&quot; title=&quot;#1932. 정수 삼각형&quot;&gt;&lt;/a&gt;#1932. 정수 삼각형&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="1932-정수-삼각형"><a href="#1932-정수-삼각형" class="headerlink" title="#1932. 정수 삼각형"></a>#1932. 정수 삼각형</h1><p><a href="https://www.acmicpc.net/problem/1932" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>맨 위층부터 시작 → 맨 아래 층<br>선택된 수들을 합하면서 내려옴</li><li>현재 층에서 선택된 수의 대각선(왼 or 오)만 가능</li><li>condition<ul><li>층은 최대 500</li><li>수의 범위 0~9999</li></ul></li><li><strong>Goal : 합이 최대가 되는 수</strong></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>입력을 보면 알겠지만 자기 자신 바로 아래와 오른쪽만 가능<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; input</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br></pre></td></tr></table></figure></li><li>그냥 재귀함수를 쓰면 반복되는 호출이 많이 일어난다.<br>DP를 사용해야 함을 알 수 있다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; #0</span><br><span class="line">7</span><br><span class="line">&#x2F;&#x2F; #1</span><br><span class="line">7+3 &#x2F; 7+8</span><br><span class="line">&#x2F;&#x2F; #2</span><br><span class="line">7+3+8, 7+3+1 &#x2F; 7+8+1, 7+8+0</span><br><span class="line">&#x2F;&#x2F; #3</span><br><span class="line">7+3+8+2, 7+3+8+7 &#x2F; 7+3+1+7, 7+3+1+4 &#x2F; 7+8+1+7, 7+8+1+4 &#x2F; 7+8+0+4, 7+8+0 +4</span><br><span class="line">&#x2F;&#x2F; #4</span><br><span class="line">20+4, 20+5 &#x2F; 25+5, 25+2 &#x2F; 18+5, 18+2 &#x2F; 14+2, 14+6 &#x2F; 23+5, 23+2 &#x2F; ...</span><br></pre></td></tr></table></figure>경우의 수는 1→2→4→8→16으로 늘어난다.</li></ul><p>500일 때 최대 500^2 = 250000(25만)의 경우의 수가 나온다. 물론 재귀함수를 사용하면 이보다 더 많은 함수 호출이 일어나 시간초과가 발생할 것이다.</p><p>6개월 전에 풀었던 것을 다시 풀어보려니…생각이 안난다.</p><p>dp[a][b]</p><h3 id="1-Try-6개월-전-코드"><a href="#1-Try-6개월-전-코드" class="headerlink" title="1 Try (6개월 전 코드)"></a>1 Try (6개월 전 코드)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">d[<span class="number">0</span>][<span class="number">0</span>] = t[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; n; h++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (h == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">d[k][<span class="number">0</span>] = d[k - <span class="number">1</span>][<span class="number">0</span>] + t[k][<span class="number">0</span>]; <span class="comment">//바로 위의 최대경로만 가져올 수 있음.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k == h)</span><br><span class="line">&#123;</span><br><span class="line">d[k][h] = d[k - <span class="number">1</span>][h - <span class="number">1</span>] + t[k][h]; <span class="comment">// 바로 위 왼쪽의 최대경로만 가져올 수 있음.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">d[k][h] = <span class="built_in">max</span>(d[k - <span class="number">1</span>][h - <span class="number">1</span>], d[k - <span class="number">1</span>][h]) + t[k][h];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> max_cost = <span class="number">0</span>; <span class="comment">// 0보다 작을 수 없음.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; n; index++)</span><br><span class="line">&#123;</span><br><span class="line">max_cost = <span class="built_in">max</span>(d[n - <span class="number">1</span>][index], max_cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max_cost &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> max_sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n, input;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;n);</span><br><span class="line">   dp.resize(n);</span><br><span class="line">   <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tri(n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;input);</span><br><span class="line">         tri[i].push_back(input);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   dp[<span class="number">0</span>][<span class="number">0</span>] = tri[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">         dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; max_sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1932/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 1525번 퍼즐</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1525/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1525/</guid>
      <pubDate>Sat, 25 Jan 2020 04:04:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;1525-퍼즐&quot;&gt;&lt;a href=&quot;#1525-퍼즐&quot; class=&quot;headerlink&quot; title=&quot;1525. 퍼즐&quot;&gt;&lt;/a&gt;1525. 퍼즐&lt;/h2&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerli
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="1525-퍼즐"><a href="#1525-퍼즐" class="headerlink" title="1525. 퍼즐"></a>1525. 퍼즐</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/1525" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>상당히 어려운 문제다. (접근법을 알아둘 필요가 있다.)</li><li>접근법</li></ul><ol><li>2차원 배열을 1차원 배열로 생각하기</li><li>퍼즐에 적혀있는 숫자를 하나로 쭉 이어진 수로 생각한다.</li><li>이어진 수 하나가 경우의 수라고 생각한다. (문제 목표는 123456789인 수(경우)를 찾는 것)</li><li>map&lt;해당 경우(수), 이동 횟수&gt;를 사용하여 해당 경우에 도달하기까지 걸리는 이동 횟수를 저장한다.</li><li>9(0)이 있는 위치에서 시작하여 BFS 탐색을 하고 탐색 시에 swap을 해야 한다. (이동을 할 때 인덱스 계산에 주의한다.)</li><li>swap을 위해 string을 사용한다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ex) 현재 193425786 (0대신 9를 해야 각 자릿 수가 모두 채워진다. 0123...으로 하면 0이 사라짐)</span><br><span class="line">193425786 </span><br><span class="line">-&gt; 913425786 (왼쪽 이동)</span><br><span class="line">-&gt; 123495786 (아래쪽 이동)</span><br><span class="line">-&gt; 149425786 (오른쪽 이동)</span><br><span class="line"></span><br><span class="line">3 x 3 </span><br><span class="line">0 1 2</span><br><span class="line">3 4 5</span><br><span class="line">6 7 8</span><br><span class="line">행 &#x3D; 9번 위치(0~8 중) &#x2F; 3</span><br><span class="line">열 &#x3D; 9번 위치 % 3</span><br></pre></td></tr></table></figure></li></ol><ul><li>주의</li></ul><p>아래 코드에서 <code>dist.count(next_num) == 0</code> 대신 <code>dist[next_num] == 0</code> 을 하면 틀리다.<br>dist[해당 수]에는 이동 횟수가 들어있고 dist.count(해당 수)는 해당 경우의 수가 몇 번 나왔는지 알려주기 때문이다. map에서 해당 키, 값을 넣어주지 않았는데 바로 해당 키에 대한 값을 참조하려고(<code>dist[next_num] == 0</code>) 하면 제대로 연산이 수행되지 않을 것이다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dist;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">q.push(start);</span><br><span class="line">dist[start] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> now_num = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">string</span> now = to_string(now_num);</span><br><span class="line"><span class="keyword">int</span> zero = now.<span class="built_in">find</span>(<span class="string">'9'</span>); <span class="comment">// 0의 위치</span></span><br><span class="line"><span class="keyword">int</span> x = zero / <span class="number">3</span>; <span class="comment">// 행</span></span><br><span class="line"><span class="keyword">int</span> y = zero % <span class="number">3</span>; <span class="comment">// 열</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; <span class="number">3</span> &amp;&amp; d_y &lt; <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">string</span> next = now;</span><br><span class="line">swap(next[x * <span class="number">3</span> + y], next[d_x * <span class="number">3</span> + d_y]); <span class="comment">// 문자열 인덱스(2차원-&gt;1차원)</span></span><br><span class="line"><span class="keyword">int</span> next_num = stoi(next);</span><br><span class="line"><span class="keyword">if</span> (dist.count(next_num) == <span class="number">0</span>) &#123;</span><br><span class="line">q.push(next_num);</span><br><span class="line">dist[next_num] = dist[now_num] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> num; <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) num = <span class="number">9</span>;</span><br><span class="line">s += to_string(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> start = stoi(s);</span><br><span class="line">BFS(start);</span><br><span class="line"><span class="keyword">if</span> (dist.count(<span class="number">123456789</span>) == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; dist[<span class="number">123456789</span>] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1525/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 1261번 알고스팟</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1261/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1261/</guid>
      <pubDate>Sat, 25 Jan 2020 04:04:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;1261-알고스팟&quot;&gt;&lt;a href=&quot;#1261-알고스팟&quot; class=&quot;headerlink&quot; title=&quot;1261. 알고스팟&quot;&gt;&lt;/a&gt;1261. 알고스팟&lt;/h2&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="1261-알고스팟"><a href="#1261-알고스팟" class="headerlink" title="1261. 알고스팟"></a>1261. 알고스팟</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/1261" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>벽을 최소한으로 부수면서 목적지에 도착해야 한다.</li><li>벽을 부수지 않고 갈 경우 비용은 0</li><li>벽을 부수고 갈 경우 비용은 1</li><li>따라서 deque를 사용하여 BFS 탐색을 한다.</li></ul><ol><li>벽을 부수지 않는 경우 front에 넣는다.</li><li>벽을 부수는 경우 back에 넣는다.</li><li>front 부분을 탐색하고 pop한다.<br>그래야 벽을 최소한으로 부수면서 visit(방문) 표시가 가능하다.</li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span> ,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">deque</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push_front(&#123; <span class="number">0</span>, <span class="number">0</span> &#125;);</span><br><span class="line">visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">tie(x, y) = q.front();</span><br><span class="line">q.pop_front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (d_x == N - <span class="number">1</span> &amp;&amp; d_y == M - <span class="number">1</span>) &#123;</span><br><span class="line">cnt[d_x][d_y] = cnt[x][y];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (d_x &gt; <span class="number">-1</span> &amp;&amp; d_y &gt; <span class="number">-1</span> &amp;&amp; d_x &lt; M &amp;&amp; d_y &lt; N) &#123;</span><br><span class="line"><span class="keyword">if</span> (visit[d_x][d_y]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">1</span>) &#123;</span><br><span class="line">cnt[d_x][d_y] = cnt[x][y] + <span class="number">1</span>;</span><br><span class="line">q.push_back(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cnt[d_x][d_y] = cnt[x][y];</span><br><span class="line">q.push_front(&#123; d_x, d_y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">visit[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">BFS();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt[M - <span class="number">1</span>][N - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/1261/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jenkins, NAVER Cloud Platform, Docker로 CI/CD 무중단 배포 환경 구축하기 - 2편</title>
      <link>https://doyuni.github.io/2020/01/21/DevOps/cicd-2/</link>
      <guid>https://doyuni.github.io/2020/01/21/DevOps/cicd-2/</guid>
      <pubDate>Tue, 21 Jan 2020 13:06:11 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/doyuni/98f5ef10-2d1c-11ea-84cb-8b0917a6a741/Untitled.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;2편에서는 CD에서 무중단 배포까지 구
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p><img src="https://images.velog.io/post-images/doyuni/98f5ef10-2d1c-11ea-84cb-8b0917a6a741/Untitled.png" alt></p><p>2편에서는 CD에서 무중단 배포까지 구축한다.</p><p>(1편에서는 Github Push 후에 Jenkins가 자동으로 빌드되도록 설정하였다.)</p><h2 id="2-Jenkins로-Node-js기반-프로젝트-배포-설정하기"><a href="#2-Jenkins로-Node-js기반-프로젝트-배포-설정하기" class="headerlink" title="2. Jenkins로 Node.js기반 프로젝트 배포 설정하기"></a>2. Jenkins로 Node.js기반 프로젝트 배포 설정하기</h2><p>배포를 위해 scp를 사용하여 Jenkins에 있는 프로젝트 코드를 NAVER Cloud 서버에 복사해야 한다.<br>Node.js 기반의 프로젝트는 Tomcat과 같은 WAS(웹 서버+웹 컨테이너)가 존재하지 않아 ssh로 접속, scp로 파일을 주고 받는 작업으로 비교적 간단히 배포할 수 있다.</p><h3 id="2-1-NAVER-Cloud-서버에도-ssh-키를-생성한다"><a href="#2-1-NAVER-Cloud-서버에도-ssh-키를-생성한다" class="headerlink" title="2-1. NAVER Cloud 서버에도 ssh 키를 생성한다."></a>2-1. NAVER Cloud 서버에도 ssh 키를 생성한다.</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="https://images.velog.io/post-images/doyuni/6cc0b7a0-2d34-11ea-a34d-c14098e77eeb/Untitled-1.png" alt></p><p>키가 생성되면 <code>authorized_keys</code>, <code>id_rsa</code>, <code>id_rsa.pub</code>, <code>known_hosts</code> 가 생성되어 있는 것을 볼 수 있다.  </p><p>scp로 파일을 주고 받는다 하였는데 이때 복사 받을 서버의 접속 비밀번호를 알아야 한다. 그렇게되면 복사할 때마다 매번 비밀번호를 요구하여 자동화 배포는 불가능하게 된다.</p><p>이를 해결하기 위해 위의 4개의 키를 이용한다.<br>Jenkins에서는 NAVER Cloud 서버를 호스트로, NAVER Cloud 서버에서는 Jenkins 서버의 공개 키를  허가받은 키로 등록한다. 이러면 비밀번호를 요구하지 않고 자동화 배포가 가능하다. </p><h3 id="2-2-Jenkins-서버에서-NAVER-Cloud-서버를-known-hosts로-등록한다"><a href="#2-2-Jenkins-서버에서-NAVER-Cloud-서버를-known-hosts로-등록한다" class="headerlink" title="2-2. Jenkins 서버에서 NAVER Cloud 서버를 known_hosts로 등록한다."></a>2-2. Jenkins 서버에서 NAVER Cloud 서버를 known_hosts로 등록한다.</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan -H (NAVER CLOUD 서버)ip &gt;&gt; ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure><p><img src="https://images.velog.io/post-images/doyuni/79b11860-2d34-11ea-a02c-297b5af6b22c/Untitled-2.png" alt></p><h3 id="2-3-Jenkins에서-생성한-키-중에-공개-키-id-rsa-pub-를-NAVER-Cloud-서버에서-생성한-authorized-keys에-입력한다"><a href="#2-3-Jenkins에서-생성한-키-중에-공개-키-id-rsa-pub-를-NAVER-Cloud-서버에서-생성한-authorized-keys에-입력한다" class="headerlink" title="2-3. Jenkins에서 생성한 키 중에 공개 키(id_rsa.pub)를 NAVER Cloud 서버에서 생성한 authorized_keys에 입력한다."></a>2-3. Jenkins에서 생성한 키 중에 공개 키(id_rsa.pub)를 NAVER Cloud 서버에서 생성한 authorized_keys에 입력한다.</h3><ul><li>Jenkins 서버의 공개 키</li></ul><p><img src="https://images.velog.io/post-images/doyuni/c096a970-2d34-11ea-97b9-bbf00f61618c/Untitled-5.png" alt></p><ul><li><p>NAVER Cloud 서버의 authorized_keys</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p><img src="https://images.velog.io/post-images/doyuni/c5b145a0-2d34-11ea-9d93-3372486f5bba/Untitled-6.png" alt></p></li><li><p>scp로 테스트하기<br>접속 비밀번호를 요구하지 않았다면 성공이다.</p></li></ul><p><img src="https://images.velog.io/post-images/doyuni/cabaa3c0-2d34-11ea-a02c-297b5af6b22c/Untitled-7.png" alt></p><ol><li>Jenkins 서버에서 test.txt 파일을 생성한다.</li><li>Jenkins 서버에서 scp를 사용해 test.txt를 NAVER Cloud 서버의 /root/test 폴더에 복사한다.<br>비밀번호를 요구하지 않으면 성공.</li><li>NAVER Cloud 서버에서 복사된 파일을 확인한다.</li></ol><h2 id="3-NAVER-Cloud-서버에-Docker-NGINX-설정하기"><a href="#3-NAVER-Cloud-서버에-Docker-NGINX-설정하기" class="headerlink" title="3. NAVER Cloud 서버에 Docker, NGINX 설정하기"></a>3. NAVER Cloud 서버에 Docker, NGINX 설정하기</h2><p>이제 프로젝트가 배포되는 NAVER Cloud 서버에서 설정해야 할 부분이다.<br>(*Docker 및 NGINX 설치는 생략한다.)</p><h3 id="3-1-Dockerfile-작성"><a href="#3-1-Dockerfile-작성" class="headerlink" title="3-1. Dockerfile 작성."></a>3-1. Dockerfile 작성.</h3><p>ssh로 서버에 접속하고 Dockerfile을 다음과 같이 작성한다.</p><p><img src="https://images.velog.io/post-images/doyuni/cfb29cc0-2d34-11ea-bc31-b150e14926d1/Untitled-8.png" alt><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> 이미지 환경</span><br><span class="line">    </span><br><span class="line"><span class="keyword">MAINTAINER</span> 개발자</span><br><span class="line">    </span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> 호스트와 공유할 폴더</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /app</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./프로젝트 소스코드 폴더/ /app</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure></p><ul><li>FROM: Node 이미지(Node version 명시)</li><li>MAINTAINER: 개발자(팀명)</li><li>VOLUME: host와 컨테이너가 공유할 폴더 경로</li><li>RUN: 해당 명령어 실행( 위에선 app 폴더 생성 )</li><li>WORKDIR: 작업 디렉토리 설정(위에서 만든 app 폴더로 설정)</li><li>COPY: NAVER Cloud 서버에 있는 파일을 컨테이너 폴더에 복사<br>서버에 있는 파일은 Dockerfile이 존재하는 현재 경로 내에 존재하는 것만 가능하다.<br>(즉, 절대 경로는 Dockerfile이 있는 경로 이내가 아니라면 불가능)</li></ul><p>그 다음은 패키지 파일들을 설치하고 서버를 실행한다.</p><p><code>docker image build -t 도커이미지이름 .</code>를 입력하여 이미지를 빌드한다.</p><h3 id="3-2-Docker-compose-작성하기"><a href="#3-2-Docker-compose-작성하기" class="headerlink" title="3-2. Docker-compose 작성하기"></a>3-2. Docker-compose 작성하기</h3><p>docker-compose(컨테이너 관리)를 설치하여 편하게 컨테이너를 설정한다.<br>여기서 blue-green 배포 방식이 사용되는데, 이는 무중단 배포 구축을 위함이다.</p><ul><li>Dockerfile이 있는 곳에 docker-compose.blue.yml을 다음과 같이 작성한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/dcfed920-2d34-11ea-bcda-4526cedc7d87/Untitled-9.png" alt><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">linking-server:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">빌드한</span> <span class="string">도커</span> <span class="string">이미지</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./deploy:/deploy/linking</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"NAVER Cloud 서버 포트:컨테이너 포트"</span></span><br></pre></td></tr></table></figure></p><p>image: 아까 빌드한 이미지 이름을 작성한다.</p><p>volumes: host 폴더와 컨테이너 폴더를 설정하여 공유한다.(심볼릭 링크와 비슷한 개념이라고 한다.)</p><p>ports: host 포트와 컨테이너 포트 순으로 작성하여 포트 포워딩 설정을 한다.</p><ul><li>같은 곳에 docker-compose.green.yml을 다음과 같이 작성한다.<br>host 포트만 다르다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/e1c561e0-2d34-11ea-b2c6-296aa1e0beae/Untitled-10.png" alt></p><h3 id="3-3-deploy-script-작성하기"><a href="#3-3-deploy-script-작성하기" class="headerlink" title="3-3. deploy script 작성하기."></a>3-3. deploy script 작성하기.</h3><ul><li>같은 곳에 deploy.sh를 다음과 같이 작성한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/e67925f0-2d34-11ea-9d93-3372486f5bba/Untitled-11.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">    </span><br><span class="line">DOCKER_APP_NAME=linking-server</span><br><span class="line">    </span><br><span class="line">EXIST_BLUE=$(docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-blue -f docker-compose.blue.yml ps | grep Up)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$EXIST_BLUE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"blue up"</span></span><br><span class="line">    docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-blue -f docker-compose.blue.yml up -d</span><br><span class="line">    </span><br><span class="line">    sleep 10</span><br><span class="line">    </span><br><span class="line">    docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-green -f docker-compose.green.yml down</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"green up"</span></span><br><span class="line">    docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-green -f docker-compose.green.yml up -d</span><br><span class="line">    </span><br><span class="line">    sleep 10</span><br><span class="line">    </span><br><span class="line">    docker-compose -p <span class="variable">$&#123;DOCKER_APP_NAME&#125;</span>-blue -f docker-compose.blue.yml down</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>지금까지 잘 따라 했다면 아래와 비슷한 디렉토리 구조를 볼 수 있을 것이다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/eacb9020-2d34-11ea-a34d-c14098e77eeb/Untitled-12.png" alt></p><ul><li>컨테이너 생성하기</li></ul><p><code>docker-compose -p ${DOCKER_APP_NAME}-blue -f docker-compose.blue.yml up -d</code>를 입력하여 blue 컨테이너를 먼저 생성해준다.</p><p><code>docker ps -a</code>로 컨테이너가 잘 실행되고 있는지 확인할 수 있다.</p><h3 id="3-4-NGINX-설정하기"><a href="#3-4-NGINX-설정하기" class="headerlink" title="3-4. NGINX 설정하기."></a>3-4. NGINX 설정하기.</h3><p>다음은 NGINX로 blue, green의 로드밸런싱을 설정해 주어야 한다.</p><ul><li><code>vi /etc/nginx/sites-available/linking-server</code>를 입력하여 다음과 같이 작성한다.<br>linking-server는 필자가 정한 이름이다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/f086b210-2d34-11ea-b2c6-296aa1e0beae/Untitled-13.png" alt><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Balancing</span></span><br><span class="line"><span class="attribute">upstream</span> linking-server &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:1025</span> weight=<span class="number">5</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">10s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:1026</span> weight=<span class="number">10</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">10s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="attribute">server_name</span> NAVER Cloud 서버 아이피;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://linking-server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>그런 다음 아래 명령어로 이 파일을 /etc/nginx/sites-enabled 디렉터리에 링크해준다.</p><p><code>sudo ln -fs /etc/nginx/sites-available/linking-server /etc/nginx/sites-enabled/</code></p><p>마지막으로 <code>sudo nginx -t</code> 명령어로 문법 이상 유무를 확인하고 이상이 없을 경우, <code>systemctl stop nginx</code> 명령어로 NGINX를 종료한 후에 <code>systemctl start nginx</code> 로 다시 시작한다.</p><h3 id="3-5-NAVER-Cloud-Platform-ACG-설정하기"><a href="#3-5-NAVER-Cloud-Platform-ACG-설정하기" class="headerlink" title="3-5.  NAVER Cloud Platform ACG 설정하기."></a>3-5.  NAVER Cloud Platform ACG 설정하기.</h3><p>여기서 마지막으로 한 가지 해야할 것은 ACG 설정이다.</p><ul><li>ACG 설정하기</li></ul><p>NAVER Cloud Platform 콘솔에서 1024포트를 열어준다. 위에서 blue, green 모두 다른 포트지만 NGINX를 통해 1024 포트로 로드 밸런싱 되기에 사용자는 이를 통해 접근할 수 있다.<br>(보통 백엔드와 프론트엔드를 분리하면서 프로젝트를 진행하고 있다면 프론트엔드는 80포트를 사용하는게 좋다. 80이 기본 포트라 생략 가능하므로)</p><p><img src="https://images.velog.io/post-images/doyuni/f683e610-2d34-11ea-b061-5502f6853cc7/Untitled-14.png" alt></p><p>이것으로 NAVER Cloud 서버에서의 설정은 끝났다.</p><h2 id="4-마지막-작업"><a href="#4-마지막-작업" class="headerlink" title="4. 마지막 작업"></a>4. 마지막 작업</h2><p>이제 마지막 Jenkins에서 빌드할 때 설정을 해주어야 위에서 설정한 무중단 배포가 자동화된다.</p><ul><li>Jenkins 프로젝트 관리에서 “Execute managed script”를 클릭한다.<br>다만, 아직 작성한 스크립트가 없기에 Jenkins 관리 &gt; Managed files &gt; Add a new Config를 통해 스크립트를 작성한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/fb45daf0-2d34-11ea-9eb4-9374768f161b/Untitled-15.png" alt></p><ul><li>다음과 같이 작성한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/058e9b50-2d35-11ea-a39c-db4aee70d113/Untitled-16.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ssh -T root@서버 아이피 &lt;&lt;EOF</span><br><span class="line">    rm -rf /home/docker-image/deploy/*</span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">EOF</span><br><span class="line">    </span><br><span class="line">scp -r /var/lib/jenkins/<span class="built_in">jobs</span>/LinkingCI/workspace/* root@서버 아이피:/home/docker-image/deploy/    </span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ssh -T root@서버 아이피 &lt;&lt;EOF</span><br><span class="line">    <span class="built_in">cd</span> /home/docker-image</span><br><span class="line">    docker image build -t linking-server-docker-image .</span><br><span class="line">    ./deploy.sh</span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>1) Jenkins가 빌드 동안 해당 서버에 접속하여 원래 있던 애플리케이션 코드를 삭제한다.</p><p>2) 빌드된 파일을 해당 서버에 복사한다.</p><p>3) 해당 서버에 다시 접속하여 새로 복사된 파일을 토대로 도커 이미지를 빌드한다.</p><p>4) 배포 스크립트를 실행한다.</p><p>위와 같은 과정이 일어나고 지금까지 설정한 것들이 모두 자동화되어 무중단 배포까지 진행된다. 이를 이제 Jenkins 프로젝트 관리에서 실행하도록 한다.</p><p><img src="https://images.velog.io/post-images/doyuni/0a73a890-2d35-11ea-872e-cd8bbd00f6c5/Untitled-17.png" alt></p><h2 id="5-빌드-상태-표시-Slack-알림"><a href="#5-빌드-상태-표시-Slack-알림" class="headerlink" title="5. 빌드 상태 표시, Slack 알림"></a>5. 빌드 상태 표시, Slack 알림</h2><p>추가로 프로젝트에서 보이는 Embeddable Build Status를 클릭하면 마크다운 형식으로 Github 레포지토리에 빌드 상태바를 보이게 할 수 있다.</p><p><img src="https://images.velog.io/post-images/doyuni/0ef9f400-2d35-11ea-8dcc-172ed0ac5b8f/Untitled-18.png" alt></p><p>마지막으로 팀원들이 빌드 상태(시작, 실패, 성공)을 알고 싶을 때 Slack을 통해 알림을 받도록 할 수도 있다.<br>1편에서 이미 관련 플러그인을 설치하였기에 바로 설정이 가능하다.</p><ul><li>Slack에 채널을 만들었다면 Apps에서 Jenkins를 검색 후 클릭한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/16b2bab0-2d35-11ea-b2c6-296aa1e0beae/Untitled-19.png" alt></p><ul><li>알림을 받을 채널을 설정하면 Jenkins에서 어떻게 설정해야 하는지 친절하게 나온다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/1be01b90-2d35-11ea-b2c6-296aa1e0beae/Untitled-20.png" alt></p><p>설정을 하고 나면 Jenkins 프로젝트에서 빌드 후 조치에 알림 받을 내역을 설정할 수가 있게 된다.</p><p><img src="https://images.velog.io/post-images/doyuni/203bfba0-2d35-11ea-b2c6-296aa1e0beae/Untitled-21.png" alt></p><ul><li>빌드 시작부터 끝까지 알림이 날라온다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/24bec4a0-2d35-11ea-9d93-3372486f5bba/Untitled-22.png" alt></p><p>이것으로 CI/CD 무중단 배포 환경 구축을 마친다.</p><h3 id="끝"><a href="#끝" class="headerlink" title="-끝-"></a>-끝-</h3>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/21/DevOps/cicd-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jenkins, NAVER Cloud Platform, Docker로 CI/CD 무중단 배포 환경 구축하기 - 1편</title>
      <link>https://doyuni.github.io/2020/01/21/DevOps/cicd-1/</link>
      <guid>https://doyuni.github.io/2020/01/21/DevOps/cicd-1/</guid>
      <pubDate>Tue, 21 Jan 2020 13:01:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;이번 내용은 필자가 프로젝트를 진행하면서 처음으로 DevOps를 맡으면서 꼭 공유 하겠다고 마음 먹고 작성하였다.&lt;/p&gt;
&lt;h2 id=&quot;CI-CD란&quot;&gt;&lt;a href=&quot;#CI-CD란&quot; class=&quot;headerlink&quot; title=&quot;CI/CD란?&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>이번 내용은 필자가 프로젝트를 진행하면서 처음으로 DevOps를 맡으면서 꼭 공유 하겠다고 마음 먹고 작성하였다.</p><h2 id="CI-CD란"><a href="#CI-CD란" class="headerlink" title="CI/CD란?"></a>CI/CD란?</h2><ul><li><p>CI(Continuous Integration)<br>지속적인 통합을 의미한다. 이는 개발자를 위한 자동화 프로세스 중 하나이며 어플리케이션을 변경할 때 자동으로 빌드 및 테스트되어 Github 공유 레포지토리에 병합된다. 그렇기에 협업 시 발생할 수 있는 충돌문제를 해결할 수 있다.</p></li><li><p>CD(Continuous Deployment)<br>지속적인 배포를 의미한다. 어플리케이션 변경 사항이 반영된 공유 레포지토리에서 사용자가 사용 가능한 환경까지 자동으로 배포하는 것을 말한다. 이를 통해 어플리케이션을 원활히 그리고 더 빠르게 제공하므로써 사용자의 피드백을 빠르게 반영할 수 있다.</p></li></ul><p>아래는 필자가 맡은 프로젝트의 전체 시스템 구조이면서 동시에, CI/CD 과정을 볼 수 있다. </p><h2 id="전체-시스템-구조"><a href="#전체-시스템-구조" class="headerlink" title="전체 시스템 구조"></a>전체 시스템 구조</h2><p><img src="https://images.velog.io/post-images/doyuni/2b871b30-2d11-11ea-8e78-f3280e026905/Untitled.png" alt></p><p>대부분 Travis CI, AWS, Docker, NGINX를 사용하여 CI/CD 무중단 배포를 구축한다는 점에서 비교하여 보아도 좋을 것이다.</p><h2 id="선택의-순간들"><a href="#선택의-순간들" class="headerlink" title="선택의 순간들"></a>선택의 순간들</h2><h3 id="AWS가-아닌-NAVER-CLOUD-선택"><a href="#AWS가-아닌-NAVER-CLOUD-선택" class="headerlink" title="AWS가 아닌 NAVER CLOUD 선택"></a>AWS가 아닌 NAVER CLOUD 선택</h3><p>AWS와 NAVER Cloud Platform을 사용해 보면서 느낀 것은 확실히 AWS의 기능이 훨씬 많고 유용하다.<br>그럼에도 NAVER Cloud Platform을 사용한 것은 40만 크레딧(지원 받았다.)이 제일 컸다.<br>AWS에는 무중단 배포까지 지원하는 서비스인 Blue-Green Deployment가 있는데 반해 NAVER Cloud는 없다…<br>그럼 굳이 왜 AWS를 선택하지 않았냐고 할 수 있는데 내가 직접 설정해서 구축하고 싶었기 때문이다. (사서 고생한다는 얘기)</p><h3 id="Travis가-아닌-Jenkins-선택"><a href="#Travis가-아닌-Jenkins-선택" class="headerlink" title="Travis가 아닌 Jenkins 선택"></a>Travis가 아닌 Jenkins 선택</h3><p>Travis reference만 보아도 AWS랑 얼마나 죽이 잘 맞는지를 알 수 있다. (AWS말고도 Google Cloud, Azure도 지원한다.) 이미 NAVER Cloud를 선택한 이상 Travis는 더 어려운 방법으로 가는 길이라 생각했다. 오히려 설정할 수 있는 범위가 넓은 Jenkins를 택하는 것이 쉽다고 판단하였다. 처음에 AWS와 Travis로 자동화 배포 환경 구축을 연습했었는데, 개인적인 입장으로는 Jenkins가 좀 더 쉬운 것 같다.</p><p>40만 크레딧의 위엄으로 Jenkins를 도커가 아닌 Naver Cloud로 서버를 따로 구축했다. 지금 생각해보면 자원 낭비인 셈이지만 안정성 측면에서는 따로 서버를 두는 것이 좋다.</p><h1 id="환경-구축하기"><a href="#환경-구축하기" class="headerlink" title="환경 구축하기"></a>환경 구축하기</h1><p>NAVER Cloud 사용 설명서는 무척 잘 되어 있고 AWS의 EC2나 S3와 같은 개념과 똑같기에 같은 방식으로 설정하면 된다.</p><p><img src="https://images.velog.io/post-images/doyuni/6081e180-2d11-11ea-8db4-a3d765df2b82/Untitled-1.png" alt></p><ul><li>NAVER Cloud의 Server = AWS의 EC2</li><li>NAVER Cloud의 Object Storage = AWS의 S3</li></ul><p>아래와 같이 SourcePipeline 서비스를 이용하면 Github에서 push한 것을 자동으로 빌드하고 배포할 수 있는데, 아래 사진 우측 상단에 보이는 파이프라인 실행하기를 매번 클릭해줘야 한다…내가 원한건 push만 해도 자동화 빌드 및 배포이다. 결국 이걸 접고 Jenkins와 NAVER Cloud의 Server만 사용하기로 결정했다.</p><p><img src="https://images.velog.io/post-images/doyuni/67d4e180-2d11-11ea-8db4-a3d765df2b82/Untitled-2.png" alt></p><h2 id="1-Jenkins-설정하기"><a href="#1-Jenkins-설정하기" class="headerlink" title="1. Jenkins 설정하기"></a>1. Jenkins 설정하기</h2><p>Docker로 Jenkins 서버를 운영해도 되지만 NAVER Cloud에서 다음과 같이 지원하기에 사용하였다.<br>다만 수동으로 최신 업데이트 하는 것을 권장한다.</p><p><img src="https://images.velog.io/post-images/doyuni/8fd2c3f0-2d11-11ea-8e78-f3280e026905/Untitled-3.png" alt></p><h3 id="1-1-Jenkins-보안-설정"><a href="#1-1-Jenkins-보안-설정" class="headerlink" title="1-1. Jenkins 보안 설정"></a>1-1. Jenkins 보안 설정</h3><p>Jenkins는 기본적으로 보안 설정이 되어있지 않다.<br>Jenkins 관리 &gt; Configure Global Security에서 설정할 수 있다.</p><p><img src="https://images.velog.io/post-images/doyuni/959ba180-2d11-11ea-89ca-7dd4c2f1609a/Untitled-4.png" alt></p><ul><li>처음에 사용자의 가입을 허용하여 admin 계정을 생성한다. 팀원과 함께 작업한다면 팀원 각각 계정 생성하도록 둔다.</li><li>계정 생성을 끝냈으면 ‘Matrix-based security’를 적절히 설정한다. (없다면 Matrix Authorization Strategy Plugin를 설치하자.)<br>필자는 익명에게 읽기 권한 중 Job(Jenkins 작업 단위) 부분만 볼 수 있게 하였다. 이는 나중에 설정할 Github의 build status를 보여주기 위함이다.<br>그리고 혼자 환경 구축을 담당 하였기에 팀원 계정 역시 익명과 같은 권한을 주었다.</li></ul><h3 id="1-2-플러그인-설치하기"><a href="#1-2-플러그인-설치하기" class="headerlink" title="1-2. 플러그인 설치하기"></a>1-2. 플러그인 설치하기</h3><p>Jenkins 관리 &gt; 플러그인 관리</p><ul><li>Github plugin: Jenkins와 Github 통합</li><li>Global Slack Notifier Plugin: Slack 연동(Job 알림 설정)</li><li>Publish Over SSH: ssh로 빌드 파일 보내기</li><li>Embeddable Build Status Plugin: Github 레포지토리에 빌드 상태바 생성</li><li>Managed Scripts: Node.js 기반의 서버를 배포하기 위한 스크립트</li></ul><h3 id="1-3-Jenkins-Global-설정하기"><a href="#1-3-Jenkins-Global-설정하기" class="headerlink" title="1-3. Jenkins Global 설정하기"></a>1-3. Jenkins Global 설정하기</h3><p>Jenkins 관리 &gt; 시스템 설정 &gt; GitHub Servers에서 다음과 같이 설정한다.</p><p><img src="https://images.velog.io/post-images/doyuni/9d14c720-2d11-11ea-89ca-7dd4c2f1609a/Untitled-5.png" alt></p><p>Credentials 설정을 위해 자신의 Github &gt; Settings &gt; Developer settings &gt; Personal access tokens에서 다음과 같이 토큰을 생성한다.</p><p><img src="https://images.velog.io/post-images/doyuni/a3d8a680-2d11-11ea-89ca-7dd4c2f1609a/Untitled-6.png" alt></p><p>생성 후 화면에 보이는 secret 문자열을 아래의 Secret에 입력한다.</p><p><img src="https://images.velog.io/post-images/doyuni/a7fd22e0-2d11-11ea-89ca-7dd4c2f1609a/Untitled-7.png" alt></p><h3 id="1-4-프로젝트-생성-및-설정하기"><a href="#1-4-프로젝트-생성-및-설정하기" class="headerlink" title="1-4. 프로젝트 생성 및 설정하기"></a>1-4. 프로젝트 생성 및 설정하기</h3><p>새로운 Item을 클릭하고 프로젝트 이름을 입력, Freestyle을 누른다.</p><p><img src="https://images.velog.io/post-images/doyuni/b08372c0-2d11-11ea-89ca-7dd4c2f1609a/Untitled-8.png" alt></p><ul><li>다음과 같이 프로젝트 url을 입력하고 Credentials를 설정한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/b6af09c0-2d11-11ea-8db4-a3d765df2b82/Untitled-9.png" alt></p><p>이 작업은 Github을 연동하는 것인데, ID와 PW로 연동하면 보안에 취약하기에 ssh키로 연동하였다.</p><h3 id="ssh-키-생성하기"><a href="#ssh-키-생성하기" class="headerlink" title="ssh 키 생성하기"></a>ssh 키 생성하기</h3><ul><li>ssh로 Jenkins 서버에 원격 접속하여 다음을 입력한다.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f id_rsa</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://images.velog.io/post-images/doyuni/bbb4e570-2d11-11ea-89ca-7dd4c2f1609a/Untitled-10.png" alt></p><p><code>id_rsa</code>, <code>id_rsa.pub</code> 를 포함해 총 4개의 키가 생성된다.</p><ul><li>아래 Add 표시를 눌러 <code>cat ~/.ssh/id_rsa</code> 입력 후 나오는 private key를 넣어준다</li></ul><p><img src="https://images.velog.io/post-images/doyuni/c1bacc00-2d11-11ea-8e78-f3280e026905/Untitled-11.png" alt></p><p>BEGIN ~부터 모두 복사하여 입력한다.</p><p><img src="https://images.velog.io/post-images/doyuni/cb35dc20-2d11-11ea-8e78-f3280e026905/Untitled-12.png" alt></p><ul><li>Github에 공개 키 등록하기.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/d2eaab30-2d11-11ea-8e78-f3280e026905/Untitled-13.png" alt></p><p><code>cat ~/.ssh/id_rsa.pub</code> 를 입력하면 나오는 공개 키를 프로젝트 레포지토리의 Setting &gt; Deploy keys에 등록한다.</p><p><img src="https://images.velog.io/post-images/doyuni/d9ebe1b0-2d11-11ea-89ca-7dd4c2f1609a/Untitled-14.png" alt></p><p>이제 Jenkins과 Github을 연동시켰기에, Jenkins에 코드를 가져올 수 있게 되었다.</p><ul><li>다음으로는 push했을 때 Jenkins가 push 이벤트를 받을 수 있도록 설정 해보자.<br>마찬가지로 레포지토리의 setting &gt; webhooks 에서 빨간색 네모박스에 Jenkins ip 주소를 입력하고 나머지는 그대로 입력한다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/df2a0b70-2d11-11ea-89ca-7dd4c2f1609a/Untitled-15.png" alt></p><ul><li>Github에서의 설정은 끝났고 Jenkins 프로젝트에서 다음을 체크함으로써 이벤트 설정은 끝이 났다.<br>이젠 push만 하면 Jenkins 해당 프로젝트에서 빌드가 시작됨을 볼 수 있다.</li></ul><p><img src="https://images.velog.io/post-images/doyuni/e2e69e40-2d11-11ea-8e78-f3280e026905/Untitled-16.png" alt></p><p> 빌드 기록을 통해 소스 코드가 빌드 중인지 빌드 완료 되었는지를 확인할 수 있다.</p><p><img src="https://images.velog.io/post-images/doyuni/e86c0a30-2d11-11ea-8e78-f3280e026905/Untitled-17.png" alt></p><p>이것으로 Jenkins로 CI 환경 구축은 끝이 났다. 2편에서는 CD 환경 구축과 무중단 배포를 구축해보겠다.</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/21/DevOps/cicd-1/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
