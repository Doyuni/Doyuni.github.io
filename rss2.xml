<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JUST WRITE IT.</title>
    <link>https://doyuni.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 25 Jan 2020 13:16:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>백준 16235번 나무 재테크</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16235-나무-재테크&quot;&gt;&lt;a href=&quot;#16235-나무-재테크&quot; class=&quot;headerlink&quot; title=&quot;#16235. 나무 재테크&quot;&gt;&lt;/a&gt;#16235. 나무 재테크&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16235-나무-재테크"><a href="#16235-나무-재테크" class="headerlink" title="#16235. 나무 재테크"></a>#16235. 나무 재테크</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/16235" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>시뮬레이션 문제이다.</li><li>봄, 여름, 가을, 겨울에 맞게 작업을 수행하면 된다.</li><li>단 한 칸에 여러 개의 나무가 존재할 수 있다는 점에 주목하자.</li></ul><p>처음에 3차원 벡터로 해당 칸에 나무 정보를 저장하였지만 계절마다 작업을 수행할 때 상당히 비효율적이라 시간초과가 떴다.</p><p><strong>→ 문제의 조건을 잘 보면 답이 보인다. (항상 느끼는 거지만 어떤 자료구조를 선택할지가 중요)</strong></p><ol><li>나이가 어린 나무부터 양분을 먹는다. (해당 칸에 있는 나무 정보를 순회할 때 어린 나무부터 접근해야 한다.)</li><li>나무 정보를 처음에 입력받을 때 한 칸에 하나씩만 받는다.</li><li>나무가 추가될 때 나이가 1인 나무가 추가된다.</li><li>나이가 클수록 먼저 죽음(나이만큼 양분을 먹기 때문이다.)</li></ol><p>위 조건을 도합하면 <code>deque</code> 가 가장 적합하다. <code>deque&lt;int&gt; tree[10][10]</code><br>나이가 어린 나무가 앞에 즉, 오름차순으로 정렬되어 있어야 하는데, 처음에 각 칸에 하나씩 입력 받고 추가될 때 <strong>앞부분에 나무를 추가</strong>해주면 되기 때문이다. 죽는건 앞에서부터 탐색을 하다가 죽는 나무가 생기면 그 뒤부터 이미 죽은 나무가 되기에 죽을 나무 개수만 카운트하고 <strong>뒤에서부터 개수만큼 pop하면</strong> 되기 때문이다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, ans, diff;</span><br><span class="line"><span class="keyword">int</span> land[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">v.resize(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">v[i].resize(N);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">land[i][j] = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c, age;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; age;</span><br><span class="line">v[r<span class="number">-1</span>][c<span class="number">-1</span>].push_back(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 봄, 여름</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j].size() &gt; <span class="number">1</span>) sort(v[i][j].begin(), v[i][j].end());</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i][j].size(); ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] - v[i][j][k] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += v[i][j][k] / <span class="number">2</span>;</span><br><span class="line">v[i][j][k] = <span class="number">0</span>; <span class="comment">// 죽은 표시</span></span><br><span class="line">diff++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">land[i][j] -= v[i][j][k];</span><br><span class="line">v[i][j][k]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 가을, 겨울</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v[i][j].size(); ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (v[i][j][k] % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">8</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> r = i + dx[dir];</span><br><span class="line"><span class="keyword">int</span> c = j + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (r &lt;= <span class="number">-1</span> || c &lt;= <span class="number">-1</span> || r &gt;= N || c &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line">v[r][c].push_back(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line"><span class="keyword">while</span> (K--) &#123;</span><br><span class="line">Task();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">ans += v[i][j].size();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans -= diff;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>시간초과</li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, K, ans;</span><br><span class="line"><span class="keyword">int</span> land[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">ans = M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">land[i][j] = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r, c, age;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; age;</span><br><span class="line">tree[r - <span class="number">1</span>][c - <span class="number">1</span>].push_back(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 봄, 여름</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i][j].empty()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, dead_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = tree[i][j].begin(); iter != tree[i][j].end(); ++iter) &#123;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] - *iter &lt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += (*iter) / <span class="number">2</span>;</span><br><span class="line">dead_num++;</span><br><span class="line">ans--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">land[i][j] -= (*iter);</span><br><span class="line">(*iter)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; dead_num; ++k) tree[i][j].pop_back();</span><br><span class="line">land[i][j] += sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 가을, 겨울</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = tree[i][j].begin(); iter != tree[i][j].end(); ++iter) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*iter) % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">8</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> r = i + dx[dir];</span><br><span class="line"><span class="keyword">int</span> c = j + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (r &lt;= <span class="number">-1</span> || c &lt;= <span class="number">-1</span> || r &gt;= N || c &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line">tree[r][c].push_front(<span class="number">1</span>);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">land[i][j] += A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line"><span class="keyword">while</span> (K--) &#123;</span><br><span class="line">Task();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16235/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 16234번 인구 이동</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;16234-인구-이동&quot;&gt;&lt;a href=&quot;#16234-인구-이동&quot; class=&quot;headerlink&quot; title=&quot;#16234. 인구 이동&quot;&gt;&lt;/a&gt;#16234. 인구 이동&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Proble
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="16234-인구-이동"><a href="#16234-인구-이동" class="headerlink" title="#16234. 인구 이동"></a>#16234. 인구 이동</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/16234" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><strong>BFS</strong></li></ul><p>N x N 크기의 배열을 전부 탐색하면서 check표시가 되어있지 않은 부분은 인구 이동이 가능한지 확인 작업이 수행된다.</p><p>작업 동안 누적 합과 연합에 포함된 나라 수를 계산해야 한다.</p><ol><li>queue가 비어있을 때까지 다음을 수행한다.</li><li>현재 위치에서 4방향 탐색 → 범위체크, 탐색할 위치가 미탐색인지 확인</li><li>탐색 가능하면 누적 합, 나라 수 계산, 종료되지 않게 flag 갱신, queue에 넣어준다.</li><li>만약 나라 수가 1보다 크면 누적합과 사람 수를 따로 저장한다.</li></ol><p>위 작업이 끝나면 이제 따로 저장한 누적합과 사람 수를 이용해 N x N 크기의 배열을 바꿔준다. (실질적 인구 이동)</p><p>만약 flag가 false 즉, 인구이동이 없다면 종료한다.</p><ul><li><strong>DFS</strong></li></ul><p>BFS보다 훨씬 빠르고 깔끔하며 명료하다. 처음에 BFS로 할 생각을 했던 것은 N x N 크기의 배열 값을 미리 바꾸면 인구 이동에 영향을 미치게 된다는 생각에 코드를 작성했었는데 생각해보니 한 번 탐색이 끝나면(BFS든 DFS든) check 표시 되어 있기에 영향을 주지 않고 한 번 탐색할 때 위치만 미리 벡터에 저장해주면 된다.</p><h3 id="BFS-1-Try"><a href="#BFS-1-Try" class="headerlink" title="BFS 1 Try"></a>BFS 1 Try</h3><ul><li>code<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, L, R, idx, ans;</span><br><span class="line"><span class="keyword">bool</span> no_end;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">51</span>][<span class="number">51</span>]; <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="keyword">int</span> val[<span class="number">1251</span>][<span class="number">2</span>]; <span class="comment">// 값, 사람 수</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; N &amp;&amp; y &lt; N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movePeople</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">idx++; </span><br><span class="line"><span class="keyword">int</span> sum = <span class="built_in">map</span>[r][c], cnt = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push(&#123; r, c &#125;);</span><br><span class="line">check[r][c] = idx;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">tie(x, y) = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; check[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &gt;= L &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &lt;= R) &#123;</span><br><span class="line">check[d_x][d_y] = idx;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">no_end = <span class="literal">true</span>;</span><br><span class="line">cnt++; sum += <span class="built_in">map</span>[d_x][d_y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">val[idx][<span class="number">0</span>] = sum;</span><br><span class="line">val[idx][<span class="number">1</span>] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">check[r][c] = <span class="number">0</span>;</span><br><span class="line">idx--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changePeople</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> no_move = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">map</span>[i][j] = val[check[i][j]][<span class="number">0</span>] / val[check[i][j]][<span class="number">1</span>];</span><br><span class="line">check[i][j] = <span class="number">0</span>; no_move = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!no_move) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;N, &amp;L, &amp;R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line">no_end = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j] &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">movePeople(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">changePeople();</span><br><span class="line">&#125; <span class="keyword">while</span> (no_end);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DFS-1-Try"><a href="#DFS-1-Try" class="headerlink" title="DFS 1 Try"></a>DFS 1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, L, R, sum, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">51</span>][<span class="number">51</span>]; </span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v; <span class="comment">// 위치 정보</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; N &amp;&amp; y &lt; N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">sum += <span class="built_in">map</span>[x][y];</span><br><span class="line">v.push_back(&#123; x, y &#125;);</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; !check[d_x][d_y]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &gt;= L &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[x][y] - <span class="built_in">map</span>[d_x][d_y]) &lt;= R) &#123;</span><br><span class="line">dfs(d_x, d_y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> change = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">v.clear();</span><br><span class="line">dfs(i, j);</span><br><span class="line"><span class="keyword">if</span> (v.size() == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : v) &#123;</span><br><span class="line"><span class="built_in">map</span>[e.first][e.second] = sum / v.size();</span><br><span class="line">&#125;</span><br><span class="line">change = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> change;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;N, &amp;L, &amp;R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (task()) &#123; ans++; &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/16234/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15686번 치킨 배달</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15686-치킨-배달&quot;&gt;&lt;a href=&quot;#15686-치킨-배달&quot; class=&quot;headerlink&quot; title=&quot;#15686. 치킨 배달&quot;&gt;&lt;/a&gt;#15686. 치킨 배달&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.n
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15686-치킨-배달"><a href="#15686-치킨-배달" class="headerlink" title="#15686. 치킨 배달"></a>#15686. 치킨 배달</h1><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 도시</li><li>0: 빈 칸, 1: 집, 2: 치킨 집</li><li>도시의 치킨 거리는 모든 집의 치킨 거리의 합</li><li>치킨 거리 ( 집: (r1, c1) 치킨집: (r2, c2) )<br>집과 가장 가까운 치킨집 사이의 거리를 말한다.</li></ul><script type="math/tex; mode=display">|r_1-r_2| +|c_1-c_2|</script><p><strong>Goal: 치킨집 중에서 최대 M개를 골랐을 때 도시의 치킨 거리 최솟값</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>치킨 집을 M개 고르는 모든 조합 구하기</li></ul><p>해당 집을 고르면 배열에 넣고 아니면 넣지 않음<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (select_idx == m) &#123;</span><br><span class="line">BFS 이용하여 치킨 거리 구하기</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>); <span class="comment">// 선택하지 않기</span></span><br><span class="line">select[select_idx++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>); <span class="comment">// 선택하기</span></span><br><span class="line">select_idx--; <span class="comment">// 다른 경우의 수를 위해 인덱스 빼주기 (중요)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>중요</strong>라고 되어있는 부분을 작성하지 않으면 모든 경우의 수를 구할 수 없다. 경우의 수가 꼬여버림. </p><p>4개 중에 2개를 고른다고 하면<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">comb(<span class="number">0</span>)</span><br><span class="line">comb(<span class="number">1</span>)</span><br><span class="line">comb(<span class="number">2</span>)</span><br><span class="line">comb(<span class="number">3</span>)</span><br><span class="line">...</span><br><span class="line">이런식으로 호출이 이루어지기에 (<span class="number">3</span>, <span class="number">2</span>) 경우가 먼저 완성된다.</span><br><span class="line">완성되고 BFS이용하여 치킨 거리 구하고 <span class="keyword">return</span>되면 select_idx를 빼준다.</span><br><span class="line">그럼 <span class="number">2</span>자리에 다른 경우가 넣어질 수 있다. (<span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><ul><li>각 조합에 대한 최소한의 치킨 거리 구하기</li></ul><p>BFS를 이용하여 한 칸씩 갈 때 1초 증가</p><p>그러다 1을 만나면 해당 초를 더 해준다.<br>BFS를 이용하면 동시에 1을 만나기에 time만 더해주어서는 안된다.<br>동시에 발견한 집의 수만큼 time을 더해주어야 한다.</p><p>모든 1을 만났으면 종료<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; select_idx; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); </span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>이 중 가장 최소인 치킨 거리 구하기</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3></li><li><p>컴파일 에러 (index라는 변수명은 기피하자…) <strong>select_idx</strong>로 변경</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, total_chicken, total_house, index, answer;</span><br><span class="line"><span class="keyword">int</span> city[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> select[<span class="number">13</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line">&#125;chicken[<span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); <span class="comment">// 선택한 치킨집 queue에 저장</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; <span class="comment">// M개를 선택하는 모든 경우의 수 구하기</span></span><br><span class="line"><span class="keyword">if</span> (index == m) &#123;</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select[index++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;city[i][j]);</span><br><span class="line"><span class="keyword">if</span> (city[i][j] == <span class="number">2</span>) &#123; <span class="comment">// 치킨집 정보 저장</span></span><br><span class="line">chicken[total_chicken].r = i;</span><br><span class="line">chicken[total_chicken++].c = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (city[i][j] == <span class="number">1</span>) total_house++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">answer = <span class="number">1e9</span>;</span><br><span class="line">combination(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, total_chicken, total_house, select_idx, answer;</span><br><span class="line"><span class="keyword">int</span> city[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> select[<span class="number">13</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line">&#125;chicken[<span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">-1</span> &amp;&amp; c &gt; <span class="number">-1</span> &amp;&amp; r &lt; n &amp;&amp; c &lt; n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>, house = <span class="number">0</span>, dist = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; select_idx; ++i) &#123;</span><br><span class="line">q.push(&#123; chicken[select[i]].r, chicken[select[i]].c &#125;); <span class="comment">// 선택한 치킨집 queue에 저장</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = q.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> r = q.front().first;</span><br><span class="line"><span class="keyword">int</span> c = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line">check[r][c] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = r + dx[i];</span><br><span class="line"><span class="keyword">int</span> y = c + dy[i];</span><br><span class="line"><span class="keyword">if</span> (isBound(x, y) &amp;&amp; !check[x][y]) &#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (city[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">house++; cnt++;</span><br><span class="line">&#125;</span><br><span class="line">q.push(&#123; x, y &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist += time * cnt; <span class="comment">// 해당 초에 만난 집의 수 만큼 이동거리 더해주기</span></span><br><span class="line"><span class="keyword">if</span> (total_house == house) &#123;</span><br><span class="line">answer = answer &gt; dist ? dist : answer;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123; <span class="comment">// M개를 선택하는 모든 경우의 수 구하기</span></span><br><span class="line"><span class="keyword">if</span> (select_idx == m) &#123;</span><br><span class="line">bfs();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == total_chicken) <span class="keyword">return</span>;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select[select_idx++] = idx;</span><br><span class="line">combination(idx + <span class="number">1</span>);</span><br><span class="line">select_idx--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;city[i][j]);</span><br><span class="line"><span class="keyword">if</span> (city[i][j] == <span class="number">2</span>) &#123; <span class="comment">// 치킨집 정보 저장</span></span><br><span class="line">chicken[total_chicken].r = i;</span><br><span class="line">chicken[total_chicken++].c = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (city[i][j] == <span class="number">1</span>) total_house++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">answer = <span class="number">1e9</span>;</span><br><span class="line">combination(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15686/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15685번 드래곤 커브</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15685-드래곤-커브&quot;&gt;&lt;a href=&quot;#15685-드래곤-커브&quot; class=&quot;headerlink&quot; title=&quot;#15685. 드래곤 커브&quot;&gt;&lt;/a&gt;#15685. 드래곤 커브&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmic
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15685-드래곤-커브"><a href="#15685-드래곤-커브" class="headerlink" title="#15685. 드래곤 커브"></a>#15685. 드래곤 커브</h1><p><a href="https://www.acmicpc.net/problem/15685" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>좌표 평면</li><li>3가지 속성</li></ul><ol><li>시작 점</li><li>시작 방향<br>0:  x 좌표 증가 → 방향<br>1:  y 좌표 감소  ↑ 방향<br>2:  x 좌표 감소 ← 방향<br>3:  y 좌표 증가  ↓ 방향</li><li>세대</li></ol><ul><li>0세대: 길이가 1인 선분</li><li>1세대: 0세대 드래곤 커브 <strong>끝 점을 기준으로</strong> 시계 방향 90도 회전시켜 0세대 끝 점에 붙인 것</li><li>2세대: 1세대를 이용하여 1세대를 만든 것처럼 만든다.</li><li>N세대: N-1세대 커브를 끝 점 기준으로 90도 시계 방향 회전시킨 것을 붙인 것</li><li><p>입력</p><p>  드래곤 커브 개수 N (~20)<br>  x, y (드래곤 커브 시작 점) ~100<br>  d (시작 방향)<br>  g (세대) ~10</p></li></ul><p>드래곤 커브는 서로 겹칠 수 있다.</p><p><strong>Goal: 만들어진 드래곤 커브에서 정사각형 4개의 꼭짓점이 모두 드래곤 커브의 일부인 것의 개수를 구하기 (모양이 정사각형이 아니어도 4개의 꼭짓점만 만족하면 된다.)</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>끝점을 기준으로 시계방향 90도를 했을 때 각 방향의 이동은 다음과 같다.</li></ul><ol><li>0 → 1</li><li>1 → 2</li><li>2 → 3</li><li>3 → 0</li></ol><p>아래 그림 참고.</p><p><img src="https://user-images.githubusercontent.com/46062199/73121639-950a3900-3fbf-11ea-871d-edcf306df4a5.png" alt></p><ul><li>드래곤 커브를 그려주는 건 check 배열로 수행한다.<br>(겹쳐도 되니까 초기화할 필요 없다.)</li><li>방향만 배열에 저장해주면 된다.</li><li><p>끝점에서 이동을 수행하니 위치 좌표는 끝점만 알면된다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// input : 3 3 0 1</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>) : 처음 시작 위치</span><br><span class="line">(<span class="number">4</span>, <span class="number">3</span>) : <span class="number">0</span>세대 <span class="comment">// 위치 좌표: (4, 3) 방향 0</span></span><br><span class="line">(<span class="number">4</span>, <span class="number">2</span>) : <span class="number">1</span>세대 <span class="comment">// 위치 좌표: (4, 2) 방향 0, 1</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>) : <span class="number">2</span>세대 <span class="comment">// 위치 좌표: (3, 2) -&gt; (3,1) 방향 0, 1, 2, 1</span></span><br></pre></td></tr></table></figure><p>2세대 설명: 1세대에서 방향이 [0, 1]로 저장되어 있다. 끝점부터 시작하기에 방향 1이 시계방향으로 90도 회전하면 방향 2가 된다. [0, 1, 2]<br>이후 0이 시계방향으로 90도 회전하면 방향 1이된다. [0, 1, 2, 1]</p></li><li><p>드래곤 커브 위의 규칙대로 그리기</p></li></ul><p>0세대 까지 그려놓고 (0세대가 아니라면) 1세대부터 그린다.</p><p>direction 배열에 위의 [0, 1, 2, 1]과 같은 값이 들어간다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> clockwise[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line"><span class="keyword">while</span>(g--) &#123;</span><br><span class="line"><span class="keyword">int</span> len = idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">d = clockwise[direction[i]];</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; MAX &amp;&amp; y &lt; MAX) &#123;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>4개의 꼭짓점 확인</li></ul><p>배열은 최대 100 x 100의 크기를 가지기에 0~99까지 check 값이 존재할 수 있다. (사실상 98까지만 확인하면 된다.)</p><pre><code>1 1   (0, 0)을 기준으로 오른쪽, 아래, 오른쪽 아래 대각선만 확인하면 된다.1 1</code></pre><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> clockwise[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> direction[MAX*MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line"><span class="keyword">while</span>(g--) &#123;</span><br><span class="line"><span class="keyword">int</span> len = idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">d = clockwise[direction[i]];</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; MAX &amp;&amp; y &lt; MAX) &#123;</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">direction[idx++] = d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, x, y, d, g, answer = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x, &amp;y, &amp;d, &amp;g);</span><br><span class="line">check[y][x] = <span class="literal">true</span>;</span><br><span class="line">x += dx[d];</span><br><span class="line">y += dy[d];</span><br><span class="line">draw(x, y, d, g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">99</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">99</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i + <span class="number">1</span>][j] &amp;&amp; check[i][j + <span class="number">1</span>] &amp;&amp; check[i + <span class="number">1</span>][j + <span class="number">1</span>]) answer++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15685/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15684번 사다리 조작</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15684-사다리-조작&quot;&gt;&lt;a href=&quot;#15684-사다리-조작&quot; class=&quot;headerlink&quot; title=&quot;#15684. 사다리 조작&quot;&gt;&lt;/a&gt;#15684. 사다리 조작&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15684-사다리-조작"><a href="#15684-사다리-조작" class="headerlink" title="#15684. 사다리 조작"></a>#15684. 사다리 조작</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="http://acmicpc.net/problem/15684" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>처음에 감이 안잡혀서 어떻게 풀지 막막했었다.</li><li>입력값을 보고 사다리 정보를 어떤 식으로 저장할건지가 첫 스타트이자 포인트다.<br>이렇게 data가 보여야 조합도 어떤식으로 구성할지 생각나기 때문이다.</li><li>작업은 2개로 나뉜다.<ol><li>조합 구하기</li><li>사다리 타기</li></ol></li><li>조합 구하기</li></ul><p>조합을 구하기 전에 입력값이 어떻게 들어오나 확인해보자.</p><p>a b가 입력되면 a행에 b열 사다리와 b+1열 사다리가 연결된다.<br>이를 array[a][b] = 1(사다리 있음)으로 표시하면 b+1로 갈 수 있다는 뜻이다.<br>반대로 b+1지점에서 array[a][b]값이 1인걸 확인하면 b로 갈 수 있다는 뜻이다.</p><p>이를 활용하여 조합을 구해보자.</p><p>모든 행의 1열부터 N-1열까지 탐색해야 한다.<br>단, 현재 위치뿐만 아니라 자신의 왼쪽, 오른쪽도 확인해야 한다. (연속으로 설치하지 못하기 때문)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>행 <span class="number">1</span>열 선택 시 다음 가능한 경우 (N에 표시하는 것은 의미 X - 입력값 생각)</span><br><span class="line"> <span class="number">1</span>행 - <span class="number">1</span>(x), <span class="number">2</span>(x), <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"> <span class="number">2</span>행 - <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"> ...</span><br><span class="line"> H행 - <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ... N<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123; </span><br><span class="line"><span class="keyword">if</span> (visit[i][j]) <span class="keyword">continue</span>; <span class="comment">// 현재 확인</span></span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; visit[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 왼쪽 확인</span></span><br><span class="line"><span class="keyword">if</span> (visit[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 오른쪽 확인</span></span><br><span class="line">visit[i][j] = <span class="literal">true</span>; <span class="comment">// 선택 표시</span></span><br><span class="line">selectAll(i, cnt + <span class="number">1</span>); <span class="comment">// 다음 선택</span></span><br><span class="line">visit[i][j] = <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, H, ans;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">31</span>][<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ans = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; H;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;  <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">visit[a][b] = <span class="literal">true</span>; <span class="comment">// a행 b - b+1 사다리</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> current_num = j;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (visit[i][current_num]) &#123; <span class="comment">// 오른쪽 사다리로 이동</span></span><br><span class="line">current_num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num &gt; <span class="number">1</span> &amp;&amp; visit[i][current_num <span class="number">-1</span>]) &#123; <span class="comment">// 왼쪽 사다리로 이동</span></span><br><span class="line">current_num--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current_num != j) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectAll</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Check()) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; cnt) ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= H; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) &#123; <span class="comment">// 5번 사다리는 확인할 필요 없다. (입력값 생각)</span></span><br><span class="line"><span class="keyword">if</span> (visit[i][j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; visit[i][j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visit[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">visit[i][j] = <span class="literal">true</span>;</span><br><span class="line">selectAll(i, cnt + <span class="number">1</span>);</span><br><span class="line">visit[i][j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">selectAll(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">4</span>) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15684/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 15683번 감시</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;15683-감시&quot;&gt;&lt;a href=&quot;#15683-감시&quot; class=&quot;headerlink&quot; title=&quot;#15683. 감시&quot;&gt;&lt;/a&gt;#15683. 감시&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;he
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="15683-감시"><a href="#15683-감시" class="headerlink" title="#15683. 감시"></a>#15683. 감시</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/15683" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>설치된 CCTV 위치정보, 번호 얻기</li><li>설치된 CCTV 방향 정하기 (상하좌우: 0123)<br>1번 cctv: 0, 1, 2, 3<br>2번 cctv: (0, 1), (2, 3)<br>3번 cctv: (0, 3), (1, 3), (0, 2), (1, 2)<br>4번 cctv: (2, 0, 3), (0, 3, 1), (2, 1, 3), (0, 2, 1)<br>5번 cctv: (0, 1, 2, 3)<br>묶음을 왼쪽에서부터 0, 1, 2, 3이라고 정하고 (여기서 5번은 0만 갖게된다.)<br><code>selected</code> 배열에 넣어준다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectDirection</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">task(); <span class="comment">// 방향대로 감시 시작</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> type = cctv[idx].type;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">2</span>) &#123; <span class="comment">// 2번 cctv는 최대 1 값만 가능</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">5</span>) &#123; <span class="comment">// 5번 cctv는 최대 0만 가능</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">selected[idx] = i;</span><br><span class="line">selectDirection(idx + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[idx] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>선택된 방향대로 감시 시작</li></ol></li></ol><ul><li>범위를 벗어나거나 벽을 만나면 감시를 중단한다. 그전까지는 정해진 방향대로 계속 check 표시를 한다.</li><li>check는 check되어 있지 않고 맵의 값이 0인 경우에만 진행한다.<br>탐색된 곳의 개수를 구하기 위해서이다.</li><li><p>전체 칸의 개수 - 탐색된 곳의 개수 - 벽의 개수 - cctv 개수 = 사각지대 개수</p><ol><li>사각지대가 최소가 되도록 갱신한다.</li></ol></li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, wall_cnt, ans;</span><br><span class="line"><span class="keyword">int</span> room[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> selected[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> type_two[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> type_three[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> type_four[<span class="number">4</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, type;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;INFO&gt; cctv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) selected[i] = <span class="number">-1</span>;</span><br><span class="line">ans = <span class="number">1e9</span>; wall_cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">9</span>][<span class="number">9</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="keyword">int</span> type, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cctv.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> dir = selected[i];</span><br><span class="line"><span class="keyword">int</span> x = cctv[i].x, y = cctv[i].y;</span><br><span class="line"><span class="keyword">int</span> d_x, d_y;</span><br><span class="line"><span class="keyword">if</span> (cctv[i].type == <span class="number">1</span>) &#123;</span><br><span class="line">d_x = x + dx[dir];</span><br><span class="line">d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[dir];</span><br><span class="line">d_y += dy[dir];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_two[dir][j]];</span><br><span class="line">d_y = y + dy[type_two[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_two[dir][j]];</span><br><span class="line">d_y += dy[type_two[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_three[dir][j]];</span><br><span class="line">d_y = y + dy[type_three[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_three[dir][j]];</span><br><span class="line">d_y += dy[type_three[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[type_four[dir][j]];</span><br><span class="line">d_y = y + dy[type_four[dir][j]];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[type_four[dir][j]];</span><br><span class="line">d_y += dy[type_four[dir][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cctv[i].type == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">d_x = x + dx[j];</span><br><span class="line">d_y = y + dy[j];</span><br><span class="line"><span class="keyword">while</span> (isBound(d_x, d_y) &amp;&amp; room[d_x][d_y] != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[d_x][d_y] &amp;&amp; room[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">check[d_x][d_y] = <span class="literal">true</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">d_x += dx[j];</span><br><span class="line">d_y += dy[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res = (n * m) - res - wall_cnt - cctv.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (res &lt; ans) ans = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectDirection</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">task();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> type = cctv[idx].type;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">selected[idx] = i;</span><br><span class="line">selectDirection(idx + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[idx] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; room[i][j];</span><br><span class="line"><span class="keyword">if</span> (room[i][j] &gt;= <span class="number">1</span> &amp;&amp; room[i][j] &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">cctv.push_back(&#123; i, j, room[i][j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (room[i][j] == <span class="number">6</span>) wall_cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">selectDirection(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/15683/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14891번 톱니바퀴</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14891/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14891/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14891-톱니바퀴&quot;&gt;&lt;a href=&quot;#14891-톱니바퀴&quot; class=&quot;headerlink&quot; title=&quot;#14891. 톱니바퀴&quot;&gt;&lt;/a&gt;#14891. 톱니바퀴&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14891-톱니바퀴"><a href="#14891-톱니바퀴" class="headerlink" title="#14891. 톱니바퀴"></a>#14891. 톱니바퀴</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/14891" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>SWEA 모의 SW 역량 테스트 <code>[특이한 자석](https://www.notion.so/doyuni/4013-e51a7fc5e88b4e2b999dba66b24f358b#ffc1b4f8b7b140a2a1f2e12a9f953f5b)</code> 와 동일하다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> magnatic[<span class="number">4</span>][<span class="number">8</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; task;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">1</span>) &#123; <span class="comment">// 시계 방향</span></span><br><span class="line"><span class="keyword">int</span> first_ele = magnatic[n][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">6</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">magnatic[n][i + <span class="number">1</span>] = magnatic[n][i];</span><br><span class="line">&#125;</span><br><span class="line">magnatic[n][<span class="number">0</span>] = first_ele;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">-1</span>) &#123; <span class="comment">// 반시계 방향</span></span><br><span class="line"><span class="keyword">int</span> last_ele = magnatic[n][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">magnatic[n][i - <span class="number">1</span>] = magnatic[n][i];</span><br><span class="line">&#125;</span><br><span class="line">magnatic[n][<span class="number">7</span>] = last_ele;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkRotate</span><span class="params">(<span class="keyword">int</span> current_num, <span class="keyword">int</span> prior_num, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count_dir = dir &gt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">task.insert(&#123; current_num, dir &#125;);</span><br><span class="line"><span class="keyword">if</span> (current_num == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num][<span class="number">2</span>] != magnatic[current_num + <span class="number">1</span>][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num + <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num - <span class="number">1</span>][<span class="number">2</span>] != magnatic[current_num][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num - <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num][<span class="number">2</span>] != magnatic[current_num + <span class="number">1</span>][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num + <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num - <span class="number">1</span>][<span class="number">2</span>] != magnatic[current_num][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num - <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num][<span class="number">2</span>] != magnatic[current_num + <span class="number">1</span>][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num + <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current_num == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (prior_num != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[current_num - <span class="number">1</span>][<span class="number">2</span>] != magnatic[current_num][<span class="number">6</span>]) &#123;</span><br><span class="line">checkRotate(current_num - <span class="number">1</span>, current_num, count_dir);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, score = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; ++n) &#123;</span><br><span class="line"><span class="keyword">if</span> (magnatic[n][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">ans += score;</span><br><span class="line">&#125;</span><br><span class="line">score *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%1d"</span>, &amp;magnatic[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> number, dir; <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;number, &amp;dir);</span><br><span class="line">checkRotate(number - <span class="number">1</span>, <span class="number">-1</span>, dir);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : task) &#123;</span><br><span class="line">rotate(e.first, e.second);</span><br><span class="line">&#125;</span><br><span class="line">task.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, getScore());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14891/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14890번 경사로</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14890/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14890/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14890-경사로&quot;&gt;&lt;a href=&quot;#14890-경사로&quot; class=&quot;headerlink&quot; title=&quot;#14890. 경사로&quot;&gt;&lt;/a&gt;#14890. 경사로&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14890-경사로"><a href="#14890-경사로" class="headerlink" title="#14890. 경사로"></a>#14890. 경사로</h1><p><a href="https://www.acmicpc.net/problem/14890" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 지도, 각 칸의 높이가 적힘</li><li>길은 한 행 또는 한 열 → 길에 속한 모든 칸의 높이가 모두 같아야 지나갈 수 있음</li><li>또는 경사로를 놓아서 지나갈 수 있는 길을 만들 수 있음( 경사로 높이 1, 길이 L), 경사로 개수는 매우 많음</li></ul><p>경사로 놓을 수 있는 경우</p><ul><li>낮은 칸과 높은 칸의 차이가 1인 경우</li><li>L개의 칸이 같은 높이로 연속되게 있어야 한다.</li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>한 행</p><ol><li>맨 왼쪽에서부터 오른쪽으로 탐색한다. (첫 번째 원소부터 마지막 원소 바로 이전까지)</li><li>현재 탐색한 원소와 바로 다음 원소와의 차이를 구한다.</li><li>+1인 경우<br>다음 원소부터 경사로 길이만큼 <strong>오른쪽으로</strong> 탐색을 시작한다.<br>탐색하면서 다음 경우를 확인한다.<br>범위를 벗어날 경우(n이상) or 경사로 길이만큼 같은 높이가 아닐 때 종료<br>그게 아니면 경사로를 놓는다.</li><li>-1인 경우<br>현재 원소부터 경사로 길이만큼 <strong>왼쪽으로</strong> 탐색을 시작한다.<br>탐색하면서 다음 경우를 확인한다.<br>범위를 벗어날 경우(0미만) or 경사로 길이만큼 같은 높이가 아닐 때 or <strong>경사로가 놓여있을 때</strong> 종료<br>그게 아니면 경사로를 놓는다.</li><li>차이가 1 초과 -1 미만인 경우 종료</li><li>그게 아니라면 성공</li></ol><p>왼쪽에서 오른쪽으로 탐색하기에 </p><p>한 열 또한 위와 마찬가지로 구현한다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><ul><li>하…<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, len, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkRow</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = j + <span class="number">1</span>; start &lt;= j + len; ++start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 범위를 벗어나는 경우</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j + <span class="number">1</span>] != <span class="built_in">map</span>[row][start]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 칸의 높이가 같지 않을 때</span></span><br><span class="line">check[row][start] = <span class="literal">true</span>; <span class="comment">// 경사로 놓기</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = j; start &gt; j - len; --start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 범위를 벗어나는 경우</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j] != <span class="built_in">map</span>[row][start]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (check[row][start]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[row][start] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] &gt; <span class="number">1</span> || <span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] &lt; <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkCol</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = i + <span class="number">1</span>; start &lt;= i + len; ++start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i + <span class="number">1</span>][col] != <span class="built_in">map</span>[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[start][col] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = i; start &gt; i - len; --start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col] != <span class="built_in">map</span>[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (check[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[start][col] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] &gt; <span class="number">1</span> || <span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] &lt; <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; n; ++row) &#123;</span><br><span class="line"><span class="keyword">if</span>(checkRow(row)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line"><span class="keyword">if</span> (checkCol(col)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>checkCol</code> 함수에 return true 즉 반환값을 넣어주지 않았기에 틀렸다고 나왔다. bool 함수는 반드시 true와 false 둘 다 반환해주자.</li></ul><p>이걸 몰라서 계속 문제만 주구장창 봤음…ㅠ</p><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, len, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkRow</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = j + <span class="number">1</span>; start &lt;= j + len; ++start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 범위를 벗어나는 경우</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j + <span class="number">1</span>] != <span class="built_in">map</span>[row][start]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 칸의 높이가 같지 않을 때</span></span><br><span class="line">check[row][start] = <span class="literal">true</span>; <span class="comment">// 경사로 놓기</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = j; start &gt; j - len; --start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[row][j] != <span class="built_in">map</span>[row][start]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (check[row][start]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 경사로가 이미 놓여진 경우</span></span><br><span class="line">check[row][start] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] &gt; <span class="number">1</span> || <span class="built_in">map</span>[row][j] - <span class="built_in">map</span>[row][j + <span class="number">1</span>] &lt; <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkCol</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = i + <span class="number">1</span>; start &lt;= i + len; ++start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i + <span class="number">1</span>][col] != <span class="built_in">map</span>[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[start][col] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = i; start &gt; i - len; --start) &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][col] != <span class="built_in">map</span>[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (check[start][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">check[start][col] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] &gt; <span class="number">1</span> || <span class="built_in">map</span>[i][col] - <span class="built_in">map</span>[i + <span class="number">1</span>][col] &lt; <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; n; ++row) &#123;</span><br><span class="line"><span class="keyword">if</span> (checkRow(row)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; ++col) &#123;</span><br><span class="line"><span class="keyword">if</span> (checkCol(col)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14890/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14889번 스타트와 링크</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14889/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14889/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14889-스타트와-링크&quot;&gt;&lt;a href=&quot;#14889-스타트와-링크&quot; class=&quot;headerlink&quot; title=&quot;#14889. 스타트와 링크&quot;&gt;&lt;/a&gt;#14889. 스타트와 링크&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14889-스타트와-링크"><a href="#14889-스타트와-링크" class="headerlink" title="#14889. 스타트와 링크"></a>#14889. 스타트와 링크</h1><p><a href="https://www.acmicpc.net/problem/14889" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>총 N명 중 N/2명으로 두 팀을 만든다. (N은 짝수)</li><li>Sij + Sji = 능력치 ( i번과 j번 사람이 같은 팀에 속했을 때)</li></ul><p><strong>Goal: 두 팀의 능력치의 차이의 최솟값</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>먼저 두 팀을 나눠야 한다.<br>1~N 중에 N/2를 골라 만들어야 하는데 중복X + 오름차순이어야 한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectTeam</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == n / <span class="number">2</span>) &#123; <span class="comment">// 성공 조건</span></span><br><span class="line"><span class="comment">// 능력치 계산</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx &gt; n) <span class="keyword">return</span>; <span class="comment">// 실패 조건</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] == <span class="number">0</span>) &#123;</span><br><span class="line">selected[i] = i;</span><br><span class="line">selectTeam(i+<span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>1~20개의 번호를 담을 수 있는 selected 배열을 만든다.</li><li>선택 되면 선택된 번호의 값을 갖는다. 선택되지 않으면 0값을 갖는다.</li><li>중복 안되고, 오름차 순이기에 for문의 시작 조건을 위와 같이 한다.</li><li><p>N/2 만큼 선택하면 능력치를 계산한다.</p><ol><li><p>능력치 계산</p><p>링크팀: 0, 3, 5<br>-&gt; 능력치<br>(0, 3) (0, 5)<br>(3, 0) (3, 5)<br>(5, 0) (5, 3)</p></li></ol></li></ul><p>그렇기에 선택된 숫자를 기준으로 나머지 선택된 숫자 하나만 고르면 된다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i는 앞에 선택된 숫자 (i, j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[j] == <span class="number">0</span> &amp;&amp; i != j) &#123;</span><br><span class="line">team_start += ability[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"><span class="keyword">int</span> ability[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> selected[<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getDifference</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> team_start = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> team_link = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] == <span class="number">0</span>) &#123; <span class="comment">// 선택되지 않은 넘버가 다른 팀</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[j] == <span class="number">0</span> &amp;&amp; i != j) &#123;</span><br><span class="line">team_start += ability[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[j] != <span class="number">0</span> &amp;&amp; i != j) &#123;</span><br><span class="line">team_link += ability[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> diff = <span class="built_in">abs</span>(team_start - team_link);</span><br><span class="line"><span class="keyword">if</span> (ans &gt; diff) ans = diff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectTeam</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == n / <span class="number">2</span>) &#123;</span><br><span class="line">getDifference();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx &gt; n) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (selected[i] == <span class="number">0</span>) &#123;</span><br><span class="line">selected[i] = i;</span><br><span class="line">selectTeam(i+<span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">selected[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ability[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">1e9</span>;</span><br><span class="line">selectTeam(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14889/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14503번 로봇 청소기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14503/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14503/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14503-로봇-청소기&quot;&gt;&lt;a href=&quot;#14503-로봇-청소기&quot; class=&quot;headerlink&quot; title=&quot;#14503. 로봇 청소기&quot;&gt;&lt;/a&gt;#14503. 로봇 청소기&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmic
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14503-로봇-청소기"><a href="#14503-로봇-청소기" class="headerlink" title="#14503. 로봇 청소기"></a>#14503. 로봇 청소기</h1><p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x M 크기, 벽 또는 빈칸, 모든 외곽은 벽</li><li>청소기는 바라보는 방향이 있음(상하좌우)</li><li>작동</li></ul><ol><li>현재 위치 청소</li><li>현재 방향을 기준으로 왼쪽부터 탐색<br>왼쪽에 청소하지 않은 공간이 있으면 그 방향으로 회전, 1칸 전진, 1번 진행<br>없다면, 그 방향으로 회전 2번 진행<br>상하좌우 모두 청소 되어 있거나 벽이라면, 방향 유지한 채 한 칸 후진 후 2번 진행 ( 현재 위치에서 4방향 다 청소나 벽일 때 현재 방향 유지한 채 후진)<br>바로 위의 경우에서 뒤쪽이 벽이라 후진도 못 하는 경우 <strong>작동 종료</strong></li></ol><p><strong>Goal: 로봇 청소기가 청소하는 칸의 개수 출력</strong></p><p>방향: 0 → 위, 1 → 우, 2 → 아래, 3 → 왼</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>시뮬레이션 문제이다. 각 순서에 맞게 잘 구현하면 된다.</p><ol><li>현재 탐색 지점의 값이 0이라면 청소하는 칸의 개수 1 증가 후 2로 표시</li><li>최대 5번 방향을 바꾸게 된다. (자신으로 돌아오는 것까지 포함)</li></ol><ul><li>0(위쪽) → 3(왼쪽)</li><li>1(오른쪽) → 0(위쪽)</li><li>2(아래쪽) → 1(오른쪽)</li><li>3(왼쪽) → 2(아래쪽)</li></ul><p>위는 현재 방향에 따른 왼쪽 방향(다음 탐색 방향)이다.</p><p>현재 방향을 토대로 다음 방향을 결정하고 다음 방향에 맞는 좌표를 구한다.</p><ul><li>탐색 가능하면(값이 0이면) 현재 방향을 이 방향으로 바꾸고 좌표를 바꾸고 반복문 종료</li><li>탐색 불가능하면 현재 방향만 이 방향으로 바꾼다.</li><li>처음 방향과 같게 나오면(5번째일 경우) 후진이 가능한지 조사한다.<br>가능하면 좌표만 바꿔주고 아니면 시뮬레이션을 종료한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> next_dir = left_dir[current_dir];</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> back_x = x + dx[back_dir[dir]];</span><br><span class="line"><span class="keyword">int</span> back_y = y + dy[back_dir[dir]];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[back_x][back_y] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x = back_x; y = back_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[next_dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[next_dir];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">dir = next_dir;</span><br><span class="line">x = d_x; y = d_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">current_dir = next_dir;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> left_dir[<span class="number">4</span>] = &#123; <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> back_dir[<span class="number">4</span>] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanMap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[x][y] == <span class="number">0</span>) ans++;</span><br><span class="line"><span class="built_in">map</span>[x][y] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> current_dir = dir;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> next_dir = left_dir[current_dir];</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> back_x = x + dx[back_dir[dir]];</span><br><span class="line"><span class="keyword">int</span> back_y = y + dy[back_dir[dir]];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[back_x][back_y] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x = back_x; y = back_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[next_dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[next_dir];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">dir = next_dir;</span><br><span class="line">x = d_x; y = d_y;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">current_dir = next_dir;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> start_x, start_y, dir;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; start_x &gt;&gt; start_y &gt;&gt; dir;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cleanMap(start_x, start_y, dir);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14503/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14502번 연구소</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14502/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14502/</guid>
      <pubDate>Sat, 25 Jan 2020 08:03:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14502-연구소&quot;&gt;&lt;a href=&quot;#14502-연구소&quot; class=&quot;headerlink&quot; title=&quot;#14502. 연구소&quot;&gt;&lt;/a&gt;#14502. 연구소&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/probl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14502-연구소"><a href="#14502-연구소" class="headerlink" title="#14502. 연구소"></a>#14502. 연구소</h1><p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x M 크기, 빈 칸(0), 벽(1), 바이러스(2) 존재</li><li>바이러스는 상하좌우 빈칸으로만 움직임</li><li>벽을 꼭 3개 세워야 한다.</li></ul><p><strong>Goal: 벽을 3개 세운 뒤, 얻을 수 있는 안전 영역 크기의 최댓값<br>안전 영역은 벽 3개 세운 뒤 0의 개수</strong></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li><p>벽을 3개 세우는 경우의 수를 모두 구한다. (브루트 포스 - 재귀)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildWall</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) &#123;</span><br><span class="line">spreadVirus();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == zero_point.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">buildWall(idx + <span class="number">1</span>, cnt);</span><br><span class="line">wall[cnt].x = zero_point[idx].first;</span><br><span class="line">wall[cnt].y = zero_point[idx].second;</span><br><span class="line">buildWall(idx + <span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0인 지점을 저장해놓은 벡터에서 3개를 선택하도록 한다.</p><ol><li>원래의 map은 보존해야 하므로 새로운 배열에 복사를 해놓고 위에서 구한 경우의 수에 맞게 벽을 세운다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copyMap(); <span class="comment">// 새로운 배열(tmp)에 복사</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">tmp[wall[i].x][wall[i].y] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>벽을 세운 새로운 map에서 바이러스가 퍼지도록 한다. (BFS) <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spreadVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 2번째 작업</span></span><br><span class="line"><span class="comment">// 아래부터 3번째 작업</span></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_virus; ++i) &#123;</span><br><span class="line">q.push(&#123; virus[i].x, virus[i].y &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minus_safe_area = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; tmp[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">tmp[d_x][d_y] = <span class="number">2</span>;</span><br><span class="line">minus_safe_area++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; safe_area - minus_safe_area) ans = safe_area - minus_safe_area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>BFS 탐색이 끝나면 queue가 비워지게 되므로, 다음 탐색을 위해 바이러스 위치를 저장해놓을 배열이 필요하다는 것에 주의한다.</li></ol></li></ol><p><strong>안전영역 크기 = 원래 map의 0의 개수 - 벽 3개 - 모두 퍼진 바이러스 수</strong></p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans, safe_area, total_virus;</span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; zero_point;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;wall[<span class="number">3</span>], virus[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">tmp[i][j] = <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spreadVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">copyMap();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">tmp[wall[i].x][wall[i].y] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total_virus; ++i) &#123;</span><br><span class="line">q.push(&#123; virus[i].x, virus[i].y &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minus_safe_area = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line"><span class="keyword">int</span> d_x = x + dx[dir];</span><br><span class="line"><span class="keyword">int</span> d_y = y + dy[dir];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y) &amp;&amp; tmp[d_x][d_y] == <span class="number">0</span>) &#123;</span><br><span class="line">q.push(&#123; d_x, d_y &#125;);</span><br><span class="line">tmp[d_x][d_y] = <span class="number">2</span>;</span><br><span class="line">minus_safe_area++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; safe_area - minus_safe_area) ans = safe_area - minus_safe_area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildWall</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">3</span>) &#123;</span><br><span class="line">spreadVirus();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx == zero_point.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">buildWall(idx + <span class="number">1</span>, cnt);</span><br><span class="line">wall[cnt].x = zero_point[idx].first;</span><br><span class="line">wall[cnt].y = zero_point[idx].second;</span><br><span class="line">buildWall(idx + <span class="number">1</span>, cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">map</span>.resize(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i].resize(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>) zero_point.push_back(&#123; i, j &#125;);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">virus[total_virus].x = i;</span><br><span class="line">virus[total_virus++].y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">safe_area = zero_point.<span class="built_in">size</span>();</span><br><span class="line">buildWall(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14502/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14499번 주사위 굴리기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14499/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14499/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14499-주사위-굴리기&quot;&gt;&lt;a href=&quot;#14499-주사위-굴리기&quot; class=&quot;headerlink&quot; title=&quot;#14499. 주사위 굴리기&quot;&gt;&lt;/a&gt;#14499. 주사위 굴리기&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14499-주사위-굴리기"><a href="#14499-주사위-굴리기" class="headerlink" title="#14499. 주사위 굴리기"></a>#14499. 주사위 굴리기</h1><p><a href="https://www.acmicpc.net/problem/14499" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x M 지도 위에 주사위 하나</li><li>오른쪽(동), 위쪽(북)</li><li>주사위 위치는 (x, y) 모든 면에 0 적혀 있음</li><li>지도에는 정수가 쓰여있고<br>주사위가 이동한 칸에 쓰여 있는 수가 0이면 주사위 바닥면 수가 지도로 복사<br>0이 아니면 지도위에 쓰여 있는 수가 주사위 바닥면으로 복사, 지도에 쓰여 있는 수는 0이 된다.</li></ul><p><strong>Goal: 주사위가 이동했을 때마다 주사위의 윗 면에 쓰여 있는 수를 출력<br>범위를 벗어나는 명령이면 움직이지 않고 출력도 하지 않는다.</strong></p><p>1: 오른쪽, 2: 왼쪽, 3: 위쪽, 4: 아래쪽으로 이동한다.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>주사위 6면의 정보를 가지고 있어야 한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> up = <span class="number">0</span>, down = <span class="number">0</span>, front = <span class="number">0</span>, back = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;dice;</span><br><span class="line"><span class="comment">// 윗면, 아랫면, 앞면, 뒷면, 왼면, 오른면</span></span><br></pre></td></tr></table></figure></li><li>주사위를 움직일 때 6면의 정보가 방향에 맞게 업데이트 되어야 한다.</li></ul><p>먼저 범위를 검사하고 검사한 후에 주사위 위치를 변경해준다.</p><ol><li>오른쪽 이동<br>위 → 오른 → 아래 → 왼 → 위</li><li>왼쪽 이동<br>위 → 왼 → 아래  → 오른 → 위</li><li>위쪽 이동<br>위 → 뒤 → 아래 → 앞 → 위</li><li>아래쪽 이동<br>위 → 앞 → 아래 → 뒤 → 위</li></ol><p>값을 제대로 업데이트 하기 위해서 사이클이 시작되기 전 값을 저장해놓고 순서대로 덮어씌우는 방식으로 값을 갱신한다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveDice</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d_x = dice.x + dx[dir - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> d_y = dice.y + dy[dir - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y)) &#123;</span><br><span class="line">dice.x = d_x; dice.y = d_y;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">1</span>) &#123; <span class="comment">// right</span></span><br><span class="line">tmp = dice.left;</span><br><span class="line">dice.left = dice.down;</span><br><span class="line">dice.down = dice.right;</span><br><span class="line">dice.right = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123; <span class="comment">// left</span></span><br><span class="line">tmp = dice.right;</span><br><span class="line">dice.right = dice.down;</span><br><span class="line">dice.down = dice.left;</span><br><span class="line">dice.left = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123; <span class="comment">// up</span></span><br><span class="line">tmp = dice.front;</span><br><span class="line">dice.front = dice.down;</span><br><span class="line">dice.down = dice.back;</span><br><span class="line">dice.back = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">4</span>) &#123; <span class="comment">// down</span></span><br><span class="line">tmp = dice.back;</span><br><span class="line">dice.back = dice.down;</span><br><span class="line">dice.down = dice.front;</span><br><span class="line">dice.front = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>움직였을 때<ul><li>지도의 칸이 0이면, 주사위 바닥면 수 → 지도</li><li>지도의 칸이 0이 아니면, 지도 → 주사위 바닥면 수 &amp;  0 → 지도<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[dice.x][dice.y] == <span class="number">0</span>) <span class="built_in">map</span>[dice.x][dice.y] = dice.down;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dice.down = <span class="built_in">map</span>[dice.x][dice.y];</span><br><span class="line"><span class="built_in">map</span>[dice.x][dice.y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dice.up &lt;&lt; <span class="string">"\n"</span>; <span class="comment">// 윗면 출력</span></span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INFO</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> up = <span class="number">0</span>, down = <span class="number">0</span>, front = <span class="number">0</span>, back = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;dice;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">-1</span> &amp;&amp; y &gt; <span class="number">-1</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveDice</span><span class="params">(<span class="keyword">int</span> dir)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d_x = dice.x + dx[dir<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> d_y = dice.y + dy[dir<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span> (isBound(d_x, d_y)) &#123;</span><br><span class="line">dice.x = d_x; dice.y = d_y;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">1</span>) &#123; <span class="comment">// right</span></span><br><span class="line">tmp = dice.left;</span><br><span class="line">dice.left = dice.down;</span><br><span class="line">dice.down = dice.right;</span><br><span class="line">dice.right = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>) &#123; <span class="comment">// left</span></span><br><span class="line">tmp = dice.right;</span><br><span class="line">dice.right = dice.down;</span><br><span class="line">dice.down = dice.left;</span><br><span class="line">dice.left = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) &#123; <span class="comment">// up</span></span><br><span class="line">tmp = dice.front;</span><br><span class="line">dice.front = dice.down;</span><br><span class="line">dice.down = dice.back;</span><br><span class="line">dice.back = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">4</span>) &#123; <span class="comment">// down</span></span><br><span class="line">tmp = dice.back;</span><br><span class="line">dice.back = dice.down;</span><br><span class="line">dice.down = dice.front;</span><br><span class="line">dice.front = dice.up;</span><br><span class="line">dice.up = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[dice.x][dice.y] == <span class="number">0</span>) <span class="built_in">map</span>[dice.x][dice.y] = dice.down;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dice.down = <span class="built_in">map</span>[dice.x][dice.y];</span><br><span class="line"><span class="built_in">map</span>[dice.x][dice.y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dice.up &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> start_x, start_y, k, dir;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; start_x &gt;&gt; start_y &gt;&gt; k;</span><br><span class="line">dice.x = start_x; dice.y = start_y;</span><br><span class="line"><span class="built_in">map</span>.resize(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">map</span>[i].resize(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; dir;</span><br><span class="line">moveDice(dir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14499/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 14226번 이모티콘</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14226/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14226/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;14226-이모티콘&quot;&gt;&lt;a href=&quot;#14226-이모티콘&quot; class=&quot;headerlink&quot; title=&quot;#14226. 이모티콘&quot;&gt;&lt;/a&gt;#14226. 이모티콘&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; c
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="14226-이모티콘"><a href="#14226-이모티콘" class="headerlink" title="#14226. 이모티콘"></a>#14226. 이모티콘</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/14226" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>화면에 있는 이모티콘 모두 클립보드에 저장</li><li>클립보드에 있는 이모티콘 화면에 붙여넣기</li><li>화면에 있는 이모티콘 하나 삭제</li></ol><p>클립보드에 이모티콘이 하나라도 있어야 2번 작업 가능</p><p>화면에 이모티콘이 하나라도 있어야 3번 작업 가능</p><p>1번 작업은 언제나 수행 가능</p><p>2번 작업은 화면에 있는 이모티콘 + 클립보드 이모티콘이 목표(만들어야 할 이모티콘 수)이하여야 한다.</p><p>3번 작업은 화면에 있는 이모티콘 - 1이 0이상이어야 한다. (목표 이모티콘 최소 수가 2이기에 1이상이어도 상관 없다.)</p><p>각 작업은 1초로 동일한 시간이 걸리기에 BFS로 해결한다.</p><ul><li>queue에는 &lt;화면에 있는 이모티콘 수, 클립보드에 있는 이모티콘 수&gt;가 저</li><li>중복되지 않도록 dist라는 배열에 [화면][클립보드] 첨자를 이용해 시간을 저장한다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">q.push(&#123; <span class="number">1</span>, <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> s, c;</span><br><span class="line">tie(s, c) = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (dist[s][s] == <span class="number">0</span>) &#123; <span class="comment">// 화면에 있는 이모티콘 클립보드에 복사</span></span><br><span class="line">dist[s][s] = dist[s][c] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; s, s &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s+c &lt;= n &amp;&amp; dist[s+c][c] == <span class="number">0</span>) &#123; <span class="comment">// 클립보드 화면에 붙여넣기</span></span><br><span class="line">dist[s + c][c] = dist[s][c] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; s + c, c &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; dist[s - <span class="number">1</span>][c] == <span class="number">0</span>) &#123; <span class="comment">// 화면에 있는 이모티콘 -1</span></span><br><span class="line">dist[s - <span class="number">1</span>][c] = dist[s][c] + <span class="number">1</span>;</span><br><span class="line">q.push(&#123; s - <span class="number">1</span>, c &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123; <span class="comment">// 최솟값 찾기</span></span><br><span class="line"><span class="keyword">if</span> (ans &gt; dist[n][i] &amp;&amp; dist[n][i] != <span class="number">0</span>) ans = dist[n][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/14226/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 13913번 숨바꼭질 4</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13913/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13913/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;13913-숨바꼭질-4&quot;&gt;&lt;a href=&quot;#13913-숨바꼭질-4&quot; class=&quot;headerlink&quot; title=&quot;#13913. 숨바꼭질 4&quot;&gt;&lt;/a&gt;#13913. 숨바꼭질 4&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="13913-숨바꼭질-4"><a href="#13913-숨바꼭질-4" class="headerlink" title="#13913. 숨바꼭질 4"></a>#13913. 숨바꼭질 4</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/13913" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>BFS 탐색을 하되, 경로를 알고 있어야 하기에 <code>path[to] = from</code> 을 사용한다.</li><li>즉, 5→6→8→10 이라면 path[10]에는 8, path[8]에는 6이 저장되어 있다.</li><li><p>경로를 출력하기 위해 재귀함수를 사용한다.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">5</span>, <span class="number">10</span>) <span class="number">4.</span> 출력</span><br><span class="line">(<span class="number">5</span>, <span class="number">8</span>) <span class="number">3.</span> 출력</span><br><span class="line">(<span class="number">5</span>, <span class="number">6</span>)  <span class="number">2.</span> 출력</span><br><span class="line">(<span class="number">5</span>, <span class="number">5</span>) <span class="number">1.</span> 출력</span><br></pre></td></tr></table></figure><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3></li><li><p>code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="keyword">bool</span> end_flag;</span><br><span class="line"><span class="keyword">int</span> dist[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : path) <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(N);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> n = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (n == K) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; dist[n - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[n - <span class="number">1</span>] = dist[n] + <span class="number">1</span>;</span><br><span class="line">q.push(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt; MAX &amp;&amp; dist[n + <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[n + <span class="number">1</span>] = dist[n] + <span class="number">1</span>;</span><br><span class="line">q.push(n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * n &lt;= MAX &amp;&amp; dist[<span class="number">2</span> * n] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[<span class="number">2</span> * n] = dist[n] + <span class="number">1</span>;</span><br><span class="line">q.push(<span class="number">2</span> * n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (end_flag == <span class="literal">true</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (dist[K] == cnt &amp;&amp; n == K) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dist[K] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">PrintPath();</span><br><span class="line">end_flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dist[K] == cnt) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">path.push_back(n - <span class="number">1</span>);</span><br><span class="line">DFS(n - <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">path.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt; MAX) &#123;</span><br><span class="line">path.push_back(n +<span class="number">1</span>);</span><br><span class="line">DFS(n + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">path.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * n &lt;= MAX) &#123;</span><br><span class="line">path.push_back(<span class="number">2</span> * n);</span><br><span class="line">DFS(<span class="number">2</span> * n, cnt + <span class="number">1</span>);</span><br><span class="line">path.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BFS();</span><br><span class="line">path.push_back(N);</span><br><span class="line">DFS(N, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BFS + DFS로 구하니 시간초과 (BFS로 depth를 구하고 그 depth만큼 DFS를 수행하도록 하였다.)</p></li></ul><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="keyword">int</span> dist[MAX + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> path[MAX + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (from != to) &#123;</span><br><span class="line">PrintPath(from, path[to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; to &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(N);</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> n = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (n == K) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; dist[n - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[n - <span class="number">1</span>] = dist[n] + <span class="number">1</span>;</span><br><span class="line">path[n - <span class="number">1</span>] = n;</span><br><span class="line">q.push(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt; MAX &amp;&amp; dist[n + <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[n + <span class="number">1</span>] = dist[n] + <span class="number">1</span>;</span><br><span class="line">path[n + <span class="number">1</span>] = n;</span><br><span class="line">q.push(n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * n &lt;= MAX &amp;&amp; dist[<span class="number">2</span> * n] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[<span class="number">2</span> * n] = dist[n] + <span class="number">1</span>;</span><br><span class="line">path[<span class="number">2</span> * n] = n;</span><br><span class="line">q.push(<span class="number">2</span> * n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BFS();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dist[K] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">PrintPath(N, K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Input();</span><br><span class="line">Solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13913/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 13460번 구슬 탈출 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13460/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13460/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;13460-구슬-탈출-2&quot;&gt;&lt;a href=&quot;#13460-구슬-탈출-2&quot; class=&quot;headerlink&quot; title=&quot;#13460. 구슬 탈출 2&quot;&gt;&lt;/a&gt;#13460. 구슬 탈출 2&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="13460-구슬-탈출-2"><a href="#13460-구슬-탈출-2" class="headerlink" title="#13460. 구슬 탈출 2"></a>#13460. 구슬 탈출 2</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/13460" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>시뮬레이션 문제이다.</li><li>어떤 방향으로 기울일지 정해야 한다. (모든 경우를 구해야 한다. - 재귀 사용)<br>이전 방향과 반대되는 방향으로 이동할 필요는 없다.</li><li>맵을 갱신할 필요는 없고 구슬의 위치만 변경하면 된다.</li><li>각 경우마다 구슬의 위치를 다음 작업에 넘겨주어야 한다. (재귀 함수 인자로 넘기기)</li><li>기울이기 재귀함수<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Move(이동 횟수, 이전 방향, 빨간 구슬 위치, 파란 구슬 위치)</span><br><span class="line"> <span class="keyword">if</span> 이동 횟수 &gt; <span class="number">10</span>  <span class="keyword">return</span></span><br><span class="line"> <span class="keyword">if</span> 파란 구슬이 구멍에 들어간 경우 <span class="keyword">return</span></span><br><span class="line"> <span class="keyword">if</span> 빨간 구슬만 구멍에 들어간 경우 최솟값 갱신 <span class="keyword">return</span></span><br><span class="line"> <span class="number">4</span> 방향 이동</span><br><span class="line">  벽이 아닐 때까지, 구멍 일 때까지 이동</span><br><span class="line">  <span class="comment">// 빨간 구슬 이동</span></span><br><span class="line">  <span class="comment">// 파란 구슬 이동</span></span><br><span class="line">  이동이 끝나면</span><br><span class="line">  <span class="keyword">if</span> 위치가 겹칠 때</span><br><span class="line">     <span class="keyword">if</span> 구멍이면 Move(이동 횟수 + <span class="number">1</span>, 방향, 위치)</span><br><span class="line">     <span class="keyword">else</span> </span><br><span class="line">        같은 행일 때</span><br><span class="line">같은 열일 때</span><br><span class="line">위치 이동</span><br><span class="line">        Move(이동횟수 +<span class="number">1</span>, 방향, 위치)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"> Move(이동횟수 +<span class="number">1</span>, 방향, 위치)</span><br></pre></td></tr></table></figure>빨간 구슬이 방향에 맞게 이동하고, 그 후 파란 구슬이 이동한다.</li></ul><p>구멍에 들어갔거나 같은 행이거나 같은 열이면 위치가 같게 된다. 이때 방향과 처음 위치에 맞게 방향을 바꿔준다.</p><p>갱신이 끝났으면 재귀함수를 호출해준다.</p><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M, ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> g_x, g_y;</span><br><span class="line"><span class="keyword">char</span> board[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> count_dir[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Red</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Blue</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> prior_dir, Red r, Blue b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (b.x == g_x &amp;&amp; b.y == g_y) <span class="keyword">return</span>; <span class="comment">// 파란 구슬 구멍 통과</span></span><br><span class="line"><span class="keyword">if</span> (r.x == g_x &amp;&amp; r.y == g_y) &#123; <span class="comment">// 빨간 구슬만 구멍 통과</span></span><br><span class="line"><span class="keyword">if</span> (ans &gt; cnt) ans = cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; ++dir) &#123;</span><br><span class="line">Red nr = &#123; r.x, r.y &#125;; Blue nb = &#123; b.x, b.y &#125;; <span class="comment">// next</span></span><br><span class="line"><span class="keyword">if</span> (prior_dir != <span class="number">-1</span> &amp;&amp; count_dir[prior_dir] == dir) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[nr.x + dx[dir]][nr.y + dy[dir]] == <span class="string">'#'</span>) <span class="keyword">break</span>;</span><br><span class="line">nr.x += dx[dir];</span><br><span class="line">nr.y += dy[dir];</span><br><span class="line"><span class="keyword">if</span> (board[nr.x][nr.y] == <span class="string">'O'</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (board[nb.x + dx[dir]][nb.y + dy[dir]] == <span class="string">'#'</span>) <span class="keyword">break</span>;</span><br><span class="line">nb.x += dx[dir];</span><br><span class="line">nb.y += dy[dir];</span><br><span class="line"><span class="keyword">if</span> (board[nb.x][nb.y] == <span class="string">'O'</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (nr.x == nb.x &amp;&amp; nr.y == nb.y) &#123; <span class="comment">// 겹칠 때</span></span><br><span class="line"><span class="keyword">if</span> (board[nr.x][nr.y] == <span class="string">'O'</span>) Move(cnt + <span class="number">1</span>, dir, nr, nb);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (r.x == b.x) &#123; <span class="comment">// 같은 행</span></span><br><span class="line"><span class="keyword">if</span> (r.y &lt; b.y) &#123; <span class="comment">// R B</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">2</span>) nb.y++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) nr.y--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// B R</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">2</span>) nr.y++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>) nb.y--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (r.y == b.y) &#123; <span class="comment">// 같은 열</span></span><br><span class="line"><span class="keyword">if</span> (r.x &lt; b.x) &#123; <span class="comment">// R이 B보다 위</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">0</span>) nb.x++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) nr.x--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// R이 B보다 아래</span></span><br><span class="line"><span class="keyword">if</span> (dir == <span class="number">0</span>) nr.x++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">1</span>) nb.x--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Move(cnt + <span class="number">1</span>, dir, nr, nb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Move(cnt + <span class="number">1</span>, dir, nr, nb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">Red r; Blue b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; board[i][j];</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">g_x = i; g_y = j;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">'R'</span>) &#123;</span><br><span class="line">r.x = i; r.y = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="string">'B'</span>) &#123;</span><br><span class="line">b.x = i; b.y = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Move(<span class="number">0</span>, <span class="number">-1</span>, r, b);</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">1e9</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="문제-풀고나서-찾아본-깔끔한-코드"><a href="#문제-풀고나서-찾아본-깔끔한-코드" class="headerlink" title="문제 풀고나서 찾아본 깔끔한 코드"></a>문제 풀고나서 찾아본 깔끔한 코드</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> rx, ry, bx, by;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">11</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> rx, <span class="keyword">int</span> ry, <span class="keyword">int</span> bx, <span class="keyword">int</span> by, <span class="keyword">int</span> mx, <span class="keyword">int</span> my, <span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> rm = <span class="number">0</span>, bm = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (mx != my)&#123;</span><br><span class="line"><span class="keyword">while</span> (a[bx + mx][by + my] - <span class="string">'#'</span>)&#123;</span><br><span class="line">bx += mx;</span><br><span class="line">by += my;</span><br><span class="line">bm++;</span><br><span class="line"><span class="keyword">if</span> (!(a[bx][by] - <span class="string">'O'</span>))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[rx + mx][ry + my] - <span class="string">'#'</span>)&#123;</span><br><span class="line">rx += mx;</span><br><span class="line">ry += my;</span><br><span class="line">rm++;</span><br><span class="line"><span class="keyword">if</span> (!(a[rx][ry] - <span class="string">'O'</span>))&#123;</span><br><span class="line">ans = ans &lt; cnt ? ans : cnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rx == bx &amp;&amp; ry == by)</span><br><span class="line"><span class="keyword">if</span> (rm &lt; bm)</span><br><span class="line">bx -= mx, by -= my;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rx -= mx, ry -= my;</span><br><span class="line"><span class="keyword">if</span> (mx == <span class="number">0</span>)&#123;</span><br><span class="line">go(rx, ry, bx, by, <span class="number">1</span>, <span class="number">0</span>, cnt + <span class="number">1</span>);</span><br><span class="line">go(rx, ry, bx, by, <span class="number">-1</span>, <span class="number">0</span>, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (my == <span class="number">0</span>)&#123;</span><br><span class="line">go(rx, ry, bx, by, <span class="number">0</span>, <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">go(rx, ry, bx, by, <span class="number">0</span>, <span class="number">-1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m - <span class="number">1</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">'R'</span>)</span><br><span class="line">rx = i, ry = j;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">'B'</span>)</span><br><span class="line">bx = i, by = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">go(rx, ry, bx, by, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans &lt; <span class="number">11</span> ? ans : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/13460/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 12851번 숨바꼭질 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12851/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12851/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;12851-숨바꼭질-2&quot;&gt;&lt;a href=&quot;#12851-숨바꼭질-2&quot; class=&quot;headerlink&quot; title=&quot;#12851. 숨바꼭질 2&quot;&gt;&lt;/a&gt;#12851. 숨바꼭질 2&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Pr
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="12851-숨바꼭질-2"><a href="#12851-숨바꼭질-2" class="headerlink" title="#12851. 숨바꼭질 2"></a>#12851. 숨바꼭질 2</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li><a href="https://www.acmicpc.net/problem/12851" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>방법의 수를 구하는 것이 추가가 되었다.</li><li>이는 DP를 활용하여 구한다.</li><li>방문하지 않은 경로라면 방법의 수는 그대로 유지</li><li>방문한 경우 + 거리 차이가 1인 경우에만 방법의 수+1<br>거리 차이가 1인 경우에만 최소비용을 만족하는 경로이기 때문이다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dist[MAX + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[MAX + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">q.push(N);</span><br><span class="line">visit[N] = <span class="literal">true</span>;</span><br><span class="line">dist[N] = <span class="number">0</span>;</span><br><span class="line">cnt[N] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> next : &#123;x - <span class="number">1</span>, x + <span class="number">1</span>, x * <span class="number">2</span>&#125;) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= next &amp;&amp; next &lt;= MAX) &#123;</span><br><span class="line"><span class="keyword">if</span> (!visit[next]) &#123;</span><br><span class="line">visit[next] = <span class="literal">true</span>;</span><br><span class="line">dist[next] = dist[x] + <span class="number">1</span>;</span><br><span class="line">cnt[next] = cnt[x];</span><br><span class="line">q.push(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dist[next] == dist[x] + <span class="number">1</span>) &#123;</span><br><span class="line">cnt[next] += cnt[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line">BFS();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dist[K] &lt;&lt; <span class="string">"\n"</span> &lt;&lt; cnt[K] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12851/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 12100번 2048(Easy)</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12100/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12100/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;12100-2048-Easy&quot;&gt;&lt;a href=&quot;#12100-2048-Easy&quot; class=&quot;headerlink&quot; title=&quot;#12100. 2048(Easy)&quot;&gt;&lt;/a&gt;#12100. 2048(Easy)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;htt
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="12100-2048-Easy"><a href="#12100-2048-Easy" class="headerlink" title="#12100. 2048(Easy)"></a>#12100. 2048(Easy)</h1><p><a href="https://www.acmicpc.net/problem/12100" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N x N 크기의 보드판</li><li>한 번의 이동 : 보드판에 있는 모든 블록 상하좌우 중 한 방향으로 쭉 이동<br>단순히 한 칸이 아닌 <strong>해당 방향 이동할 수 있는 곳 끝까지</strong></li><li><strong>같은 값</strong>을 가진 블록이 충돌하면 하나로 합쳐짐<br>(한 번 합쳐지면 다시 합칠 수 없음 → 한 번 이동할 때 연속으로 합쳐질 수 없음 2개 → 1개인 경우만 존재)<br>블록이 합쳐지면 해당 블록의 숫자를 더한 값이 된다.</li></ul><p><strong>Goal: 최대 5번 이동해서 만들 수 있는 가장 큰 블록의 값 구하기</strong></p><ul><li><p>입력</p><p>  N: ~20<br>  0: 빈칸<br>  2^i(i= 1, 2…10): 블록 // 적어도 하나 주어짐</p></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><strong>최대</strong> 5번 이동이니 한 번 이동하면서 최대 블록 값을 갱신해주어야 한다.<br>(꼭 안그래도 되겠지만)</li></ul><ol><li>5번 이동하는 조합을 구한다.</li><li>그 이동에 맞게 블록을 이동시킨다.</li></ol><ul><li>해당 번째의 방향을 저장할 배열을 이용해 5개의 방향을 저장해놓고, 모두 저장했을 때 보드판을 움직이도록 한다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">5</span>) &#123; <span class="comment">// 방향 5개가 저장되었을 때</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123; <span class="comment">// 입력값인 temp를 board로 옮기고 작업을 수행한다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123; </span><br><span class="line">moveBlock(해당 방향);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">direction[idx] = i;</span><br><span class="line">dfs(idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>moveBlock()</code> 블럭 이동</li></ul><p>움직이는 방향이 좌우면 한 행의 열이 바뀌면서 board위의 블럭들이 바뀐다.<br>이때 좌로 이동하면 오른쪽부터 탐색, 우로 이동하면 왼쪽부터 탐색해야 한다.</p><p>움직이는 방향이 상하일 때도 위와 같은 방식이다. 이를 잘 구분해주어 update할 때 행, 열의 인덱스를 반영한다.</p><ul><li><code>update()</code> 아래 코드는 좌우로 이동할 때 블럭들을 갱신하는 함수다.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCol</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span> &amp;&amp; board[i][j] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[i][value_idx] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[i][value_idx]);</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[i][j];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>3가지 경우를 확인하고 각 작업을 수행한다.</li></ul><ol><li>블럭이 없는 빈 곳: queue에 해당 위치를 넣어준다. (블럭을 옮길 때 쓰임)</li><li>합칠 대상이 되는 블럭: 이전에 저장해놓은 블럭 값과 같으면 합칠 수 있다.<br>이전에 저장해놓은 블럭의 값을 2배로 하고 합칠 대상이 되는 블럭은 0으로 바꾼뒤 이 위치를 queue에 넣어준다. </li><li>합쳐질 가능성이 있는 블럭: 이 값은 나중에 합쳐질 수 있으므로 해당 값과 위치를 저장해 놓는다.<br>단, queue가 비어있지 않다면 이 블럭의 위치를 옮겨주어야 하기에 queue에서 pop한 0의 위치로 해당 블럭 값을 넣어준다.<br>이렇게 되면 바뀌기 전 블럭은 0이 되고 이 위치를 다시 queue에 넣어주어야 한다.<br>마지막으로 위치가 바뀐 지점을 갱신해주면 된다.</li></ol><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, value, value_idx, zero_idx, answer = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> board[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> temp[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> direction[<span class="number">5</span>]; <span class="comment">// 방향 조합 0:상, 1:하, 2:좌, 3:우</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCol</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span> &amp;&amp; board[i][j] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[i][value_idx] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[i][value_idx]);</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">&#125;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[i][j];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateRow</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[j][i] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span> &amp;&amp; board[j][i] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[value_idx][i] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[value_idx][i]);</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[zero_idx][i] = value;</span><br><span class="line">&#125;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[j][i];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">board[zero_idx][i] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveBlock</span><span class="params">(<span class="keyword">int</span> <span class="built_in">move</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; zero;</span><br><span class="line">value = <span class="number">0</span>; value_idx = <span class="number">0</span>; zero_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">0</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">1</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">moveBlock(direction[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">direction[idx] = i;</span><br><span class="line">dfs(idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드가 틀린 Test case</p><pre><code>72 2 2 2 2 2 22 0 2 2 2 2 22 0 2 2 2 2 22 0 2 2 2 2 22 2 2 0 2 2 2 2 2 2 2 2 2 02 2 2 2 2 2 0-&gt; 32 // output</code></pre><p>디버깅용 코드를 보면 알겠지만 방향을 3(오른쪽)으로 했을 때 board의 블럭들을 확인해보니<br>실제로 잘 합쳐지지 않았던 것이다. (<strong>solution</strong>에는 정답 코드를 반영)</p><ul><li>위 코드의 빨간 줄을 없애주었다. 합쳐지면 0이 있는 곳을 찾아 넣는 작업을 하면 안되기 때문이다. 이 블럭은 합쳐졌고, 이 위치는 0으로 채우고 이 인덱스를 queue에 넣어주기만 하면 된다.</li><li>queue가 비어있지 않다면 해당 지점에 블럭을 놓는 작업이 있는데<br>이때,  <strong>value_idx = zero_idx</strong> 를 추가해주어야 해당 블럭의 바뀐 위치도 알 수 있다.<br>이를 추가하지 않으면 바뀌기 전 위치가 남아있어 합쳐지지 않는다.</li></ul><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>코드 보기<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, value, value_idx, zero_idx, answer = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> board[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> temp[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> direction[<span class="number">5</span>]; <span class="comment">// 방향 조합 0:상, 1:하, 2:좌, 3:우</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCol</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span> &amp;&amp; board[i][j] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[i][value_idx] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[i][value_idx]);</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[i][j];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d-%d번재: \n", i, j);</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line"><span class="comment">//for (int j = 0; j &lt; n; ++j) &#123;</span></span><br><span class="line"><span class="comment">//printf("%d ", board[i][j]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateRow</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[j][i] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span> &amp;&amp; board[j][i] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[value_idx][i] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[value_idx][i]);</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[j][i];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">board[zero_idx][i] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveBlock</span><span class="params">(<span class="keyword">int</span> <span class="built_in">move</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; zero;</span><br><span class="line">value = <span class="number">0</span>; value_idx = <span class="number">0</span>; zero_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">0</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">1</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">moveBlock(direction[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">direction[idx] = i;</span><br><span class="line">dfs(idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dfs(0);</span></span><br><span class="line">direction[<span class="number">0</span>] = <span class="number">3</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">moveBlock(direction[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Try"><a href="#2-Try" class="headerlink" title="2 Try"></a>2 Try</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, value, value_idx, zero_idx, answer = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> board[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> temp[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> direction[<span class="number">5</span>]; <span class="comment">// 방향 조합 0:상, 1:하, 2:좌, 3:우</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateCol</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span> &amp;&amp; board[i][j] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[i][value_idx] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[i][value_idx]);</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[i][j];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">board[i][zero_idx] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateRow</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; &amp;zero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (board[j][i] == <span class="number">0</span>) &#123; <span class="comment">// 0의 위치</span></span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span> &amp;&amp; board[j][i] == value) &#123; <span class="comment">// 블럭 값이 같을 때</span></span><br><span class="line">value = <span class="number">0</span>; <span class="comment">// 한 번에 한 번만 합치도록 0으로 초기화</span></span><br><span class="line">board[value_idx][i] *= <span class="number">2</span>;</span><br><span class="line">answer = <span class="built_in">max</span>(answer, board[value_idx][i]);</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">zero.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (board[j][i] != <span class="number">0</span>) &#123;</span><br><span class="line">value_idx = j;</span><br><span class="line">value = board[j][i];</span><br><span class="line">answer = <span class="built_in">max</span>(answer, value);</span><br><span class="line"><span class="keyword">if</span> (!zero.empty()) &#123;</span><br><span class="line">zero_idx = zero.front();</span><br><span class="line">zero.pop();</span><br><span class="line">board[j][i] = <span class="number">0</span>;</span><br><span class="line">board[zero_idx][i] = value;</span><br><span class="line">zero.push(j);</span><br><span class="line">value_idx = zero_idx; <span class="comment">// 변경</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveBlock</span><span class="params">(<span class="keyword">int</span> <span class="built_in">move</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; zero;</span><br><span class="line">value = <span class="number">0</span>; value_idx = <span class="number">0</span>; zero_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">0</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">1</span>) &#123;</span><br><span class="line">updateRow(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">updateCol(i, j, zero);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (idx == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">board[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">moveBlock(direction[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">direction[idx] = i;</span><br><span class="line">dfs(idx+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://user-images.githubusercontent.com/46062199/73121360-abfb5c00-3fbc-11ea-8669-ec3415c79ada.png" alt></li></ul>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/12100/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11729번 하노이 탑 이동 순서</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11729/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11729/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11729-하노이-탑-이동-순서&quot;&gt;&lt;a href=&quot;#11729-하노이-탑-이동-순서&quot; class=&quot;headerlink&quot; title=&quot;#11729. 하노이 탑 이동 순서&quot;&gt;&lt;/a&gt;#11729. 하노이 탑 이동 순서&lt;/h1&gt;&lt;h3 id=&quot;P
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11729-하노이-탑-이동-순서"><a href="#11729-하노이-탑-이동-순서" class="headerlink" title="#11729. 하노이 탑 이동 순서"></a>#11729. 하노이 탑 이동 순서</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>N개의 원판</li><li>첫 번째 장대 → 세 번째 장대</li><li>한 번에 한 개의 원판만 다른 탑으로 이동 가능</li><li>원판 위 &lt; 원판 아래</li><li>원판 이동 순서 최소화</li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><del>굳이 이를 최소화시키는 방법을 생각하기보다 컴퓨터가 알아서 최소의 방법을 계산하도록 하자.</del>  → 하노이 탑도 알고리즘이 존재</p><ul><li>먼저 하나의 원판만 있을 때를 생각해보자</li></ul><p><img src="https://user-images.githubusercontent.com/46062199/73121288-00520c00-3fbc-11ea-936d-5cb92d287123.png" alt></p><p>보조 기둥 필요없이 바로 목표 기둥으로 이동하면 된다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// recursive frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(원반 개수, 시작, 보조, 목표)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(원반의 개수 == <span class="number">1</span>) &#123;</span><br><span class="line">시작-&gt;목표</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>원반의 개수가 1보다 클때는 어떻게 해야 할까?</p><p><img src="https://user-images.githubusercontent.com/46062199/73121290-034cfc80-3fbc-11ea-934a-c8215d11f3e0.png" alt></p><p>가장 큰 원반을 제외한 모든 원반이 보조 기둥에 있어야 한다. → <strong>이게 포인트</strong></p><p><img src="https://user-images.githubusercontent.com/46062199/73121292-03e59300-3fbc-11ea-9c02-1ee4690168dd.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 맨 아래에 있는 원반을 제외한 모든 원반을 보조 기둥으로 옮긴다.</span></span><br><span class="line"><span class="built_in">move</span>(원반개수<span class="number">-1</span>, 시작, 목표, 보조); <span class="comment">// 시작 -&gt; 보조</span></span><br></pre></td></tr></table></figure><br>그러면 가장 큰 원반은 이 부분이 적용된다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(원반의 개수 == <span class="number">1</span>) &#123;</span><br><span class="line">시작-&gt;목표</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>가장 큰 원반이 목표 기둥으로 이동하였고, 이제 이 원반은 없는 것으로 보아도 무방하다. 나머지 원반들이 모든 기둥을 이동할 수 있기 때문이다.</p><p><img src="https://user-images.githubusercontent.com/46062199/73121293-03e59300-3fbc-11ea-9631-44f7b5937c96.png" alt></p><p>그러면 이제 다시 n-1개의 원반을 가지고 위와 같은 작업을 진행한다.<br>이때는 원래 보조 기둥을 시작 기둥으로, 시작 기둥을 보조 기둥으로 생각해야 한다.</p><p><img src="https://user-images.githubusercontent.com/46062199/73121294-03e59300-3fbc-11ea-8ce0-397a59024104.png" alt><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">move</span>(원반개수<span class="number">-1</span>, 보조, 시작, 목표);</span><br></pre></td></tr></table></figure><br>Recursive frame의 내용을 완성해보자.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> start, <span class="keyword">int</span> temp, <span class="keyword">int</span> goal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// start -&gt; goal</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">move</span>(count<span class="number">-1</span>, start, goal, temp); <span class="comment">// start-&gt;temp</span></span><br><span class="line">    <span class="comment">// start -&gt; goal</span></span><br><span class="line">    <span class="built_in">move</span>(count<span class="number">-1</span>, temp, start, goal); <span class="comment">// temp-&gt;goal</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>주석으로 되어 있는 부분은 실질적으로 어떤 기둥에서 어떤 기둥으로 원반이 움직였는지를 나타내는 부분이다.</p><p>좀 더 깊은 이해를 위해 원반의 개수가 3개일 때 재귀함수 호출 순서를 작성하였다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">move</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">move</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>) <span class="comment">// 1, 2번 원반이 2번 기둥으로 가는 과정</span></span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) </span><br><span class="line"><span class="number">1</span>에서 <span class="number">3</span>으로 이동 (<span class="number">1</span>번 원반)</span><br><span class="line"><span class="number">1</span>에서 <span class="number">2</span>로 이동 (<span class="number">2</span>번 원반)</span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">3</span>에서 <span class="number">2</span>로 이동(<span class="number">1</span>번 원반)</span><br><span class="line"><span class="number">1</span>에서 <span class="number">3</span>으로 이동(<span class="number">3</span>번 원반)</span><br><span class="line"><span class="built_in">move</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>) <span class="comment">// 1, 2번 원반이 3번 기둥으로 가는 과정</span></span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">2</span>에서 <span class="number">1</span>로 이동(<span class="number">1</span>번 원반)</span><br><span class="line"><span class="number">2</span>에서 <span class="number">3</span>으로 이동(<span class="number">2</span>번 원반)</span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">1</span>에서 <span class="number">3</span>으로 이동 (<span class="number">1</span>번 원반)</span><br></pre></td></tr></table></figure></p><h3 id="전체-코드"><a href="#전체-코드" class="headerlink" title="전체 코드"></a>전체 코드</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; answer;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> start, <span class="keyword">int</span> temp, <span class="keyword">int</span> goal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>) &#123;</span><br><span class="line">        answer.push_back(make_pair(start, goal));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    move(count<span class="number">-1</span>, start, goal, temp); <span class="comment">// start-&gt;temp</span></span><br><span class="line">    answer.push_back(make_pair(start, goal));</span><br><span class="line">    move(count<span class="number">-1</span>, temp, start, goal); <span class="comment">// temp-&gt;goal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">   move(n, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; answer.size() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> v : answer) &#123;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; v.first &lt;&lt; <span class="string">" "</span> &lt;&lt; v.second &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이동 횟수부터 출력해야 하므로, pair를 만들어 vector에 넣어주었다.</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11729/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11651번 좌표 정렬하기 2</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11651/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11651/</guid>
      <pubDate>Sat, 25 Jan 2020 08:02:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11651-좌표-정렬하기-2&quot;&gt;&lt;a href=&quot;#11651-좌표-정렬하기-2&quot; class=&quot;headerlink&quot; title=&quot;#11651. 좌표 정렬하기 2&quot;&gt;&lt;/a&gt;#11651. 좌표 정렬하기 2&lt;/h1&gt;&lt;h3 id=&quot;Problem&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11651-좌표-정렬하기-2"><a href="#11651-좌표-정렬하기-2" class="headerlink" title="#11651. 좌표 정렬하기 2"></a>#11651. 좌표 정렬하기 2</h1><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>2차원 평면 위의 점 N개</li><li>y좌표 증가 순으로 정렬<ul><li>같다면 x좌표 증가 순으로 정렬</li></ul></li></ul><p>즉, y좌표 오름차순(같다면 x좌표 오름차순)으로 정렬하는 문제이다.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>2차원 vector에 (y, x)를 담는다. → 정렬 때문</li><li>sort함수를 사용 (위 문제 조건처럼 정렬된다.)</li><li>출력은 거꾸로 한다.</li></ul><p>iostream 헤더 파일의 cin과 cout을 쓰면 <strong>시간초과</strong> 되기에 cstdio를 사용하였다.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; positions;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n, x, y;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;n);</span><br><span class="line">   positions.resize(n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">" %d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">        positions[i].push_back(y);</span><br><span class="line">        positions[i].push_back(x); </span><br><span class="line">   &#125;</span><br><span class="line">   sort(positions.<span class="built_in">begin</span>(), positions.<span class="built_in">end</span>());</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> v : positions) &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = v.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, v[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://user-images.githubusercontent.com/46062199/73121196-0693b880-3fbb-11ea-99a2-516190f126f4.png" alt></p><p>92ms가 상당히 빠른 것은 아니기에 다른 최적의 정렬 방법이 있을지도 모른다.</p>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11651/#disqus_thread</comments>
    </item>
    
    <item>
      <title>백준 11650번 좌표 정렬하기</title>
      <link>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11650/</link>
      <guid>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11650/</guid>
      <pubDate>Sat, 25 Jan 2020 08:01:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;11650-좌표-정렬하기&quot;&gt;&lt;a href=&quot;#11650-좌표-정렬하기&quot; class=&quot;headerlink&quot; title=&quot;#11650. 좌표 정렬하기&quot;&gt;&lt;/a&gt;#11650. 좌표 정렬하기&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="11650-좌표-정렬하기"><a href="#11650-좌표-정렬하기" class="headerlink" title="#11650. 좌표 정렬하기"></a>#11650. 좌표 정렬하기</h1><p><a href="https://www.acmicpc.net/problem/11650" target="_blank" rel="external nofollow noopener noreferrer">문제링크</a></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ul><li>2차원 평면 (x, y)</li><li>x 오름차순 정렬<ul><li>x가 같다면 y 오름차순 정렬</li></ul></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li><x, y>를 <strong>pair</strong>를 사용하여 저장한다.</x,></li><li>pair를 사용하여 정렬하면 위 문제의 조건대로 정렬된다.</li></ul><h3 id="1-Try"><a href="#1-Try" class="headerlink" title="1 Try"></a>1 Try</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, x, y;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; answer;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">answer.push_back(make_pair(x, y));</span><br><span class="line">&#125;</span><br><span class="line">sort(answer.begin(), answer.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> ans : answer) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans.first &lt;&lt; <span class="string">" "</span> &lt;&lt; ans.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://doyuni.github.io/2020/01/25/Algorithm/BOJ/11650/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
